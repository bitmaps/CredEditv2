//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace MoneyManager {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("creddataDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class creddataDataSet : global::System.Data.DataSet {
        
        private ACCOUNTSDataTable tableACCOUNTS;
        
        private ASSETSDataTable tableASSETS;
        
        private BUDGET_DETAILDataTable tableBUDGET_DETAIL;
        
        private BUDGET_HEADERDataTable tableBUDGET_HEADER;
        
        private CATEGORIESDataTable tableCATEGORIES;
        
        private GRID_SETTINGSDataTable tableGRID_SETTINGS;
        
        private PAYEE_IMPORTDataTable tablePAYEE_IMPORT;
        
        private PAYEESDataTable tablePAYEES;
        
        private REP_FILTERSDataTable tableREP_FILTERS;
        
        private REPEAT_SPLIT_TRANSACTIONSDataTable tableREPEAT_SPLIT_TRANSACTIONS;
        
        private REPEAT_TRANSACTIONSDataTable tableREPEAT_TRANSACTIONS;
        
        private SPLIT_TRANSACTIONSDataTable tableSPLIT_TRANSACTIONS;
        
        private SUB_CATEGORIESDataTable tableSUB_CATEGORIES;
        
        private TRANS_FILTERSDataTable tableTRANS_FILTERS;
        
        private TRANSACTIONSDataTable tableTRANSACTIONS;
        
        private USER_SETTINGSDataTable tableUSER_SETTINGS;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public creddataDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected creddataDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["ACCOUNTS"] != null)) {
                    base.Tables.Add(new ACCOUNTSDataTable(ds.Tables["ACCOUNTS"]));
                }
                if ((ds.Tables["ASSETS"] != null)) {
                    base.Tables.Add(new ASSETSDataTable(ds.Tables["ASSETS"]));
                }
                if ((ds.Tables["BUDGET_DETAIL"] != null)) {
                    base.Tables.Add(new BUDGET_DETAILDataTable(ds.Tables["BUDGET_DETAIL"]));
                }
                if ((ds.Tables["BUDGET_HEADER"] != null)) {
                    base.Tables.Add(new BUDGET_HEADERDataTable(ds.Tables["BUDGET_HEADER"]));
                }
                if ((ds.Tables["CATEGORIES"] != null)) {
                    base.Tables.Add(new CATEGORIESDataTable(ds.Tables["CATEGORIES"]));
                }
                if ((ds.Tables["GRID_SETTINGS"] != null)) {
                    base.Tables.Add(new GRID_SETTINGSDataTable(ds.Tables["GRID_SETTINGS"]));
                }
                if ((ds.Tables["PAYEE_IMPORT"] != null)) {
                    base.Tables.Add(new PAYEE_IMPORTDataTable(ds.Tables["PAYEE_IMPORT"]));
                }
                if ((ds.Tables["PAYEES"] != null)) {
                    base.Tables.Add(new PAYEESDataTable(ds.Tables["PAYEES"]));
                }
                if ((ds.Tables["REP_FILTERS"] != null)) {
                    base.Tables.Add(new REP_FILTERSDataTable(ds.Tables["REP_FILTERS"]));
                }
                if ((ds.Tables["REPEAT_SPLIT_TRANSACTIONS"] != null)) {
                    base.Tables.Add(new REPEAT_SPLIT_TRANSACTIONSDataTable(ds.Tables["REPEAT_SPLIT_TRANSACTIONS"]));
                }
                if ((ds.Tables["REPEAT_TRANSACTIONS"] != null)) {
                    base.Tables.Add(new REPEAT_TRANSACTIONSDataTable(ds.Tables["REPEAT_TRANSACTIONS"]));
                }
                if ((ds.Tables["SPLIT_TRANSACTIONS"] != null)) {
                    base.Tables.Add(new SPLIT_TRANSACTIONSDataTable(ds.Tables["SPLIT_TRANSACTIONS"]));
                }
                if ((ds.Tables["SUB_CATEGORIES"] != null)) {
                    base.Tables.Add(new SUB_CATEGORIESDataTable(ds.Tables["SUB_CATEGORIES"]));
                }
                if ((ds.Tables["TRANS_FILTERS"] != null)) {
                    base.Tables.Add(new TRANS_FILTERSDataTable(ds.Tables["TRANS_FILTERS"]));
                }
                if ((ds.Tables["TRANSACTIONS"] != null)) {
                    base.Tables.Add(new TRANSACTIONSDataTable(ds.Tables["TRANSACTIONS"]));
                }
                if ((ds.Tables["USER_SETTINGS"] != null)) {
                    base.Tables.Add(new USER_SETTINGSDataTable(ds.Tables["USER_SETTINGS"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ACCOUNTSDataTable ACCOUNTS {
            get {
                return this.tableACCOUNTS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ASSETSDataTable ASSETS {
            get {
                return this.tableASSETS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BUDGET_DETAILDataTable BUDGET_DETAIL {
            get {
                return this.tableBUDGET_DETAIL;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BUDGET_HEADERDataTable BUDGET_HEADER {
            get {
                return this.tableBUDGET_HEADER;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CATEGORIESDataTable CATEGORIES {
            get {
                return this.tableCATEGORIES;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GRID_SETTINGSDataTable GRID_SETTINGS {
            get {
                return this.tableGRID_SETTINGS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PAYEE_IMPORTDataTable PAYEE_IMPORT {
            get {
                return this.tablePAYEE_IMPORT;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PAYEESDataTable PAYEES {
            get {
                return this.tablePAYEES;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public REP_FILTERSDataTable REP_FILTERS {
            get {
                return this.tableREP_FILTERS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public REPEAT_SPLIT_TRANSACTIONSDataTable REPEAT_SPLIT_TRANSACTIONS {
            get {
                return this.tableREPEAT_SPLIT_TRANSACTIONS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public REPEAT_TRANSACTIONSDataTable REPEAT_TRANSACTIONS {
            get {
                return this.tableREPEAT_TRANSACTIONS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SPLIT_TRANSACTIONSDataTable SPLIT_TRANSACTIONS {
            get {
                return this.tableSPLIT_TRANSACTIONS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SUB_CATEGORIESDataTable SUB_CATEGORIES {
            get {
                return this.tableSUB_CATEGORIES;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TRANS_FILTERSDataTable TRANS_FILTERS {
            get {
                return this.tableTRANS_FILTERS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TRANSACTIONSDataTable TRANSACTIONS {
            get {
                return this.tableTRANSACTIONS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public USER_SETTINGSDataTable USER_SETTINGS {
            get {
                return this.tableUSER_SETTINGS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public override global::System.Data.DataSet Clone() {
            creddataDataSet cln = ((creddataDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ACCOUNTS"] != null)) {
                    base.Tables.Add(new ACCOUNTSDataTable(ds.Tables["ACCOUNTS"]));
                }
                if ((ds.Tables["ASSETS"] != null)) {
                    base.Tables.Add(new ASSETSDataTable(ds.Tables["ASSETS"]));
                }
                if ((ds.Tables["BUDGET_DETAIL"] != null)) {
                    base.Tables.Add(new BUDGET_DETAILDataTable(ds.Tables["BUDGET_DETAIL"]));
                }
                if ((ds.Tables["BUDGET_HEADER"] != null)) {
                    base.Tables.Add(new BUDGET_HEADERDataTable(ds.Tables["BUDGET_HEADER"]));
                }
                if ((ds.Tables["CATEGORIES"] != null)) {
                    base.Tables.Add(new CATEGORIESDataTable(ds.Tables["CATEGORIES"]));
                }
                if ((ds.Tables["GRID_SETTINGS"] != null)) {
                    base.Tables.Add(new GRID_SETTINGSDataTable(ds.Tables["GRID_SETTINGS"]));
                }
                if ((ds.Tables["PAYEE_IMPORT"] != null)) {
                    base.Tables.Add(new PAYEE_IMPORTDataTable(ds.Tables["PAYEE_IMPORT"]));
                }
                if ((ds.Tables["PAYEES"] != null)) {
                    base.Tables.Add(new PAYEESDataTable(ds.Tables["PAYEES"]));
                }
                if ((ds.Tables["REP_FILTERS"] != null)) {
                    base.Tables.Add(new REP_FILTERSDataTable(ds.Tables["REP_FILTERS"]));
                }
                if ((ds.Tables["REPEAT_SPLIT_TRANSACTIONS"] != null)) {
                    base.Tables.Add(new REPEAT_SPLIT_TRANSACTIONSDataTable(ds.Tables["REPEAT_SPLIT_TRANSACTIONS"]));
                }
                if ((ds.Tables["REPEAT_TRANSACTIONS"] != null)) {
                    base.Tables.Add(new REPEAT_TRANSACTIONSDataTable(ds.Tables["REPEAT_TRANSACTIONS"]));
                }
                if ((ds.Tables["SPLIT_TRANSACTIONS"] != null)) {
                    base.Tables.Add(new SPLIT_TRANSACTIONSDataTable(ds.Tables["SPLIT_TRANSACTIONS"]));
                }
                if ((ds.Tables["SUB_CATEGORIES"] != null)) {
                    base.Tables.Add(new SUB_CATEGORIESDataTable(ds.Tables["SUB_CATEGORIES"]));
                }
                if ((ds.Tables["TRANS_FILTERS"] != null)) {
                    base.Tables.Add(new TRANS_FILTERSDataTable(ds.Tables["TRANS_FILTERS"]));
                }
                if ((ds.Tables["TRANSACTIONS"] != null)) {
                    base.Tables.Add(new TRANSACTIONSDataTable(ds.Tables["TRANSACTIONS"]));
                }
                if ((ds.Tables["USER_SETTINGS"] != null)) {
                    base.Tables.Add(new USER_SETTINGSDataTable(ds.Tables["USER_SETTINGS"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars(bool initTable) {
            this.tableACCOUNTS = ((ACCOUNTSDataTable)(base.Tables["ACCOUNTS"]));
            if ((initTable == true)) {
                if ((this.tableACCOUNTS != null)) {
                    this.tableACCOUNTS.InitVars();
                }
            }
            this.tableASSETS = ((ASSETSDataTable)(base.Tables["ASSETS"]));
            if ((initTable == true)) {
                if ((this.tableASSETS != null)) {
                    this.tableASSETS.InitVars();
                }
            }
            this.tableBUDGET_DETAIL = ((BUDGET_DETAILDataTable)(base.Tables["BUDGET_DETAIL"]));
            if ((initTable == true)) {
                if ((this.tableBUDGET_DETAIL != null)) {
                    this.tableBUDGET_DETAIL.InitVars();
                }
            }
            this.tableBUDGET_HEADER = ((BUDGET_HEADERDataTable)(base.Tables["BUDGET_HEADER"]));
            if ((initTable == true)) {
                if ((this.tableBUDGET_HEADER != null)) {
                    this.tableBUDGET_HEADER.InitVars();
                }
            }
            this.tableCATEGORIES = ((CATEGORIESDataTable)(base.Tables["CATEGORIES"]));
            if ((initTable == true)) {
                if ((this.tableCATEGORIES != null)) {
                    this.tableCATEGORIES.InitVars();
                }
            }
            this.tableGRID_SETTINGS = ((GRID_SETTINGSDataTable)(base.Tables["GRID_SETTINGS"]));
            if ((initTable == true)) {
                if ((this.tableGRID_SETTINGS != null)) {
                    this.tableGRID_SETTINGS.InitVars();
                }
            }
            this.tablePAYEE_IMPORT = ((PAYEE_IMPORTDataTable)(base.Tables["PAYEE_IMPORT"]));
            if ((initTable == true)) {
                if ((this.tablePAYEE_IMPORT != null)) {
                    this.tablePAYEE_IMPORT.InitVars();
                }
            }
            this.tablePAYEES = ((PAYEESDataTable)(base.Tables["PAYEES"]));
            if ((initTable == true)) {
                if ((this.tablePAYEES != null)) {
                    this.tablePAYEES.InitVars();
                }
            }
            this.tableREP_FILTERS = ((REP_FILTERSDataTable)(base.Tables["REP_FILTERS"]));
            if ((initTable == true)) {
                if ((this.tableREP_FILTERS != null)) {
                    this.tableREP_FILTERS.InitVars();
                }
            }
            this.tableREPEAT_SPLIT_TRANSACTIONS = ((REPEAT_SPLIT_TRANSACTIONSDataTable)(base.Tables["REPEAT_SPLIT_TRANSACTIONS"]));
            if ((initTable == true)) {
                if ((this.tableREPEAT_SPLIT_TRANSACTIONS != null)) {
                    this.tableREPEAT_SPLIT_TRANSACTIONS.InitVars();
                }
            }
            this.tableREPEAT_TRANSACTIONS = ((REPEAT_TRANSACTIONSDataTable)(base.Tables["REPEAT_TRANSACTIONS"]));
            if ((initTable == true)) {
                if ((this.tableREPEAT_TRANSACTIONS != null)) {
                    this.tableREPEAT_TRANSACTIONS.InitVars();
                }
            }
            this.tableSPLIT_TRANSACTIONS = ((SPLIT_TRANSACTIONSDataTable)(base.Tables["SPLIT_TRANSACTIONS"]));
            if ((initTable == true)) {
                if ((this.tableSPLIT_TRANSACTIONS != null)) {
                    this.tableSPLIT_TRANSACTIONS.InitVars();
                }
            }
            this.tableSUB_CATEGORIES = ((SUB_CATEGORIESDataTable)(base.Tables["SUB_CATEGORIES"]));
            if ((initTable == true)) {
                if ((this.tableSUB_CATEGORIES != null)) {
                    this.tableSUB_CATEGORIES.InitVars();
                }
            }
            this.tableTRANS_FILTERS = ((TRANS_FILTERSDataTable)(base.Tables["TRANS_FILTERS"]));
            if ((initTable == true)) {
                if ((this.tableTRANS_FILTERS != null)) {
                    this.tableTRANS_FILTERS.InitVars();
                }
            }
            this.tableTRANSACTIONS = ((TRANSACTIONSDataTable)(base.Tables["TRANSACTIONS"]));
            if ((initTable == true)) {
                if ((this.tableTRANSACTIONS != null)) {
                    this.tableTRANSACTIONS.InitVars();
                }
            }
            this.tableUSER_SETTINGS = ((USER_SETTINGSDataTable)(base.Tables["USER_SETTINGS"]));
            if ((initTable == true)) {
                if ((this.tableUSER_SETTINGS != null)) {
                    this.tableUSER_SETTINGS.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitClass() {
            this.DataSetName = "creddataDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/creddataDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableACCOUNTS = new ACCOUNTSDataTable();
            base.Tables.Add(this.tableACCOUNTS);
            this.tableASSETS = new ASSETSDataTable();
            base.Tables.Add(this.tableASSETS);
            this.tableBUDGET_DETAIL = new BUDGET_DETAILDataTable();
            base.Tables.Add(this.tableBUDGET_DETAIL);
            this.tableBUDGET_HEADER = new BUDGET_HEADERDataTable();
            base.Tables.Add(this.tableBUDGET_HEADER);
            this.tableCATEGORIES = new CATEGORIESDataTable();
            base.Tables.Add(this.tableCATEGORIES);
            this.tableGRID_SETTINGS = new GRID_SETTINGSDataTable();
            base.Tables.Add(this.tableGRID_SETTINGS);
            this.tablePAYEE_IMPORT = new PAYEE_IMPORTDataTable();
            base.Tables.Add(this.tablePAYEE_IMPORT);
            this.tablePAYEES = new PAYEESDataTable();
            base.Tables.Add(this.tablePAYEES);
            this.tableREP_FILTERS = new REP_FILTERSDataTable();
            base.Tables.Add(this.tableREP_FILTERS);
            this.tableREPEAT_SPLIT_TRANSACTIONS = new REPEAT_SPLIT_TRANSACTIONSDataTable();
            base.Tables.Add(this.tableREPEAT_SPLIT_TRANSACTIONS);
            this.tableREPEAT_TRANSACTIONS = new REPEAT_TRANSACTIONSDataTable();
            base.Tables.Add(this.tableREPEAT_TRANSACTIONS);
            this.tableSPLIT_TRANSACTIONS = new SPLIT_TRANSACTIONSDataTable();
            base.Tables.Add(this.tableSPLIT_TRANSACTIONS);
            this.tableSUB_CATEGORIES = new SUB_CATEGORIESDataTable();
            base.Tables.Add(this.tableSUB_CATEGORIES);
            this.tableTRANS_FILTERS = new TRANS_FILTERSDataTable();
            base.Tables.Add(this.tableTRANS_FILTERS);
            this.tableTRANSACTIONS = new TRANSACTIONSDataTable();
            base.Tables.Add(this.tableTRANSACTIONS);
            this.tableUSER_SETTINGS = new USER_SETTINGSDataTable();
            base.Tables.Add(this.tableUSER_SETTINGS);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeACCOUNTS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeASSETS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeBUDGET_DETAIL() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeBUDGET_HEADER() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeCATEGORIES() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeGRID_SETTINGS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializePAYEE_IMPORT() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializePAYEES() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeREP_FILTERS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeREPEAT_SPLIT_TRANSACTIONS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeREPEAT_TRANSACTIONS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeSPLIT_TRANSACTIONS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeSUB_CATEGORIES() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeTRANS_FILTERS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeTRANSACTIONS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeUSER_SETTINGS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            creddataDataSet ds = new creddataDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void ACCOUNTSRowChangeEventHandler(object sender, ACCOUNTSRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void ASSETSRowChangeEventHandler(object sender, ASSETSRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void BUDGET_DETAILRowChangeEventHandler(object sender, BUDGET_DETAILRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void BUDGET_HEADERRowChangeEventHandler(object sender, BUDGET_HEADERRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void CATEGORIESRowChangeEventHandler(object sender, CATEGORIESRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void GRID_SETTINGSRowChangeEventHandler(object sender, GRID_SETTINGSRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void PAYEE_IMPORTRowChangeEventHandler(object sender, PAYEE_IMPORTRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void PAYEESRowChangeEventHandler(object sender, PAYEESRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void REP_FILTERSRowChangeEventHandler(object sender, REP_FILTERSRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void REPEAT_SPLIT_TRANSACTIONSRowChangeEventHandler(object sender, REPEAT_SPLIT_TRANSACTIONSRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void REPEAT_TRANSACTIONSRowChangeEventHandler(object sender, REPEAT_TRANSACTIONSRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void SPLIT_TRANSACTIONSRowChangeEventHandler(object sender, SPLIT_TRANSACTIONSRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void SUB_CATEGORIESRowChangeEventHandler(object sender, SUB_CATEGORIESRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void TRANS_FILTERSRowChangeEventHandler(object sender, TRANS_FILTERSRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void TRANSACTIONSRowChangeEventHandler(object sender, TRANSACTIONSRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void USER_SETTINGSRowChangeEventHandler(object sender, USER_SETTINGSRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ACCOUNTSDataTable : global::System.Data.TypedTableBase<ACCOUNTSRow> {
            
            private global::System.Data.DataColumn columnACCOUNTID;
            
            private global::System.Data.DataColumn columnACCOUNTNAME;
            
            private global::System.Data.DataColumn columnACCOUNTTYPE;
            
            private global::System.Data.DataColumn columnACCOUNTNUM;
            
            private global::System.Data.DataColumn columnSTATUS;
            
            private global::System.Data.DataColumn columnNOTES;
            
            private global::System.Data.DataColumn columnHELDAT;
            
            private global::System.Data.DataColumn columnWEBSITE;
            
            private global::System.Data.DataColumn columnCONTACTINFO;
            
            private global::System.Data.DataColumn columnACCESSINFO;
            
            private global::System.Data.DataColumn columnINITIALBAL;
            
            private global::System.Data.DataColumn columnFAVORITEACCT;
            
            private global::System.Data.DataColumn columnCURRENCYID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ACCOUNTSDataTable() {
                this.TableName = "ACCOUNTS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ACCOUNTSDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected ACCOUNTSDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ACCOUNTIDColumn {
                get {
                    return this.columnACCOUNTID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ACCOUNTNAMEColumn {
                get {
                    return this.columnACCOUNTNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ACCOUNTTYPEColumn {
                get {
                    return this.columnACCOUNTTYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ACCOUNTNUMColumn {
                get {
                    return this.columnACCOUNTNUM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn STATUSColumn {
                get {
                    return this.columnSTATUS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn NOTESColumn {
                get {
                    return this.columnNOTES;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn HELDATColumn {
                get {
                    return this.columnHELDAT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn WEBSITEColumn {
                get {
                    return this.columnWEBSITE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CONTACTINFOColumn {
                get {
                    return this.columnCONTACTINFO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ACCESSINFOColumn {
                get {
                    return this.columnACCESSINFO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn INITIALBALColumn {
                get {
                    return this.columnINITIALBAL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn FAVORITEACCTColumn {
                get {
                    return this.columnFAVORITEACCT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CURRENCYIDColumn {
                get {
                    return this.columnCURRENCYID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ACCOUNTSRow this[int index] {
                get {
                    return ((ACCOUNTSRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ACCOUNTSRowChangeEventHandler ACCOUNTSRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ACCOUNTSRowChangeEventHandler ACCOUNTSRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ACCOUNTSRowChangeEventHandler ACCOUNTSRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ACCOUNTSRowChangeEventHandler ACCOUNTSRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddACCOUNTSRow(ACCOUNTSRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ACCOUNTSRow AddACCOUNTSRow(string ACCOUNTNAME, string ACCOUNTTYPE, string ACCOUNTNUM, string STATUS, string NOTES, string HELDAT, string WEBSITE, string CONTACTINFO, string ACCESSINFO, decimal INITIALBAL, string FAVORITEACCT, long CURRENCYID) {
                ACCOUNTSRow rowACCOUNTSRow = ((ACCOUNTSRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ACCOUNTNAME,
                        ACCOUNTTYPE,
                        ACCOUNTNUM,
                        STATUS,
                        NOTES,
                        HELDAT,
                        WEBSITE,
                        CONTACTINFO,
                        ACCESSINFO,
                        INITIALBAL,
                        FAVORITEACCT,
                        CURRENCYID};
                rowACCOUNTSRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowACCOUNTSRow);
                return rowACCOUNTSRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ACCOUNTSRow FindByACCOUNTID(long ACCOUNTID) {
                return ((ACCOUNTSRow)(this.Rows.Find(new object[] {
                            ACCOUNTID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                ACCOUNTSDataTable cln = ((ACCOUNTSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ACCOUNTSDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnACCOUNTID = base.Columns["ACCOUNTID"];
                this.columnACCOUNTNAME = base.Columns["ACCOUNTNAME"];
                this.columnACCOUNTTYPE = base.Columns["ACCOUNTTYPE"];
                this.columnACCOUNTNUM = base.Columns["ACCOUNTNUM"];
                this.columnSTATUS = base.Columns["STATUS"];
                this.columnNOTES = base.Columns["NOTES"];
                this.columnHELDAT = base.Columns["HELDAT"];
                this.columnWEBSITE = base.Columns["WEBSITE"];
                this.columnCONTACTINFO = base.Columns["CONTACTINFO"];
                this.columnACCESSINFO = base.Columns["ACCESSINFO"];
                this.columnINITIALBAL = base.Columns["INITIALBAL"];
                this.columnFAVORITEACCT = base.Columns["FAVORITEACCT"];
                this.columnCURRENCYID = base.Columns["CURRENCYID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnACCOUNTID = new global::System.Data.DataColumn("ACCOUNTID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnACCOUNTID);
                this.columnACCOUNTNAME = new global::System.Data.DataColumn("ACCOUNTNAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnACCOUNTNAME);
                this.columnACCOUNTTYPE = new global::System.Data.DataColumn("ACCOUNTTYPE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnACCOUNTTYPE);
                this.columnACCOUNTNUM = new global::System.Data.DataColumn("ACCOUNTNUM", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnACCOUNTNUM);
                this.columnSTATUS = new global::System.Data.DataColumn("STATUS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTATUS);
                this.columnNOTES = new global::System.Data.DataColumn("NOTES", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNOTES);
                this.columnHELDAT = new global::System.Data.DataColumn("HELDAT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHELDAT);
                this.columnWEBSITE = new global::System.Data.DataColumn("WEBSITE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWEBSITE);
                this.columnCONTACTINFO = new global::System.Data.DataColumn("CONTACTINFO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCONTACTINFO);
                this.columnACCESSINFO = new global::System.Data.DataColumn("ACCESSINFO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnACCESSINFO);
                this.columnINITIALBAL = new global::System.Data.DataColumn("INITIALBAL", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnINITIALBAL);
                this.columnFAVORITEACCT = new global::System.Data.DataColumn("FAVORITEACCT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFAVORITEACCT);
                this.columnCURRENCYID = new global::System.Data.DataColumn("CURRENCYID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCURRENCYID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnACCOUNTNAME}, false));
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint2", new global::System.Data.DataColumn[] {
                                this.columnACCOUNTID}, true));
                this.columnACCOUNTID.AutoIncrement = true;
                this.columnACCOUNTID.AutoIncrementSeed = -1;
                this.columnACCOUNTID.AutoIncrementStep = -1;
                this.columnACCOUNTID.AllowDBNull = false;
                this.columnACCOUNTID.Unique = true;
                this.columnACCOUNTNAME.AllowDBNull = false;
                this.columnACCOUNTNAME.Unique = true;
                this.columnACCOUNTNAME.MaxLength = 2147483647;
                this.columnACCOUNTTYPE.AllowDBNull = false;
                this.columnACCOUNTTYPE.MaxLength = 2147483647;
                this.columnACCOUNTNUM.MaxLength = 2147483647;
                this.columnSTATUS.AllowDBNull = false;
                this.columnSTATUS.MaxLength = 2147483647;
                this.columnNOTES.MaxLength = 2147483647;
                this.columnHELDAT.MaxLength = 2147483647;
                this.columnWEBSITE.MaxLength = 2147483647;
                this.columnCONTACTINFO.MaxLength = 2147483647;
                this.columnACCESSINFO.MaxLength = 2147483647;
                this.columnFAVORITEACCT.AllowDBNull = false;
                this.columnFAVORITEACCT.MaxLength = 2147483647;
                this.columnCURRENCYID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ACCOUNTSRow NewACCOUNTSRow() {
                return ((ACCOUNTSRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ACCOUNTSRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(ACCOUNTSRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ACCOUNTSRowChanged != null)) {
                    this.ACCOUNTSRowChanged(this, new ACCOUNTSRowChangeEvent(((ACCOUNTSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ACCOUNTSRowChanging != null)) {
                    this.ACCOUNTSRowChanging(this, new ACCOUNTSRowChangeEvent(((ACCOUNTSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ACCOUNTSRowDeleted != null)) {
                    this.ACCOUNTSRowDeleted(this, new ACCOUNTSRowChangeEvent(((ACCOUNTSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ACCOUNTSRowDeleting != null)) {
                    this.ACCOUNTSRowDeleting(this, new ACCOUNTSRowChangeEvent(((ACCOUNTSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveACCOUNTSRow(ACCOUNTSRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                creddataDataSet ds = new creddataDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ACCOUNTSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ASSETSDataTable : global::System.Data.TypedTableBase<ASSETSRow> {
            
            private global::System.Data.DataColumn columnASSETID;
            
            private global::System.Data.DataColumn columnSTARTDATE;
            
            private global::System.Data.DataColumn columnASSETNAME;
            
            private global::System.Data.DataColumn columnVALUE;
            
            private global::System.Data.DataColumn columnVALUECHANGE;
            
            private global::System.Data.DataColumn columnNOTES;
            
            private global::System.Data.DataColumn columnVALUECHANGERATE;
            
            private global::System.Data.DataColumn columnASSETTYPE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ASSETSDataTable() {
                this.TableName = "ASSETS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ASSETSDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected ASSETSDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ASSETIDColumn {
                get {
                    return this.columnASSETID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn STARTDATEColumn {
                get {
                    return this.columnSTARTDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ASSETNAMEColumn {
                get {
                    return this.columnASSETNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn VALUEColumn {
                get {
                    return this.columnVALUE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn VALUECHANGEColumn {
                get {
                    return this.columnVALUECHANGE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn NOTESColumn {
                get {
                    return this.columnNOTES;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn VALUECHANGERATEColumn {
                get {
                    return this.columnVALUECHANGERATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ASSETTYPEColumn {
                get {
                    return this.columnASSETTYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ASSETSRow this[int index] {
                get {
                    return ((ASSETSRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ASSETSRowChangeEventHandler ASSETSRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ASSETSRowChangeEventHandler ASSETSRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ASSETSRowChangeEventHandler ASSETSRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ASSETSRowChangeEventHandler ASSETSRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddASSETSRow(ASSETSRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ASSETSRow AddASSETSRow(string STARTDATE, string ASSETNAME, decimal VALUE, string VALUECHANGE, string NOTES, decimal VALUECHANGERATE, string ASSETTYPE) {
                ASSETSRow rowASSETSRow = ((ASSETSRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        STARTDATE,
                        ASSETNAME,
                        VALUE,
                        VALUECHANGE,
                        NOTES,
                        VALUECHANGERATE,
                        ASSETTYPE};
                rowASSETSRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowASSETSRow);
                return rowASSETSRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ASSETSRow FindByASSETID(long ASSETID) {
                return ((ASSETSRow)(this.Rows.Find(new object[] {
                            ASSETID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                ASSETSDataTable cln = ((ASSETSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ASSETSDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnASSETID = base.Columns["ASSETID"];
                this.columnSTARTDATE = base.Columns["STARTDATE"];
                this.columnASSETNAME = base.Columns["ASSETNAME"];
                this.columnVALUE = base.Columns["VALUE"];
                this.columnVALUECHANGE = base.Columns["VALUECHANGE"];
                this.columnNOTES = base.Columns["NOTES"];
                this.columnVALUECHANGERATE = base.Columns["VALUECHANGERATE"];
                this.columnASSETTYPE = base.Columns["ASSETTYPE"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnASSETID = new global::System.Data.DataColumn("ASSETID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnASSETID);
                this.columnSTARTDATE = new global::System.Data.DataColumn("STARTDATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTARTDATE);
                this.columnASSETNAME = new global::System.Data.DataColumn("ASSETNAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnASSETNAME);
                this.columnVALUE = new global::System.Data.DataColumn("VALUE", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVALUE);
                this.columnVALUECHANGE = new global::System.Data.DataColumn("VALUECHANGE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVALUECHANGE);
                this.columnNOTES = new global::System.Data.DataColumn("NOTES", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNOTES);
                this.columnVALUECHANGERATE = new global::System.Data.DataColumn("VALUECHANGERATE", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVALUECHANGERATE);
                this.columnASSETTYPE = new global::System.Data.DataColumn("ASSETTYPE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnASSETTYPE);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnASSETID}, true));
                this.columnASSETID.AutoIncrement = true;
                this.columnASSETID.AutoIncrementSeed = -1;
                this.columnASSETID.AutoIncrementStep = -1;
                this.columnASSETID.AllowDBNull = false;
                this.columnASSETID.Unique = true;
                this.columnSTARTDATE.AllowDBNull = false;
                this.columnSTARTDATE.MaxLength = 2147483647;
                this.columnASSETNAME.AllowDBNull = false;
                this.columnASSETNAME.MaxLength = 2147483647;
                this.columnVALUECHANGE.MaxLength = 2147483647;
                this.columnNOTES.MaxLength = 2147483647;
                this.columnASSETTYPE.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ASSETSRow NewASSETSRow() {
                return ((ASSETSRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ASSETSRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(ASSETSRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ASSETSRowChanged != null)) {
                    this.ASSETSRowChanged(this, new ASSETSRowChangeEvent(((ASSETSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ASSETSRowChanging != null)) {
                    this.ASSETSRowChanging(this, new ASSETSRowChangeEvent(((ASSETSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ASSETSRowDeleted != null)) {
                    this.ASSETSRowDeleted(this, new ASSETSRowChangeEvent(((ASSETSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ASSETSRowDeleting != null)) {
                    this.ASSETSRowDeleting(this, new ASSETSRowChangeEvent(((ASSETSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveASSETSRow(ASSETSRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                creddataDataSet ds = new creddataDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ASSETSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BUDGET_DETAILDataTable : global::System.Data.TypedTableBase<BUDGET_DETAILRow> {
            
            private global::System.Data.DataColumn columnBUDGETENTRYID;
            
            private global::System.Data.DataColumn columnBUDGETYEARID;
            
            private global::System.Data.DataColumn columnCATEGID;
            
            private global::System.Data.DataColumn columnSUBCATEGID;
            
            private global::System.Data.DataColumn columnPERIOD;
            
            private global::System.Data.DataColumn columnAMOUNT;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public BUDGET_DETAILDataTable() {
                this.TableName = "BUDGET_DETAIL";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal BUDGET_DETAILDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected BUDGET_DETAILDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn BUDGETENTRYIDColumn {
                get {
                    return this.columnBUDGETENTRYID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn BUDGETYEARIDColumn {
                get {
                    return this.columnBUDGETYEARID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CATEGIDColumn {
                get {
                    return this.columnCATEGID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SUBCATEGIDColumn {
                get {
                    return this.columnSUBCATEGID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PERIODColumn {
                get {
                    return this.columnPERIOD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn AMOUNTColumn {
                get {
                    return this.columnAMOUNT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public BUDGET_DETAILRow this[int index] {
                get {
                    return ((BUDGET_DETAILRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event BUDGET_DETAILRowChangeEventHandler BUDGET_DETAILRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event BUDGET_DETAILRowChangeEventHandler BUDGET_DETAILRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event BUDGET_DETAILRowChangeEventHandler BUDGET_DETAILRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event BUDGET_DETAILRowChangeEventHandler BUDGET_DETAILRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddBUDGET_DETAILRow(BUDGET_DETAILRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public BUDGET_DETAILRow AddBUDGET_DETAILRow(long BUDGETENTRYID, long BUDGETYEARID, long CATEGID, long SUBCATEGID, string PERIOD, decimal AMOUNT) {
                BUDGET_DETAILRow rowBUDGET_DETAILRow = ((BUDGET_DETAILRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        BUDGETENTRYID,
                        BUDGETYEARID,
                        CATEGID,
                        SUBCATEGID,
                        PERIOD,
                        AMOUNT};
                rowBUDGET_DETAILRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowBUDGET_DETAILRow);
                return rowBUDGET_DETAILRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public BUDGET_DETAILRow FindByBUDGETENTRYID(long BUDGETENTRYID) {
                return ((BUDGET_DETAILRow)(this.Rows.Find(new object[] {
                            BUDGETENTRYID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                BUDGET_DETAILDataTable cln = ((BUDGET_DETAILDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new BUDGET_DETAILDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnBUDGETENTRYID = base.Columns["BUDGETENTRYID"];
                this.columnBUDGETYEARID = base.Columns["BUDGETYEARID"];
                this.columnCATEGID = base.Columns["CATEGID"];
                this.columnSUBCATEGID = base.Columns["SUBCATEGID"];
                this.columnPERIOD = base.Columns["PERIOD"];
                this.columnAMOUNT = base.Columns["AMOUNT"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnBUDGETENTRYID = new global::System.Data.DataColumn("BUDGETENTRYID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBUDGETENTRYID);
                this.columnBUDGETYEARID = new global::System.Data.DataColumn("BUDGETYEARID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBUDGETYEARID);
                this.columnCATEGID = new global::System.Data.DataColumn("CATEGID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCATEGID);
                this.columnSUBCATEGID = new global::System.Data.DataColumn("SUBCATEGID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSUBCATEGID);
                this.columnPERIOD = new global::System.Data.DataColumn("PERIOD", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPERIOD);
                this.columnAMOUNT = new global::System.Data.DataColumn("AMOUNT", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAMOUNT);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnBUDGETENTRYID}, true));
                this.columnBUDGETENTRYID.AllowDBNull = false;
                this.columnBUDGETENTRYID.Unique = true;
                this.columnPERIOD.AllowDBNull = false;
                this.columnPERIOD.MaxLength = 2147483647;
                this.columnAMOUNT.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public BUDGET_DETAILRow NewBUDGET_DETAILRow() {
                return ((BUDGET_DETAILRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new BUDGET_DETAILRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(BUDGET_DETAILRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BUDGET_DETAILRowChanged != null)) {
                    this.BUDGET_DETAILRowChanged(this, new BUDGET_DETAILRowChangeEvent(((BUDGET_DETAILRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BUDGET_DETAILRowChanging != null)) {
                    this.BUDGET_DETAILRowChanging(this, new BUDGET_DETAILRowChangeEvent(((BUDGET_DETAILRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BUDGET_DETAILRowDeleted != null)) {
                    this.BUDGET_DETAILRowDeleted(this, new BUDGET_DETAILRowChangeEvent(((BUDGET_DETAILRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BUDGET_DETAILRowDeleting != null)) {
                    this.BUDGET_DETAILRowDeleting(this, new BUDGET_DETAILRowChangeEvent(((BUDGET_DETAILRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveBUDGET_DETAILRow(BUDGET_DETAILRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                creddataDataSet ds = new creddataDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BUDGET_DETAILDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BUDGET_HEADERDataTable : global::System.Data.TypedTableBase<BUDGET_HEADERRow> {
            
            private global::System.Data.DataColumn columnBUDGETYEARID;
            
            private global::System.Data.DataColumn columnBUDGETYEARNAME;
            
            private global::System.Data.DataColumn columnBUDGETFREQUENCY;
            
            private global::System.Data.DataColumn columnBUDGETYEAR;
            
            private global::System.Data.DataColumn columnBUDGETMONTH;
            
            private global::System.Data.DataColumn columnARCHIVED;
            
            private global::System.Data.DataColumn columnBUDGETACCOUNT;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public BUDGET_HEADERDataTable() {
                this.TableName = "BUDGET_HEADER";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal BUDGET_HEADERDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected BUDGET_HEADERDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn BUDGETYEARIDColumn {
                get {
                    return this.columnBUDGETYEARID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn BUDGETYEARNAMEColumn {
                get {
                    return this.columnBUDGETYEARNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn BUDGETFREQUENCYColumn {
                get {
                    return this.columnBUDGETFREQUENCY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn BUDGETYEARColumn {
                get {
                    return this.columnBUDGETYEAR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn BUDGETMONTHColumn {
                get {
                    return this.columnBUDGETMONTH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ARCHIVEDColumn {
                get {
                    return this.columnARCHIVED;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn BUDGETACCOUNTColumn {
                get {
                    return this.columnBUDGETACCOUNT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public BUDGET_HEADERRow this[int index] {
                get {
                    return ((BUDGET_HEADERRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event BUDGET_HEADERRowChangeEventHandler BUDGET_HEADERRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event BUDGET_HEADERRowChangeEventHandler BUDGET_HEADERRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event BUDGET_HEADERRowChangeEventHandler BUDGET_HEADERRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event BUDGET_HEADERRowChangeEventHandler BUDGET_HEADERRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddBUDGET_HEADERRow(BUDGET_HEADERRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public BUDGET_HEADERRow AddBUDGET_HEADERRow(long BUDGETYEARID, string BUDGETYEARNAME, string BUDGETFREQUENCY, string BUDGETYEAR, string BUDGETMONTH, string ARCHIVED, string BUDGETACCOUNT) {
                BUDGET_HEADERRow rowBUDGET_HEADERRow = ((BUDGET_HEADERRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        BUDGETYEARID,
                        BUDGETYEARNAME,
                        BUDGETFREQUENCY,
                        BUDGETYEAR,
                        BUDGETMONTH,
                        ARCHIVED,
                        BUDGETACCOUNT};
                rowBUDGET_HEADERRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowBUDGET_HEADERRow);
                return rowBUDGET_HEADERRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public BUDGET_HEADERRow FindByBUDGETYEARID(long BUDGETYEARID) {
                return ((BUDGET_HEADERRow)(this.Rows.Find(new object[] {
                            BUDGETYEARID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                BUDGET_HEADERDataTable cln = ((BUDGET_HEADERDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new BUDGET_HEADERDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnBUDGETYEARID = base.Columns["BUDGETYEARID"];
                this.columnBUDGETYEARNAME = base.Columns["BUDGETYEARNAME"];
                this.columnBUDGETFREQUENCY = base.Columns["BUDGETFREQUENCY"];
                this.columnBUDGETYEAR = base.Columns["BUDGETYEAR"];
                this.columnBUDGETMONTH = base.Columns["BUDGETMONTH"];
                this.columnARCHIVED = base.Columns["ARCHIVED"];
                this.columnBUDGETACCOUNT = base.Columns["BUDGETACCOUNT"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnBUDGETYEARID = new global::System.Data.DataColumn("BUDGETYEARID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBUDGETYEARID);
                this.columnBUDGETYEARNAME = new global::System.Data.DataColumn("BUDGETYEARNAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBUDGETYEARNAME);
                this.columnBUDGETFREQUENCY = new global::System.Data.DataColumn("BUDGETFREQUENCY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBUDGETFREQUENCY);
                this.columnBUDGETYEAR = new global::System.Data.DataColumn("BUDGETYEAR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBUDGETYEAR);
                this.columnBUDGETMONTH = new global::System.Data.DataColumn("BUDGETMONTH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBUDGETMONTH);
                this.columnARCHIVED = new global::System.Data.DataColumn("ARCHIVED", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnARCHIVED);
                this.columnBUDGETACCOUNT = new global::System.Data.DataColumn("BUDGETACCOUNT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBUDGETACCOUNT);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnBUDGETYEARNAME}, false));
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint2", new global::System.Data.DataColumn[] {
                                this.columnBUDGETYEARID}, true));
                this.columnBUDGETYEARID.AllowDBNull = false;
                this.columnBUDGETYEARID.Unique = true;
                this.columnBUDGETYEARNAME.AllowDBNull = false;
                this.columnBUDGETYEARNAME.Unique = true;
                this.columnBUDGETYEARNAME.MaxLength = 2147483647;
                this.columnBUDGETFREQUENCY.MaxLength = 2147483647;
                this.columnBUDGETYEAR.MaxLength = 2147483647;
                this.columnBUDGETMONTH.MaxLength = 2147483647;
                this.columnARCHIVED.MaxLength = 2147483647;
                this.columnBUDGETACCOUNT.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public BUDGET_HEADERRow NewBUDGET_HEADERRow() {
                return ((BUDGET_HEADERRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new BUDGET_HEADERRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(BUDGET_HEADERRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BUDGET_HEADERRowChanged != null)) {
                    this.BUDGET_HEADERRowChanged(this, new BUDGET_HEADERRowChangeEvent(((BUDGET_HEADERRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BUDGET_HEADERRowChanging != null)) {
                    this.BUDGET_HEADERRowChanging(this, new BUDGET_HEADERRowChangeEvent(((BUDGET_HEADERRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BUDGET_HEADERRowDeleted != null)) {
                    this.BUDGET_HEADERRowDeleted(this, new BUDGET_HEADERRowChangeEvent(((BUDGET_HEADERRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BUDGET_HEADERRowDeleting != null)) {
                    this.BUDGET_HEADERRowDeleting(this, new BUDGET_HEADERRowChangeEvent(((BUDGET_HEADERRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveBUDGET_HEADERRow(BUDGET_HEADERRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                creddataDataSet ds = new creddataDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BUDGET_HEADERDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CATEGORIESDataTable : global::System.Data.TypedTableBase<CATEGORIESRow> {
            
            private global::System.Data.DataColumn columnCATEGID;
            
            private global::System.Data.DataColumn columnCATEGNAME;
            
            private global::System.Data.DataColumn columnCOLOUR;
            
            private global::System.Data.DataColumn columnINCLUDEBUDGET;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CATEGORIESDataTable() {
                this.TableName = "CATEGORIES";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal CATEGORIESDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected CATEGORIESDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CATEGIDColumn {
                get {
                    return this.columnCATEGID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CATEGNAMEColumn {
                get {
                    return this.columnCATEGNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn COLOURColumn {
                get {
                    return this.columnCOLOUR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn INCLUDEBUDGETColumn {
                get {
                    return this.columnINCLUDEBUDGET;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CATEGORIESRow this[int index] {
                get {
                    return ((CATEGORIESRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CATEGORIESRowChangeEventHandler CATEGORIESRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CATEGORIESRowChangeEventHandler CATEGORIESRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CATEGORIESRowChangeEventHandler CATEGORIESRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CATEGORIESRowChangeEventHandler CATEGORIESRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddCATEGORIESRow(CATEGORIESRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CATEGORIESRow AddCATEGORIESRow(string CATEGNAME, string COLOUR, string INCLUDEBUDGET) {
                CATEGORIESRow rowCATEGORIESRow = ((CATEGORIESRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        CATEGNAME,
                        COLOUR,
                        INCLUDEBUDGET};
                rowCATEGORIESRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCATEGORIESRow);
                return rowCATEGORIESRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CATEGORIESRow FindByCATEGID(long CATEGID) {
                return ((CATEGORIESRow)(this.Rows.Find(new object[] {
                            CATEGID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                CATEGORIESDataTable cln = ((CATEGORIESDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CATEGORIESDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnCATEGID = base.Columns["CATEGID"];
                this.columnCATEGNAME = base.Columns["CATEGNAME"];
                this.columnCOLOUR = base.Columns["COLOUR"];
                this.columnINCLUDEBUDGET = base.Columns["INCLUDEBUDGET"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnCATEGID = new global::System.Data.DataColumn("CATEGID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCATEGID);
                this.columnCATEGNAME = new global::System.Data.DataColumn("CATEGNAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCATEGNAME);
                this.columnCOLOUR = new global::System.Data.DataColumn("COLOUR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOLOUR);
                this.columnINCLUDEBUDGET = new global::System.Data.DataColumn("INCLUDEBUDGET", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnINCLUDEBUDGET);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCATEGNAME}, false));
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint2", new global::System.Data.DataColumn[] {
                                this.columnCATEGID}, true));
                this.columnCATEGID.AutoIncrement = true;
                this.columnCATEGID.AutoIncrementSeed = -1;
                this.columnCATEGID.AutoIncrementStep = -1;
                this.columnCATEGID.AllowDBNull = false;
                this.columnCATEGID.Unique = true;
                this.columnCATEGNAME.AllowDBNull = false;
                this.columnCATEGNAME.Unique = true;
                this.columnCATEGNAME.MaxLength = 2147483647;
                this.columnCOLOUR.MaxLength = 2147483647;
                this.columnINCLUDEBUDGET.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CATEGORIESRow NewCATEGORIESRow() {
                return ((CATEGORIESRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CATEGORIESRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(CATEGORIESRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CATEGORIESRowChanged != null)) {
                    this.CATEGORIESRowChanged(this, new CATEGORIESRowChangeEvent(((CATEGORIESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CATEGORIESRowChanging != null)) {
                    this.CATEGORIESRowChanging(this, new CATEGORIESRowChangeEvent(((CATEGORIESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CATEGORIESRowDeleted != null)) {
                    this.CATEGORIESRowDeleted(this, new CATEGORIESRowChangeEvent(((CATEGORIESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CATEGORIESRowDeleting != null)) {
                    this.CATEGORIESRowDeleting(this, new CATEGORIESRowChangeEvent(((CATEGORIESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveCATEGORIESRow(CATEGORIESRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                creddataDataSet ds = new creddataDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CATEGORIESDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GRID_SETTINGSDataTable : global::System.Data.TypedTableBase<GRID_SETTINGSRow> {
            
            private global::System.Data.DataColumn columnGRIDSETTINGSID;
            
            private global::System.Data.DataColumn columnGRIDNAME;
            
            private global::System.Data.DataColumn columnFIELDNAME;
            
            private global::System.Data.DataColumn columnCOLUMNINDEX;
            
            private global::System.Data.DataColumn columnCOLUMNWIDTH;
            
            private global::System.Data.DataColumn columnVISIBLE;
            
            private global::System.Data.DataColumn columnCAPTION;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GRID_SETTINGSDataTable() {
                this.TableName = "GRID_SETTINGS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal GRID_SETTINGSDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected GRID_SETTINGSDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn GRIDSETTINGSIDColumn {
                get {
                    return this.columnGRIDSETTINGSID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn GRIDNAMEColumn {
                get {
                    return this.columnGRIDNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn FIELDNAMEColumn {
                get {
                    return this.columnFIELDNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn COLUMNINDEXColumn {
                get {
                    return this.columnCOLUMNINDEX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn COLUMNWIDTHColumn {
                get {
                    return this.columnCOLUMNWIDTH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn VISIBLEColumn {
                get {
                    return this.columnVISIBLE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CAPTIONColumn {
                get {
                    return this.columnCAPTION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GRID_SETTINGSRow this[int index] {
                get {
                    return ((GRID_SETTINGSRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event GRID_SETTINGSRowChangeEventHandler GRID_SETTINGSRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event GRID_SETTINGSRowChangeEventHandler GRID_SETTINGSRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event GRID_SETTINGSRowChangeEventHandler GRID_SETTINGSRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event GRID_SETTINGSRowChangeEventHandler GRID_SETTINGSRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddGRID_SETTINGSRow(GRID_SETTINGSRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GRID_SETTINGSRow AddGRID_SETTINGSRow(long GRIDSETTINGSID, string GRIDNAME, string FIELDNAME, long COLUMNINDEX, long COLUMNWIDTH, string VISIBLE, string CAPTION) {
                GRID_SETTINGSRow rowGRID_SETTINGSRow = ((GRID_SETTINGSRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        GRIDSETTINGSID,
                        GRIDNAME,
                        FIELDNAME,
                        COLUMNINDEX,
                        COLUMNWIDTH,
                        VISIBLE,
                        CAPTION};
                rowGRID_SETTINGSRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGRID_SETTINGSRow);
                return rowGRID_SETTINGSRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GRID_SETTINGSRow FindByGRIDSETTINGSID(long GRIDSETTINGSID) {
                return ((GRID_SETTINGSRow)(this.Rows.Find(new object[] {
                            GRIDSETTINGSID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                GRID_SETTINGSDataTable cln = ((GRID_SETTINGSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GRID_SETTINGSDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnGRIDSETTINGSID = base.Columns["GRIDSETTINGSID"];
                this.columnGRIDNAME = base.Columns["GRIDNAME"];
                this.columnFIELDNAME = base.Columns["FIELDNAME"];
                this.columnCOLUMNINDEX = base.Columns["COLUMNINDEX"];
                this.columnCOLUMNWIDTH = base.Columns["COLUMNWIDTH"];
                this.columnVISIBLE = base.Columns["VISIBLE"];
                this.columnCAPTION = base.Columns["CAPTION"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnGRIDSETTINGSID = new global::System.Data.DataColumn("GRIDSETTINGSID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGRIDSETTINGSID);
                this.columnGRIDNAME = new global::System.Data.DataColumn("GRIDNAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGRIDNAME);
                this.columnFIELDNAME = new global::System.Data.DataColumn("FIELDNAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFIELDNAME);
                this.columnCOLUMNINDEX = new global::System.Data.DataColumn("COLUMNINDEX", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOLUMNINDEX);
                this.columnCOLUMNWIDTH = new global::System.Data.DataColumn("COLUMNWIDTH", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOLUMNWIDTH);
                this.columnVISIBLE = new global::System.Data.DataColumn("VISIBLE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVISIBLE);
                this.columnCAPTION = new global::System.Data.DataColumn("CAPTION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCAPTION);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnGRIDSETTINGSID}, true));
                this.columnGRIDSETTINGSID.AllowDBNull = false;
                this.columnGRIDSETTINGSID.Unique = true;
                this.columnGRIDNAME.MaxLength = 2147483647;
                this.columnFIELDNAME.MaxLength = 2147483647;
                this.columnVISIBLE.MaxLength = 2147483647;
                this.columnCAPTION.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GRID_SETTINGSRow NewGRID_SETTINGSRow() {
                return ((GRID_SETTINGSRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GRID_SETTINGSRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(GRID_SETTINGSRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GRID_SETTINGSRowChanged != null)) {
                    this.GRID_SETTINGSRowChanged(this, new GRID_SETTINGSRowChangeEvent(((GRID_SETTINGSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GRID_SETTINGSRowChanging != null)) {
                    this.GRID_SETTINGSRowChanging(this, new GRID_SETTINGSRowChangeEvent(((GRID_SETTINGSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GRID_SETTINGSRowDeleted != null)) {
                    this.GRID_SETTINGSRowDeleted(this, new GRID_SETTINGSRowChangeEvent(((GRID_SETTINGSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GRID_SETTINGSRowDeleting != null)) {
                    this.GRID_SETTINGSRowDeleting(this, new GRID_SETTINGSRowChangeEvent(((GRID_SETTINGSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveGRID_SETTINGSRow(GRID_SETTINGSRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                creddataDataSet ds = new creddataDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GRID_SETTINGSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PAYEE_IMPORTDataTable : global::System.Data.TypedTableBase<PAYEE_IMPORTRow> {
            
            private global::System.Data.DataColumn columnPAYEEIMPORTID;
            
            private global::System.Data.DataColumn columnMATCHTEXT;
            
            private global::System.Data.DataColumn columnPAYEEID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PAYEE_IMPORTDataTable() {
                this.TableName = "PAYEE_IMPORT";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal PAYEE_IMPORTDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected PAYEE_IMPORTDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PAYEEIMPORTIDColumn {
                get {
                    return this.columnPAYEEIMPORTID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn MATCHTEXTColumn {
                get {
                    return this.columnMATCHTEXT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PAYEEIDColumn {
                get {
                    return this.columnPAYEEID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PAYEE_IMPORTRow this[int index] {
                get {
                    return ((PAYEE_IMPORTRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event PAYEE_IMPORTRowChangeEventHandler PAYEE_IMPORTRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event PAYEE_IMPORTRowChangeEventHandler PAYEE_IMPORTRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event PAYEE_IMPORTRowChangeEventHandler PAYEE_IMPORTRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event PAYEE_IMPORTRowChangeEventHandler PAYEE_IMPORTRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddPAYEE_IMPORTRow(PAYEE_IMPORTRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PAYEE_IMPORTRow AddPAYEE_IMPORTRow(string MATCHTEXT, long PAYEEID) {
                PAYEE_IMPORTRow rowPAYEE_IMPORTRow = ((PAYEE_IMPORTRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        MATCHTEXT,
                        PAYEEID};
                rowPAYEE_IMPORTRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPAYEE_IMPORTRow);
                return rowPAYEE_IMPORTRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PAYEE_IMPORTRow FindByPAYEEIMPORTID(long PAYEEIMPORTID) {
                return ((PAYEE_IMPORTRow)(this.Rows.Find(new object[] {
                            PAYEEIMPORTID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                PAYEE_IMPORTDataTable cln = ((PAYEE_IMPORTDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PAYEE_IMPORTDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnPAYEEIMPORTID = base.Columns["PAYEEIMPORTID"];
                this.columnMATCHTEXT = base.Columns["MATCHTEXT"];
                this.columnPAYEEID = base.Columns["PAYEEID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnPAYEEIMPORTID = new global::System.Data.DataColumn("PAYEEIMPORTID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPAYEEIMPORTID);
                this.columnMATCHTEXT = new global::System.Data.DataColumn("MATCHTEXT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMATCHTEXT);
                this.columnPAYEEID = new global::System.Data.DataColumn("PAYEEID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPAYEEID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnPAYEEIMPORTID}, true));
                this.columnPAYEEIMPORTID.AutoIncrement = true;
                this.columnPAYEEIMPORTID.AutoIncrementSeed = -1;
                this.columnPAYEEIMPORTID.AutoIncrementStep = -1;
                this.columnPAYEEIMPORTID.AllowDBNull = false;
                this.columnPAYEEIMPORTID.Unique = true;
                this.columnMATCHTEXT.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PAYEE_IMPORTRow NewPAYEE_IMPORTRow() {
                return ((PAYEE_IMPORTRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PAYEE_IMPORTRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(PAYEE_IMPORTRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PAYEE_IMPORTRowChanged != null)) {
                    this.PAYEE_IMPORTRowChanged(this, new PAYEE_IMPORTRowChangeEvent(((PAYEE_IMPORTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PAYEE_IMPORTRowChanging != null)) {
                    this.PAYEE_IMPORTRowChanging(this, new PAYEE_IMPORTRowChangeEvent(((PAYEE_IMPORTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PAYEE_IMPORTRowDeleted != null)) {
                    this.PAYEE_IMPORTRowDeleted(this, new PAYEE_IMPORTRowChangeEvent(((PAYEE_IMPORTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PAYEE_IMPORTRowDeleting != null)) {
                    this.PAYEE_IMPORTRowDeleting(this, new PAYEE_IMPORTRowChangeEvent(((PAYEE_IMPORTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemovePAYEE_IMPORTRow(PAYEE_IMPORTRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                creddataDataSet ds = new creddataDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PAYEE_IMPORTDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PAYEESDataTable : global::System.Data.TypedTableBase<PAYEESRow> {
            
            private global::System.Data.DataColumn columnPAYEEID;
            
            private global::System.Data.DataColumn columnPAYEENAME;
            
            private global::System.Data.DataColumn columnCATEGID;
            
            private global::System.Data.DataColumn columnSUBCATEGID;
            
            private global::System.Data.DataColumn columnCOLOUR;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PAYEESDataTable() {
                this.TableName = "PAYEES";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal PAYEESDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected PAYEESDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PAYEEIDColumn {
                get {
                    return this.columnPAYEEID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PAYEENAMEColumn {
                get {
                    return this.columnPAYEENAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CATEGIDColumn {
                get {
                    return this.columnCATEGID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SUBCATEGIDColumn {
                get {
                    return this.columnSUBCATEGID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn COLOURColumn {
                get {
                    return this.columnCOLOUR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PAYEESRow this[int index] {
                get {
                    return ((PAYEESRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event PAYEESRowChangeEventHandler PAYEESRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event PAYEESRowChangeEventHandler PAYEESRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event PAYEESRowChangeEventHandler PAYEESRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event PAYEESRowChangeEventHandler PAYEESRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddPAYEESRow(PAYEESRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PAYEESRow AddPAYEESRow(string PAYEENAME, long CATEGID, long SUBCATEGID, string COLOUR) {
                PAYEESRow rowPAYEESRow = ((PAYEESRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        PAYEENAME,
                        CATEGID,
                        SUBCATEGID,
                        COLOUR};
                rowPAYEESRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPAYEESRow);
                return rowPAYEESRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PAYEESRow FindByPAYEEID(long PAYEEID) {
                return ((PAYEESRow)(this.Rows.Find(new object[] {
                            PAYEEID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                PAYEESDataTable cln = ((PAYEESDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PAYEESDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnPAYEEID = base.Columns["PAYEEID"];
                this.columnPAYEENAME = base.Columns["PAYEENAME"];
                this.columnCATEGID = base.Columns["CATEGID"];
                this.columnSUBCATEGID = base.Columns["SUBCATEGID"];
                this.columnCOLOUR = base.Columns["COLOUR"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnPAYEEID = new global::System.Data.DataColumn("PAYEEID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPAYEEID);
                this.columnPAYEENAME = new global::System.Data.DataColumn("PAYEENAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPAYEENAME);
                this.columnCATEGID = new global::System.Data.DataColumn("CATEGID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCATEGID);
                this.columnSUBCATEGID = new global::System.Data.DataColumn("SUBCATEGID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSUBCATEGID);
                this.columnCOLOUR = new global::System.Data.DataColumn("COLOUR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOLOUR);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnPAYEENAME}, false));
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint2", new global::System.Data.DataColumn[] {
                                this.columnPAYEEID}, true));
                this.columnPAYEEID.AutoIncrement = true;
                this.columnPAYEEID.AutoIncrementSeed = -1;
                this.columnPAYEEID.AutoIncrementStep = -1;
                this.columnPAYEEID.AllowDBNull = false;
                this.columnPAYEEID.Unique = true;
                this.columnPAYEENAME.AllowDBNull = false;
                this.columnPAYEENAME.Unique = true;
                this.columnPAYEENAME.MaxLength = 2147483647;
                this.columnCOLOUR.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PAYEESRow NewPAYEESRow() {
                return ((PAYEESRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PAYEESRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(PAYEESRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PAYEESRowChanged != null)) {
                    this.PAYEESRowChanged(this, new PAYEESRowChangeEvent(((PAYEESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PAYEESRowChanging != null)) {
                    this.PAYEESRowChanging(this, new PAYEESRowChangeEvent(((PAYEESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PAYEESRowDeleted != null)) {
                    this.PAYEESRowDeleted(this, new PAYEESRowChangeEvent(((PAYEESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PAYEESRowDeleting != null)) {
                    this.PAYEESRowDeleting(this, new PAYEESRowChangeEvent(((PAYEESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemovePAYEESRow(PAYEESRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                creddataDataSet ds = new creddataDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PAYEESDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class REP_FILTERSDataTable : global::System.Data.TypedTableBase<REP_FILTERSRow> {
            
            private global::System.Data.DataColumn columnREPFILTERID;
            
            private global::System.Data.DataColumn columnREPFILTERNAME;
            
            private global::System.Data.DataColumn columnFROMDATE;
            
            private global::System.Data.DataColumn columnTODATE;
            
            private global::System.Data.DataColumn columnTRANSCODE;
            
            private global::System.Data.DataColumn columnFROMAMOUNT;
            
            private global::System.Data.DataColumn columnTOAMOUNT;
            
            private global::System.Data.DataColumn columnPAYEENAME;
            
            private global::System.Data.DataColumn columnCATEGID;
            
            private global::System.Data.DataColumn columnSUBCATEGID;
            
            private global::System.Data.DataColumn columnARCHIVED;
            
            private global::System.Data.DataColumn columnDATEFILTER;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public REP_FILTERSDataTable() {
                this.TableName = "REP_FILTERS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal REP_FILTERSDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected REP_FILTERSDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn REPFILTERIDColumn {
                get {
                    return this.columnREPFILTERID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn REPFILTERNAMEColumn {
                get {
                    return this.columnREPFILTERNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn FROMDATEColumn {
                get {
                    return this.columnFROMDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TODATEColumn {
                get {
                    return this.columnTODATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TRANSCODEColumn {
                get {
                    return this.columnTRANSCODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn FROMAMOUNTColumn {
                get {
                    return this.columnFROMAMOUNT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TOAMOUNTColumn {
                get {
                    return this.columnTOAMOUNT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PAYEENAMEColumn {
                get {
                    return this.columnPAYEENAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CATEGIDColumn {
                get {
                    return this.columnCATEGID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SUBCATEGIDColumn {
                get {
                    return this.columnSUBCATEGID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ARCHIVEDColumn {
                get {
                    return this.columnARCHIVED;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DATEFILTERColumn {
                get {
                    return this.columnDATEFILTER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public REP_FILTERSRow this[int index] {
                get {
                    return ((REP_FILTERSRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event REP_FILTERSRowChangeEventHandler REP_FILTERSRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event REP_FILTERSRowChangeEventHandler REP_FILTERSRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event REP_FILTERSRowChangeEventHandler REP_FILTERSRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event REP_FILTERSRowChangeEventHandler REP_FILTERSRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddREP_FILTERSRow(REP_FILTERSRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public REP_FILTERSRow AddREP_FILTERSRow(string REPFILTERNAME, string FROMDATE, string TODATE, string TRANSCODE, decimal FROMAMOUNT, decimal TOAMOUNT, string PAYEENAME, decimal CATEGID, decimal SUBCATEGID, string ARCHIVED, decimal DATEFILTER) {
                REP_FILTERSRow rowREP_FILTERSRow = ((REP_FILTERSRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        REPFILTERNAME,
                        FROMDATE,
                        TODATE,
                        TRANSCODE,
                        FROMAMOUNT,
                        TOAMOUNT,
                        PAYEENAME,
                        CATEGID,
                        SUBCATEGID,
                        ARCHIVED,
                        DATEFILTER};
                rowREP_FILTERSRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowREP_FILTERSRow);
                return rowREP_FILTERSRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public REP_FILTERSRow FindByREPFILTERID(long REPFILTERID) {
                return ((REP_FILTERSRow)(this.Rows.Find(new object[] {
                            REPFILTERID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                REP_FILTERSDataTable cln = ((REP_FILTERSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new REP_FILTERSDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnREPFILTERID = base.Columns["REPFILTERID"];
                this.columnREPFILTERNAME = base.Columns["REPFILTERNAME"];
                this.columnFROMDATE = base.Columns["FROMDATE"];
                this.columnTODATE = base.Columns["TODATE"];
                this.columnTRANSCODE = base.Columns["TRANSCODE"];
                this.columnFROMAMOUNT = base.Columns["FROMAMOUNT"];
                this.columnTOAMOUNT = base.Columns["TOAMOUNT"];
                this.columnPAYEENAME = base.Columns["PAYEENAME"];
                this.columnCATEGID = base.Columns["CATEGID"];
                this.columnSUBCATEGID = base.Columns["SUBCATEGID"];
                this.columnARCHIVED = base.Columns["ARCHIVED"];
                this.columnDATEFILTER = base.Columns["DATEFILTER"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnREPFILTERID = new global::System.Data.DataColumn("REPFILTERID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnREPFILTERID);
                this.columnREPFILTERNAME = new global::System.Data.DataColumn("REPFILTERNAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnREPFILTERNAME);
                this.columnFROMDATE = new global::System.Data.DataColumn("FROMDATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFROMDATE);
                this.columnTODATE = new global::System.Data.DataColumn("TODATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTODATE);
                this.columnTRANSCODE = new global::System.Data.DataColumn("TRANSCODE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTRANSCODE);
                this.columnFROMAMOUNT = new global::System.Data.DataColumn("FROMAMOUNT", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFROMAMOUNT);
                this.columnTOAMOUNT = new global::System.Data.DataColumn("TOAMOUNT", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTOAMOUNT);
                this.columnPAYEENAME = new global::System.Data.DataColumn("PAYEENAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPAYEENAME);
                this.columnCATEGID = new global::System.Data.DataColumn("CATEGID", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCATEGID);
                this.columnSUBCATEGID = new global::System.Data.DataColumn("SUBCATEGID", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSUBCATEGID);
                this.columnARCHIVED = new global::System.Data.DataColumn("ARCHIVED", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnARCHIVED);
                this.columnDATEFILTER = new global::System.Data.DataColumn("DATEFILTER", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDATEFILTER);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnREPFILTERID}, true));
                this.columnREPFILTERID.AutoIncrement = true;
                this.columnREPFILTERID.AutoIncrementSeed = -1;
                this.columnREPFILTERID.AutoIncrementStep = -1;
                this.columnREPFILTERID.AllowDBNull = false;
                this.columnREPFILTERID.Unique = true;
                this.columnREPFILTERNAME.AllowDBNull = false;
                this.columnREPFILTERNAME.MaxLength = 2147483647;
                this.columnFROMDATE.MaxLength = 2147483647;
                this.columnTODATE.MaxLength = 2147483647;
                this.columnTRANSCODE.MaxLength = 2147483647;
                this.columnPAYEENAME.MaxLength = 2147483647;
                this.columnARCHIVED.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public REP_FILTERSRow NewREP_FILTERSRow() {
                return ((REP_FILTERSRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new REP_FILTERSRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(REP_FILTERSRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.REP_FILTERSRowChanged != null)) {
                    this.REP_FILTERSRowChanged(this, new REP_FILTERSRowChangeEvent(((REP_FILTERSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.REP_FILTERSRowChanging != null)) {
                    this.REP_FILTERSRowChanging(this, new REP_FILTERSRowChangeEvent(((REP_FILTERSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.REP_FILTERSRowDeleted != null)) {
                    this.REP_FILTERSRowDeleted(this, new REP_FILTERSRowChangeEvent(((REP_FILTERSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.REP_FILTERSRowDeleting != null)) {
                    this.REP_FILTERSRowDeleting(this, new REP_FILTERSRowChangeEvent(((REP_FILTERSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveREP_FILTERSRow(REP_FILTERSRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                creddataDataSet ds = new creddataDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "REP_FILTERSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class REPEAT_SPLIT_TRANSACTIONSDataTable : global::System.Data.TypedTableBase<REPEAT_SPLIT_TRANSACTIONSRow> {
            
            private global::System.Data.DataColumn columnSPLITTRANSID;
            
            private global::System.Data.DataColumn columnTRANSID;
            
            private global::System.Data.DataColumn columnCATEGID;
            
            private global::System.Data.DataColumn columnSUBCATEGID;
            
            private global::System.Data.DataColumn columnSPLITTRANSAMOUNT;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public REPEAT_SPLIT_TRANSACTIONSDataTable() {
                this.TableName = "REPEAT_SPLIT_TRANSACTIONS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal REPEAT_SPLIT_TRANSACTIONSDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected REPEAT_SPLIT_TRANSACTIONSDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SPLITTRANSIDColumn {
                get {
                    return this.columnSPLITTRANSID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TRANSIDColumn {
                get {
                    return this.columnTRANSID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CATEGIDColumn {
                get {
                    return this.columnCATEGID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SUBCATEGIDColumn {
                get {
                    return this.columnSUBCATEGID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SPLITTRANSAMOUNTColumn {
                get {
                    return this.columnSPLITTRANSAMOUNT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public REPEAT_SPLIT_TRANSACTIONSRow this[int index] {
                get {
                    return ((REPEAT_SPLIT_TRANSACTIONSRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event REPEAT_SPLIT_TRANSACTIONSRowChangeEventHandler REPEAT_SPLIT_TRANSACTIONSRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event REPEAT_SPLIT_TRANSACTIONSRowChangeEventHandler REPEAT_SPLIT_TRANSACTIONSRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event REPEAT_SPLIT_TRANSACTIONSRowChangeEventHandler REPEAT_SPLIT_TRANSACTIONSRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event REPEAT_SPLIT_TRANSACTIONSRowChangeEventHandler REPEAT_SPLIT_TRANSACTIONSRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddREPEAT_SPLIT_TRANSACTIONSRow(REPEAT_SPLIT_TRANSACTIONSRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public REPEAT_SPLIT_TRANSACTIONSRow AddREPEAT_SPLIT_TRANSACTIONSRow(long SPLITTRANSID, long TRANSID, long CATEGID, long SUBCATEGID, decimal SPLITTRANSAMOUNT) {
                REPEAT_SPLIT_TRANSACTIONSRow rowREPEAT_SPLIT_TRANSACTIONSRow = ((REPEAT_SPLIT_TRANSACTIONSRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SPLITTRANSID,
                        TRANSID,
                        CATEGID,
                        SUBCATEGID,
                        SPLITTRANSAMOUNT};
                rowREPEAT_SPLIT_TRANSACTIONSRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowREPEAT_SPLIT_TRANSACTIONSRow);
                return rowREPEAT_SPLIT_TRANSACTIONSRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public REPEAT_SPLIT_TRANSACTIONSRow FindBySPLITTRANSID(long SPLITTRANSID) {
                return ((REPEAT_SPLIT_TRANSACTIONSRow)(this.Rows.Find(new object[] {
                            SPLITTRANSID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                REPEAT_SPLIT_TRANSACTIONSDataTable cln = ((REPEAT_SPLIT_TRANSACTIONSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new REPEAT_SPLIT_TRANSACTIONSDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnSPLITTRANSID = base.Columns["SPLITTRANSID"];
                this.columnTRANSID = base.Columns["TRANSID"];
                this.columnCATEGID = base.Columns["CATEGID"];
                this.columnSUBCATEGID = base.Columns["SUBCATEGID"];
                this.columnSPLITTRANSAMOUNT = base.Columns["SPLITTRANSAMOUNT"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnSPLITTRANSID = new global::System.Data.DataColumn("SPLITTRANSID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSPLITTRANSID);
                this.columnTRANSID = new global::System.Data.DataColumn("TRANSID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTRANSID);
                this.columnCATEGID = new global::System.Data.DataColumn("CATEGID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCATEGID);
                this.columnSUBCATEGID = new global::System.Data.DataColumn("SUBCATEGID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSUBCATEGID);
                this.columnSPLITTRANSAMOUNT = new global::System.Data.DataColumn("SPLITTRANSAMOUNT", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSPLITTRANSAMOUNT);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnSPLITTRANSID}, true));
                this.columnSPLITTRANSID.AllowDBNull = false;
                this.columnSPLITTRANSID.Unique = true;
                this.columnTRANSID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public REPEAT_SPLIT_TRANSACTIONSRow NewREPEAT_SPLIT_TRANSACTIONSRow() {
                return ((REPEAT_SPLIT_TRANSACTIONSRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new REPEAT_SPLIT_TRANSACTIONSRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(REPEAT_SPLIT_TRANSACTIONSRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.REPEAT_SPLIT_TRANSACTIONSRowChanged != null)) {
                    this.REPEAT_SPLIT_TRANSACTIONSRowChanged(this, new REPEAT_SPLIT_TRANSACTIONSRowChangeEvent(((REPEAT_SPLIT_TRANSACTIONSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.REPEAT_SPLIT_TRANSACTIONSRowChanging != null)) {
                    this.REPEAT_SPLIT_TRANSACTIONSRowChanging(this, new REPEAT_SPLIT_TRANSACTIONSRowChangeEvent(((REPEAT_SPLIT_TRANSACTIONSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.REPEAT_SPLIT_TRANSACTIONSRowDeleted != null)) {
                    this.REPEAT_SPLIT_TRANSACTIONSRowDeleted(this, new REPEAT_SPLIT_TRANSACTIONSRowChangeEvent(((REPEAT_SPLIT_TRANSACTIONSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.REPEAT_SPLIT_TRANSACTIONSRowDeleting != null)) {
                    this.REPEAT_SPLIT_TRANSACTIONSRowDeleting(this, new REPEAT_SPLIT_TRANSACTIONSRowChangeEvent(((REPEAT_SPLIT_TRANSACTIONSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveREPEAT_SPLIT_TRANSACTIONSRow(REPEAT_SPLIT_TRANSACTIONSRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                creddataDataSet ds = new creddataDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "REPEAT_SPLIT_TRANSACTIONSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class REPEAT_TRANSACTIONSDataTable : global::System.Data.TypedTableBase<REPEAT_TRANSACTIONSRow> {
            
            private global::System.Data.DataColumn columnREPTRANSID;
            
            private global::System.Data.DataColumn columnACCOUNTID;
            
            private global::System.Data.DataColumn columnTOACCOUNTID;
            
            private global::System.Data.DataColumn columnPAYEEID;
            
            private global::System.Data.DataColumn columnTRANSCODE;
            
            private global::System.Data.DataColumn columnTRANSAMOUNT;
            
            private global::System.Data.DataColumn columnSTATUS;
            
            private global::System.Data.DataColumn columnTRANSACTIONNUMBER;
            
            private global::System.Data.DataColumn columnNOTES;
            
            private global::System.Data.DataColumn columnCATEGID;
            
            private global::System.Data.DataColumn columnSUBCATEGID;
            
            private global::System.Data.DataColumn columnTRANSDATE;
            
            private global::System.Data.DataColumn columnFOLLOWUPID;
            
            private global::System.Data.DataColumn columnTOTRANSAMOUNT;
            
            private global::System.Data.DataColumn columnREPEATS;
            
            private global::System.Data.DataColumn columnNEXTOCCURRENCEDATE;
            
            private global::System.Data.DataColumn columnNUMOCCURRENCES;
            
            private global::System.Data.DataColumn columnAUTORUN;
            
            private global::System.Data.DataColumn columnAUTORUNUSER;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public REPEAT_TRANSACTIONSDataTable() {
                this.TableName = "REPEAT_TRANSACTIONS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal REPEAT_TRANSACTIONSDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected REPEAT_TRANSACTIONSDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn REPTRANSIDColumn {
                get {
                    return this.columnREPTRANSID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ACCOUNTIDColumn {
                get {
                    return this.columnACCOUNTID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TOACCOUNTIDColumn {
                get {
                    return this.columnTOACCOUNTID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PAYEEIDColumn {
                get {
                    return this.columnPAYEEID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TRANSCODEColumn {
                get {
                    return this.columnTRANSCODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TRANSAMOUNTColumn {
                get {
                    return this.columnTRANSAMOUNT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn STATUSColumn {
                get {
                    return this.columnSTATUS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TRANSACTIONNUMBERColumn {
                get {
                    return this.columnTRANSACTIONNUMBER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn NOTESColumn {
                get {
                    return this.columnNOTES;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CATEGIDColumn {
                get {
                    return this.columnCATEGID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SUBCATEGIDColumn {
                get {
                    return this.columnSUBCATEGID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TRANSDATEColumn {
                get {
                    return this.columnTRANSDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn FOLLOWUPIDColumn {
                get {
                    return this.columnFOLLOWUPID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TOTRANSAMOUNTColumn {
                get {
                    return this.columnTOTRANSAMOUNT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn REPEATSColumn {
                get {
                    return this.columnREPEATS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn NEXTOCCURRENCEDATEColumn {
                get {
                    return this.columnNEXTOCCURRENCEDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn NUMOCCURRENCESColumn {
                get {
                    return this.columnNUMOCCURRENCES;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn AUTORUNColumn {
                get {
                    return this.columnAUTORUN;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn AUTORUNUSERColumn {
                get {
                    return this.columnAUTORUNUSER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public REPEAT_TRANSACTIONSRow this[int index] {
                get {
                    return ((REPEAT_TRANSACTIONSRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event REPEAT_TRANSACTIONSRowChangeEventHandler REPEAT_TRANSACTIONSRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event REPEAT_TRANSACTIONSRowChangeEventHandler REPEAT_TRANSACTIONSRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event REPEAT_TRANSACTIONSRowChangeEventHandler REPEAT_TRANSACTIONSRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event REPEAT_TRANSACTIONSRowChangeEventHandler REPEAT_TRANSACTIONSRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddREPEAT_TRANSACTIONSRow(REPEAT_TRANSACTIONSRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public REPEAT_TRANSACTIONSRow AddREPEAT_TRANSACTIONSRow(
                        long REPTRANSID, 
                        long ACCOUNTID, 
                        long TOACCOUNTID, 
                        long PAYEEID, 
                        string TRANSCODE, 
                        decimal TRANSAMOUNT, 
                        string STATUS, 
                        string TRANSACTIONNUMBER, 
                        string NOTES, 
                        long CATEGID, 
                        long SUBCATEGID, 
                        string TRANSDATE, 
                        long FOLLOWUPID, 
                        decimal TOTRANSAMOUNT, 
                        long REPEATS, 
                        string NEXTOCCURRENCEDATE, 
                        long NUMOCCURRENCES, 
                        string AUTORUN, 
                        string AUTORUNUSER) {
                REPEAT_TRANSACTIONSRow rowREPEAT_TRANSACTIONSRow = ((REPEAT_TRANSACTIONSRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        REPTRANSID,
                        ACCOUNTID,
                        TOACCOUNTID,
                        PAYEEID,
                        TRANSCODE,
                        TRANSAMOUNT,
                        STATUS,
                        TRANSACTIONNUMBER,
                        NOTES,
                        CATEGID,
                        SUBCATEGID,
                        TRANSDATE,
                        FOLLOWUPID,
                        TOTRANSAMOUNT,
                        REPEATS,
                        NEXTOCCURRENCEDATE,
                        NUMOCCURRENCES,
                        AUTORUN,
                        AUTORUNUSER};
                rowREPEAT_TRANSACTIONSRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowREPEAT_TRANSACTIONSRow);
                return rowREPEAT_TRANSACTIONSRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public REPEAT_TRANSACTIONSRow FindByREPTRANSID(long REPTRANSID) {
                return ((REPEAT_TRANSACTIONSRow)(this.Rows.Find(new object[] {
                            REPTRANSID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                REPEAT_TRANSACTIONSDataTable cln = ((REPEAT_TRANSACTIONSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new REPEAT_TRANSACTIONSDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnREPTRANSID = base.Columns["REPTRANSID"];
                this.columnACCOUNTID = base.Columns["ACCOUNTID"];
                this.columnTOACCOUNTID = base.Columns["TOACCOUNTID"];
                this.columnPAYEEID = base.Columns["PAYEEID"];
                this.columnTRANSCODE = base.Columns["TRANSCODE"];
                this.columnTRANSAMOUNT = base.Columns["TRANSAMOUNT"];
                this.columnSTATUS = base.Columns["STATUS"];
                this.columnTRANSACTIONNUMBER = base.Columns["TRANSACTIONNUMBER"];
                this.columnNOTES = base.Columns["NOTES"];
                this.columnCATEGID = base.Columns["CATEGID"];
                this.columnSUBCATEGID = base.Columns["SUBCATEGID"];
                this.columnTRANSDATE = base.Columns["TRANSDATE"];
                this.columnFOLLOWUPID = base.Columns["FOLLOWUPID"];
                this.columnTOTRANSAMOUNT = base.Columns["TOTRANSAMOUNT"];
                this.columnREPEATS = base.Columns["REPEATS"];
                this.columnNEXTOCCURRENCEDATE = base.Columns["NEXTOCCURRENCEDATE"];
                this.columnNUMOCCURRENCES = base.Columns["NUMOCCURRENCES"];
                this.columnAUTORUN = base.Columns["AUTORUN"];
                this.columnAUTORUNUSER = base.Columns["AUTORUNUSER"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnREPTRANSID = new global::System.Data.DataColumn("REPTRANSID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnREPTRANSID);
                this.columnACCOUNTID = new global::System.Data.DataColumn("ACCOUNTID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnACCOUNTID);
                this.columnTOACCOUNTID = new global::System.Data.DataColumn("TOACCOUNTID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTOACCOUNTID);
                this.columnPAYEEID = new global::System.Data.DataColumn("PAYEEID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPAYEEID);
                this.columnTRANSCODE = new global::System.Data.DataColumn("TRANSCODE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTRANSCODE);
                this.columnTRANSAMOUNT = new global::System.Data.DataColumn("TRANSAMOUNT", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTRANSAMOUNT);
                this.columnSTATUS = new global::System.Data.DataColumn("STATUS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTATUS);
                this.columnTRANSACTIONNUMBER = new global::System.Data.DataColumn("TRANSACTIONNUMBER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTRANSACTIONNUMBER);
                this.columnNOTES = new global::System.Data.DataColumn("NOTES", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNOTES);
                this.columnCATEGID = new global::System.Data.DataColumn("CATEGID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCATEGID);
                this.columnSUBCATEGID = new global::System.Data.DataColumn("SUBCATEGID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSUBCATEGID);
                this.columnTRANSDATE = new global::System.Data.DataColumn("TRANSDATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTRANSDATE);
                this.columnFOLLOWUPID = new global::System.Data.DataColumn("FOLLOWUPID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFOLLOWUPID);
                this.columnTOTRANSAMOUNT = new global::System.Data.DataColumn("TOTRANSAMOUNT", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTOTRANSAMOUNT);
                this.columnREPEATS = new global::System.Data.DataColumn("REPEATS", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnREPEATS);
                this.columnNEXTOCCURRENCEDATE = new global::System.Data.DataColumn("NEXTOCCURRENCEDATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNEXTOCCURRENCEDATE);
                this.columnNUMOCCURRENCES = new global::System.Data.DataColumn("NUMOCCURRENCES", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNUMOCCURRENCES);
                this.columnAUTORUN = new global::System.Data.DataColumn("AUTORUN", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAUTORUN);
                this.columnAUTORUNUSER = new global::System.Data.DataColumn("AUTORUNUSER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAUTORUNUSER);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnREPTRANSID}, true));
                this.columnREPTRANSID.AllowDBNull = false;
                this.columnREPTRANSID.Unique = true;
                this.columnACCOUNTID.AllowDBNull = false;
                this.columnPAYEEID.AllowDBNull = false;
                this.columnTRANSCODE.AllowDBNull = false;
                this.columnTRANSCODE.MaxLength = 2147483647;
                this.columnTRANSAMOUNT.AllowDBNull = false;
                this.columnSTATUS.MaxLength = 2147483647;
                this.columnTRANSACTIONNUMBER.MaxLength = 2147483647;
                this.columnNOTES.MaxLength = 2147483647;
                this.columnTRANSDATE.MaxLength = 2147483647;
                this.columnNEXTOCCURRENCEDATE.MaxLength = 2147483647;
                this.columnAUTORUN.MaxLength = 2147483647;
                this.columnAUTORUNUSER.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public REPEAT_TRANSACTIONSRow NewREPEAT_TRANSACTIONSRow() {
                return ((REPEAT_TRANSACTIONSRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new REPEAT_TRANSACTIONSRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(REPEAT_TRANSACTIONSRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.REPEAT_TRANSACTIONSRowChanged != null)) {
                    this.REPEAT_TRANSACTIONSRowChanged(this, new REPEAT_TRANSACTIONSRowChangeEvent(((REPEAT_TRANSACTIONSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.REPEAT_TRANSACTIONSRowChanging != null)) {
                    this.REPEAT_TRANSACTIONSRowChanging(this, new REPEAT_TRANSACTIONSRowChangeEvent(((REPEAT_TRANSACTIONSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.REPEAT_TRANSACTIONSRowDeleted != null)) {
                    this.REPEAT_TRANSACTIONSRowDeleted(this, new REPEAT_TRANSACTIONSRowChangeEvent(((REPEAT_TRANSACTIONSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.REPEAT_TRANSACTIONSRowDeleting != null)) {
                    this.REPEAT_TRANSACTIONSRowDeleting(this, new REPEAT_TRANSACTIONSRowChangeEvent(((REPEAT_TRANSACTIONSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveREPEAT_TRANSACTIONSRow(REPEAT_TRANSACTIONSRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                creddataDataSet ds = new creddataDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "REPEAT_TRANSACTIONSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SPLIT_TRANSACTIONSDataTable : global::System.Data.TypedTableBase<SPLIT_TRANSACTIONSRow> {
            
            private global::System.Data.DataColumn columnSPLITTRANSID;
            
            private global::System.Data.DataColumn columnTRANSID;
            
            private global::System.Data.DataColumn columnCATEGID;
            
            private global::System.Data.DataColumn columnSUBCATEGID;
            
            private global::System.Data.DataColumn columnSPLITTRANSAMOUNT;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public SPLIT_TRANSACTIONSDataTable() {
                this.TableName = "SPLIT_TRANSACTIONS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal SPLIT_TRANSACTIONSDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected SPLIT_TRANSACTIONSDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SPLITTRANSIDColumn {
                get {
                    return this.columnSPLITTRANSID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TRANSIDColumn {
                get {
                    return this.columnTRANSID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CATEGIDColumn {
                get {
                    return this.columnCATEGID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SUBCATEGIDColumn {
                get {
                    return this.columnSUBCATEGID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SPLITTRANSAMOUNTColumn {
                get {
                    return this.columnSPLITTRANSAMOUNT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public SPLIT_TRANSACTIONSRow this[int index] {
                get {
                    return ((SPLIT_TRANSACTIONSRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event SPLIT_TRANSACTIONSRowChangeEventHandler SPLIT_TRANSACTIONSRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event SPLIT_TRANSACTIONSRowChangeEventHandler SPLIT_TRANSACTIONSRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event SPLIT_TRANSACTIONSRowChangeEventHandler SPLIT_TRANSACTIONSRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event SPLIT_TRANSACTIONSRowChangeEventHandler SPLIT_TRANSACTIONSRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddSPLIT_TRANSACTIONSRow(SPLIT_TRANSACTIONSRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public SPLIT_TRANSACTIONSRow AddSPLIT_TRANSACTIONSRow(long SPLITTRANSID, long TRANSID, long CATEGID, long SUBCATEGID, decimal SPLITTRANSAMOUNT) {
                SPLIT_TRANSACTIONSRow rowSPLIT_TRANSACTIONSRow = ((SPLIT_TRANSACTIONSRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SPLITTRANSID,
                        TRANSID,
                        CATEGID,
                        SUBCATEGID,
                        SPLITTRANSAMOUNT};
                rowSPLIT_TRANSACTIONSRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSPLIT_TRANSACTIONSRow);
                return rowSPLIT_TRANSACTIONSRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public SPLIT_TRANSACTIONSRow FindBySPLITTRANSID(long SPLITTRANSID) {
                return ((SPLIT_TRANSACTIONSRow)(this.Rows.Find(new object[] {
                            SPLITTRANSID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                SPLIT_TRANSACTIONSDataTable cln = ((SPLIT_TRANSACTIONSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SPLIT_TRANSACTIONSDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnSPLITTRANSID = base.Columns["SPLITTRANSID"];
                this.columnTRANSID = base.Columns["TRANSID"];
                this.columnCATEGID = base.Columns["CATEGID"];
                this.columnSUBCATEGID = base.Columns["SUBCATEGID"];
                this.columnSPLITTRANSAMOUNT = base.Columns["SPLITTRANSAMOUNT"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnSPLITTRANSID = new global::System.Data.DataColumn("SPLITTRANSID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSPLITTRANSID);
                this.columnTRANSID = new global::System.Data.DataColumn("TRANSID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTRANSID);
                this.columnCATEGID = new global::System.Data.DataColumn("CATEGID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCATEGID);
                this.columnSUBCATEGID = new global::System.Data.DataColumn("SUBCATEGID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSUBCATEGID);
                this.columnSPLITTRANSAMOUNT = new global::System.Data.DataColumn("SPLITTRANSAMOUNT", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSPLITTRANSAMOUNT);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnSPLITTRANSID}, true));
                this.columnSPLITTRANSID.AllowDBNull = false;
                this.columnSPLITTRANSID.Unique = true;
                this.columnTRANSID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public SPLIT_TRANSACTIONSRow NewSPLIT_TRANSACTIONSRow() {
                return ((SPLIT_TRANSACTIONSRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SPLIT_TRANSACTIONSRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(SPLIT_TRANSACTIONSRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SPLIT_TRANSACTIONSRowChanged != null)) {
                    this.SPLIT_TRANSACTIONSRowChanged(this, new SPLIT_TRANSACTIONSRowChangeEvent(((SPLIT_TRANSACTIONSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SPLIT_TRANSACTIONSRowChanging != null)) {
                    this.SPLIT_TRANSACTIONSRowChanging(this, new SPLIT_TRANSACTIONSRowChangeEvent(((SPLIT_TRANSACTIONSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SPLIT_TRANSACTIONSRowDeleted != null)) {
                    this.SPLIT_TRANSACTIONSRowDeleted(this, new SPLIT_TRANSACTIONSRowChangeEvent(((SPLIT_TRANSACTIONSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SPLIT_TRANSACTIONSRowDeleting != null)) {
                    this.SPLIT_TRANSACTIONSRowDeleting(this, new SPLIT_TRANSACTIONSRowChangeEvent(((SPLIT_TRANSACTIONSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveSPLIT_TRANSACTIONSRow(SPLIT_TRANSACTIONSRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                creddataDataSet ds = new creddataDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SPLIT_TRANSACTIONSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SUB_CATEGORIESDataTable : global::System.Data.TypedTableBase<SUB_CATEGORIESRow> {
            
            private global::System.Data.DataColumn columnSUBCATEGID;
            
            private global::System.Data.DataColumn columnSUBCATEGNAME;
            
            private global::System.Data.DataColumn columnCATEGID;
            
            private global::System.Data.DataColumn columnINCLUDEBUDGET;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public SUB_CATEGORIESDataTable() {
                this.TableName = "SUB_CATEGORIES";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal SUB_CATEGORIESDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected SUB_CATEGORIESDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SUBCATEGIDColumn {
                get {
                    return this.columnSUBCATEGID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SUBCATEGNAMEColumn {
                get {
                    return this.columnSUBCATEGNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CATEGIDColumn {
                get {
                    return this.columnCATEGID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn INCLUDEBUDGETColumn {
                get {
                    return this.columnINCLUDEBUDGET;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public SUB_CATEGORIESRow this[int index] {
                get {
                    return ((SUB_CATEGORIESRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event SUB_CATEGORIESRowChangeEventHandler SUB_CATEGORIESRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event SUB_CATEGORIESRowChangeEventHandler SUB_CATEGORIESRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event SUB_CATEGORIESRowChangeEventHandler SUB_CATEGORIESRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event SUB_CATEGORIESRowChangeEventHandler SUB_CATEGORIESRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddSUB_CATEGORIESRow(SUB_CATEGORIESRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public SUB_CATEGORIESRow AddSUB_CATEGORIESRow(string SUBCATEGNAME, long CATEGID, string INCLUDEBUDGET) {
                SUB_CATEGORIESRow rowSUB_CATEGORIESRow = ((SUB_CATEGORIESRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        SUBCATEGNAME,
                        CATEGID,
                        INCLUDEBUDGET};
                rowSUB_CATEGORIESRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSUB_CATEGORIESRow);
                return rowSUB_CATEGORIESRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public SUB_CATEGORIESRow FindBySUBCATEGID(long SUBCATEGID) {
                return ((SUB_CATEGORIESRow)(this.Rows.Find(new object[] {
                            SUBCATEGID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                SUB_CATEGORIESDataTable cln = ((SUB_CATEGORIESDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SUB_CATEGORIESDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnSUBCATEGID = base.Columns["SUBCATEGID"];
                this.columnSUBCATEGNAME = base.Columns["SUBCATEGNAME"];
                this.columnCATEGID = base.Columns["CATEGID"];
                this.columnINCLUDEBUDGET = base.Columns["INCLUDEBUDGET"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnSUBCATEGID = new global::System.Data.DataColumn("SUBCATEGID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSUBCATEGID);
                this.columnSUBCATEGNAME = new global::System.Data.DataColumn("SUBCATEGNAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSUBCATEGNAME);
                this.columnCATEGID = new global::System.Data.DataColumn("CATEGID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCATEGID);
                this.columnINCLUDEBUDGET = new global::System.Data.DataColumn("INCLUDEBUDGET", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnINCLUDEBUDGET);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnSUBCATEGID}, true));
                this.columnSUBCATEGID.AutoIncrement = true;
                this.columnSUBCATEGID.AutoIncrementSeed = -1;
                this.columnSUBCATEGID.AutoIncrementStep = -1;
                this.columnSUBCATEGID.AllowDBNull = false;
                this.columnSUBCATEGID.Unique = true;
                this.columnSUBCATEGNAME.AllowDBNull = false;
                this.columnSUBCATEGNAME.MaxLength = 2147483647;
                this.columnCATEGID.AllowDBNull = false;
                this.columnINCLUDEBUDGET.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public SUB_CATEGORIESRow NewSUB_CATEGORIESRow() {
                return ((SUB_CATEGORIESRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SUB_CATEGORIESRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(SUB_CATEGORIESRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SUB_CATEGORIESRowChanged != null)) {
                    this.SUB_CATEGORIESRowChanged(this, new SUB_CATEGORIESRowChangeEvent(((SUB_CATEGORIESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SUB_CATEGORIESRowChanging != null)) {
                    this.SUB_CATEGORIESRowChanging(this, new SUB_CATEGORIESRowChangeEvent(((SUB_CATEGORIESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SUB_CATEGORIESRowDeleted != null)) {
                    this.SUB_CATEGORIESRowDeleted(this, new SUB_CATEGORIESRowChangeEvent(((SUB_CATEGORIESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SUB_CATEGORIESRowDeleting != null)) {
                    this.SUB_CATEGORIESRowDeleting(this, new SUB_CATEGORIESRowChangeEvent(((SUB_CATEGORIESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveSUB_CATEGORIESRow(SUB_CATEGORIESRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                creddataDataSet ds = new creddataDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SUB_CATEGORIESDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TRANS_FILTERSDataTable : global::System.Data.TypedTableBase<TRANS_FILTERSRow> {
            
            private global::System.Data.DataColumn columnTRANSFILTERID;
            
            private global::System.Data.DataColumn columnTRANSFILTERNAME;
            
            private global::System.Data.DataColumn columnFROMDATE;
            
            private global::System.Data.DataColumn columnTODATE;
            
            private global::System.Data.DataColumn columnTRANSCODE;
            
            private global::System.Data.DataColumn columnFROMAMOUNT;
            
            private global::System.Data.DataColumn columnTOAMOUNT;
            
            private global::System.Data.DataColumn columnPAYEENAME;
            
            private global::System.Data.DataColumn columnCATEGID;
            
            private global::System.Data.DataColumn columnSUBCATEGID;
            
            private global::System.Data.DataColumn columnARCHIVED;
            
            private global::System.Data.DataColumn columnDATEFILTER;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TRANS_FILTERSDataTable() {
                this.TableName = "TRANS_FILTERS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal TRANS_FILTERSDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected TRANS_FILTERSDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TRANSFILTERIDColumn {
                get {
                    return this.columnTRANSFILTERID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TRANSFILTERNAMEColumn {
                get {
                    return this.columnTRANSFILTERNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn FROMDATEColumn {
                get {
                    return this.columnFROMDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TODATEColumn {
                get {
                    return this.columnTODATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TRANSCODEColumn {
                get {
                    return this.columnTRANSCODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn FROMAMOUNTColumn {
                get {
                    return this.columnFROMAMOUNT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TOAMOUNTColumn {
                get {
                    return this.columnTOAMOUNT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PAYEENAMEColumn {
                get {
                    return this.columnPAYEENAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CATEGIDColumn {
                get {
                    return this.columnCATEGID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SUBCATEGIDColumn {
                get {
                    return this.columnSUBCATEGID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ARCHIVEDColumn {
                get {
                    return this.columnARCHIVED;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DATEFILTERColumn {
                get {
                    return this.columnDATEFILTER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TRANS_FILTERSRow this[int index] {
                get {
                    return ((TRANS_FILTERSRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event TRANS_FILTERSRowChangeEventHandler TRANS_FILTERSRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event TRANS_FILTERSRowChangeEventHandler TRANS_FILTERSRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event TRANS_FILTERSRowChangeEventHandler TRANS_FILTERSRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event TRANS_FILTERSRowChangeEventHandler TRANS_FILTERSRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddTRANS_FILTERSRow(TRANS_FILTERSRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TRANS_FILTERSRow AddTRANS_FILTERSRow(string TRANSFILTERNAME, string FROMDATE, string TODATE, string TRANSCODE, decimal FROMAMOUNT, decimal TOAMOUNT, string PAYEENAME, decimal CATEGID, decimal SUBCATEGID, string ARCHIVED, decimal DATEFILTER) {
                TRANS_FILTERSRow rowTRANS_FILTERSRow = ((TRANS_FILTERSRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        TRANSFILTERNAME,
                        FROMDATE,
                        TODATE,
                        TRANSCODE,
                        FROMAMOUNT,
                        TOAMOUNT,
                        PAYEENAME,
                        CATEGID,
                        SUBCATEGID,
                        ARCHIVED,
                        DATEFILTER};
                rowTRANS_FILTERSRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTRANS_FILTERSRow);
                return rowTRANS_FILTERSRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TRANS_FILTERSRow FindByTRANSFILTERID(long TRANSFILTERID) {
                return ((TRANS_FILTERSRow)(this.Rows.Find(new object[] {
                            TRANSFILTERID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                TRANS_FILTERSDataTable cln = ((TRANS_FILTERSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TRANS_FILTERSDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnTRANSFILTERID = base.Columns["TRANSFILTERID"];
                this.columnTRANSFILTERNAME = base.Columns["TRANSFILTERNAME"];
                this.columnFROMDATE = base.Columns["FROMDATE"];
                this.columnTODATE = base.Columns["TODATE"];
                this.columnTRANSCODE = base.Columns["TRANSCODE"];
                this.columnFROMAMOUNT = base.Columns["FROMAMOUNT"];
                this.columnTOAMOUNT = base.Columns["TOAMOUNT"];
                this.columnPAYEENAME = base.Columns["PAYEENAME"];
                this.columnCATEGID = base.Columns["CATEGID"];
                this.columnSUBCATEGID = base.Columns["SUBCATEGID"];
                this.columnARCHIVED = base.Columns["ARCHIVED"];
                this.columnDATEFILTER = base.Columns["DATEFILTER"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnTRANSFILTERID = new global::System.Data.DataColumn("TRANSFILTERID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTRANSFILTERID);
                this.columnTRANSFILTERNAME = new global::System.Data.DataColumn("TRANSFILTERNAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTRANSFILTERNAME);
                this.columnFROMDATE = new global::System.Data.DataColumn("FROMDATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFROMDATE);
                this.columnTODATE = new global::System.Data.DataColumn("TODATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTODATE);
                this.columnTRANSCODE = new global::System.Data.DataColumn("TRANSCODE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTRANSCODE);
                this.columnFROMAMOUNT = new global::System.Data.DataColumn("FROMAMOUNT", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFROMAMOUNT);
                this.columnTOAMOUNT = new global::System.Data.DataColumn("TOAMOUNT", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTOAMOUNT);
                this.columnPAYEENAME = new global::System.Data.DataColumn("PAYEENAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPAYEENAME);
                this.columnCATEGID = new global::System.Data.DataColumn("CATEGID", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCATEGID);
                this.columnSUBCATEGID = new global::System.Data.DataColumn("SUBCATEGID", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSUBCATEGID);
                this.columnARCHIVED = new global::System.Data.DataColumn("ARCHIVED", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnARCHIVED);
                this.columnDATEFILTER = new global::System.Data.DataColumn("DATEFILTER", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDATEFILTER);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTRANSFILTERID}, true));
                this.columnTRANSFILTERID.AutoIncrement = true;
                this.columnTRANSFILTERID.AutoIncrementSeed = -1;
                this.columnTRANSFILTERID.AutoIncrementStep = -1;
                this.columnTRANSFILTERID.AllowDBNull = false;
                this.columnTRANSFILTERID.Unique = true;
                this.columnTRANSFILTERNAME.AllowDBNull = false;
                this.columnTRANSFILTERNAME.MaxLength = 2147483647;
                this.columnFROMDATE.MaxLength = 2147483647;
                this.columnTODATE.MaxLength = 2147483647;
                this.columnTRANSCODE.MaxLength = 2147483647;
                this.columnPAYEENAME.MaxLength = 2147483647;
                this.columnARCHIVED.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TRANS_FILTERSRow NewTRANS_FILTERSRow() {
                return ((TRANS_FILTERSRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TRANS_FILTERSRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(TRANS_FILTERSRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TRANS_FILTERSRowChanged != null)) {
                    this.TRANS_FILTERSRowChanged(this, new TRANS_FILTERSRowChangeEvent(((TRANS_FILTERSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TRANS_FILTERSRowChanging != null)) {
                    this.TRANS_FILTERSRowChanging(this, new TRANS_FILTERSRowChangeEvent(((TRANS_FILTERSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TRANS_FILTERSRowDeleted != null)) {
                    this.TRANS_FILTERSRowDeleted(this, new TRANS_FILTERSRowChangeEvent(((TRANS_FILTERSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TRANS_FILTERSRowDeleting != null)) {
                    this.TRANS_FILTERSRowDeleting(this, new TRANS_FILTERSRowChangeEvent(((TRANS_FILTERSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveTRANS_FILTERSRow(TRANS_FILTERSRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                creddataDataSet ds = new creddataDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TRANS_FILTERSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TRANSACTIONSDataTable : global::System.Data.TypedTableBase<TRANSACTIONSRow> {
            
            private global::System.Data.DataColumn columnTRANSID;
            
            private global::System.Data.DataColumn columnACCOUNTID;
            
            private global::System.Data.DataColumn columnTOACCOUNTID;
            
            private global::System.Data.DataColumn columnPAYEEID;
            
            private global::System.Data.DataColumn columnTRANSCODE;
            
            private global::System.Data.DataColumn columnTRANSAMOUNT;
            
            private global::System.Data.DataColumn columnSTATUS;
            
            private global::System.Data.DataColumn columnTRANSACTIONNUMBER;
            
            private global::System.Data.DataColumn columnNOTES;
            
            private global::System.Data.DataColumn columnCATEGID;
            
            private global::System.Data.DataColumn columnSUBCATEGID;
            
            private global::System.Data.DataColumn columnTRANSDATE;
            
            private global::System.Data.DataColumn columnFOLLOWUPID;
            
            private global::System.Data.DataColumn columnTOTRANSAMOUNT;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TRANSACTIONSDataTable() {
                this.TableName = "TRANSACTIONS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal TRANSACTIONSDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected TRANSACTIONSDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TRANSIDColumn {
                get {
                    return this.columnTRANSID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ACCOUNTIDColumn {
                get {
                    return this.columnACCOUNTID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TOACCOUNTIDColumn {
                get {
                    return this.columnTOACCOUNTID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PAYEEIDColumn {
                get {
                    return this.columnPAYEEID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TRANSCODEColumn {
                get {
                    return this.columnTRANSCODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TRANSAMOUNTColumn {
                get {
                    return this.columnTRANSAMOUNT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn STATUSColumn {
                get {
                    return this.columnSTATUS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TRANSACTIONNUMBERColumn {
                get {
                    return this.columnTRANSACTIONNUMBER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn NOTESColumn {
                get {
                    return this.columnNOTES;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CATEGIDColumn {
                get {
                    return this.columnCATEGID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SUBCATEGIDColumn {
                get {
                    return this.columnSUBCATEGID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TRANSDATEColumn {
                get {
                    return this.columnTRANSDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn FOLLOWUPIDColumn {
                get {
                    return this.columnFOLLOWUPID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TOTRANSAMOUNTColumn {
                get {
                    return this.columnTOTRANSAMOUNT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TRANSACTIONSRow this[int index] {
                get {
                    return ((TRANSACTIONSRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event TRANSACTIONSRowChangeEventHandler TRANSACTIONSRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event TRANSACTIONSRowChangeEventHandler TRANSACTIONSRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event TRANSACTIONSRowChangeEventHandler TRANSACTIONSRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event TRANSACTIONSRowChangeEventHandler TRANSACTIONSRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddTRANSACTIONSRow(TRANSACTIONSRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TRANSACTIONSRow AddTRANSACTIONSRow(long ACCOUNTID, long TOACCOUNTID, long PAYEEID, string TRANSCODE, decimal TRANSAMOUNT, string STATUS, string TRANSACTIONNUMBER, string NOTES, long CATEGID, long SUBCATEGID, string TRANSDATE, long FOLLOWUPID, decimal TOTRANSAMOUNT) {
                TRANSACTIONSRow rowTRANSACTIONSRow = ((TRANSACTIONSRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ACCOUNTID,
                        TOACCOUNTID,
                        PAYEEID,
                        TRANSCODE,
                        TRANSAMOUNT,
                        STATUS,
                        TRANSACTIONNUMBER,
                        NOTES,
                        CATEGID,
                        SUBCATEGID,
                        TRANSDATE,
                        FOLLOWUPID,
                        TOTRANSAMOUNT};
                rowTRANSACTIONSRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTRANSACTIONSRow);
                return rowTRANSACTIONSRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TRANSACTIONSRow FindByTRANSID(long TRANSID) {
                return ((TRANSACTIONSRow)(this.Rows.Find(new object[] {
                            TRANSID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                TRANSACTIONSDataTable cln = ((TRANSACTIONSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TRANSACTIONSDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnTRANSID = base.Columns["TRANSID"];
                this.columnACCOUNTID = base.Columns["ACCOUNTID"];
                this.columnTOACCOUNTID = base.Columns["TOACCOUNTID"];
                this.columnPAYEEID = base.Columns["PAYEEID"];
                this.columnTRANSCODE = base.Columns["TRANSCODE"];
                this.columnTRANSAMOUNT = base.Columns["TRANSAMOUNT"];
                this.columnSTATUS = base.Columns["STATUS"];
                this.columnTRANSACTIONNUMBER = base.Columns["TRANSACTIONNUMBER"];
                this.columnNOTES = base.Columns["NOTES"];
                this.columnCATEGID = base.Columns["CATEGID"];
                this.columnSUBCATEGID = base.Columns["SUBCATEGID"];
                this.columnTRANSDATE = base.Columns["TRANSDATE"];
                this.columnFOLLOWUPID = base.Columns["FOLLOWUPID"];
                this.columnTOTRANSAMOUNT = base.Columns["TOTRANSAMOUNT"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnTRANSID = new global::System.Data.DataColumn("TRANSID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTRANSID);
                this.columnACCOUNTID = new global::System.Data.DataColumn("ACCOUNTID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnACCOUNTID);
                this.columnTOACCOUNTID = new global::System.Data.DataColumn("TOACCOUNTID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTOACCOUNTID);
                this.columnPAYEEID = new global::System.Data.DataColumn("PAYEEID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPAYEEID);
                this.columnTRANSCODE = new global::System.Data.DataColumn("TRANSCODE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTRANSCODE);
                this.columnTRANSAMOUNT = new global::System.Data.DataColumn("TRANSAMOUNT", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTRANSAMOUNT);
                this.columnSTATUS = new global::System.Data.DataColumn("STATUS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTATUS);
                this.columnTRANSACTIONNUMBER = new global::System.Data.DataColumn("TRANSACTIONNUMBER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTRANSACTIONNUMBER);
                this.columnNOTES = new global::System.Data.DataColumn("NOTES", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNOTES);
                this.columnCATEGID = new global::System.Data.DataColumn("CATEGID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCATEGID);
                this.columnSUBCATEGID = new global::System.Data.DataColumn("SUBCATEGID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSUBCATEGID);
                this.columnTRANSDATE = new global::System.Data.DataColumn("TRANSDATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTRANSDATE);
                this.columnFOLLOWUPID = new global::System.Data.DataColumn("FOLLOWUPID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFOLLOWUPID);
                this.columnTOTRANSAMOUNT = new global::System.Data.DataColumn("TOTRANSAMOUNT", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTOTRANSAMOUNT);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTRANSID}, true));
                this.columnTRANSID.AutoIncrement = true;
                this.columnTRANSID.AutoIncrementSeed = -1;
                this.columnTRANSID.AutoIncrementStep = -1;
                this.columnTRANSID.AllowDBNull = false;
                this.columnTRANSID.Unique = true;
                this.columnACCOUNTID.AllowDBNull = false;
                this.columnPAYEEID.AllowDBNull = false;
                this.columnTRANSCODE.AllowDBNull = false;
                this.columnTRANSCODE.MaxLength = 2147483647;
                this.columnTRANSAMOUNT.AllowDBNull = false;
                this.columnSTATUS.MaxLength = 2147483647;
                this.columnTRANSACTIONNUMBER.MaxLength = 2147483647;
                this.columnNOTES.MaxLength = 2147483647;
                this.columnTRANSDATE.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TRANSACTIONSRow NewTRANSACTIONSRow() {
                return ((TRANSACTIONSRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TRANSACTIONSRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(TRANSACTIONSRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TRANSACTIONSRowChanged != null)) {
                    this.TRANSACTIONSRowChanged(this, new TRANSACTIONSRowChangeEvent(((TRANSACTIONSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TRANSACTIONSRowChanging != null)) {
                    this.TRANSACTIONSRowChanging(this, new TRANSACTIONSRowChangeEvent(((TRANSACTIONSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TRANSACTIONSRowDeleted != null)) {
                    this.TRANSACTIONSRowDeleted(this, new TRANSACTIONSRowChangeEvent(((TRANSACTIONSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TRANSACTIONSRowDeleting != null)) {
                    this.TRANSACTIONSRowDeleting(this, new TRANSACTIONSRowChangeEvent(((TRANSACTIONSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveTRANSACTIONSRow(TRANSACTIONSRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                creddataDataSet ds = new creddataDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TRANSACTIONSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class USER_SETTINGSDataTable : global::System.Data.TypedTableBase<USER_SETTINGSRow> {
            
            private global::System.Data.DataColumn columnINFOID;
            
            private global::System.Data.DataColumn columnINFONAME;
            
            private global::System.Data.DataColumn columnINFOVALUE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public USER_SETTINGSDataTable() {
                this.TableName = "USER_SETTINGS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal USER_SETTINGSDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected USER_SETTINGSDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn INFOIDColumn {
                get {
                    return this.columnINFOID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn INFONAMEColumn {
                get {
                    return this.columnINFONAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn INFOVALUEColumn {
                get {
                    return this.columnINFOVALUE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public USER_SETTINGSRow this[int index] {
                get {
                    return ((USER_SETTINGSRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event USER_SETTINGSRowChangeEventHandler USER_SETTINGSRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event USER_SETTINGSRowChangeEventHandler USER_SETTINGSRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event USER_SETTINGSRowChangeEventHandler USER_SETTINGSRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event USER_SETTINGSRowChangeEventHandler USER_SETTINGSRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddUSER_SETTINGSRow(USER_SETTINGSRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public USER_SETTINGSRow AddUSER_SETTINGSRow(long INFOID, string INFONAME, string INFOVALUE) {
                USER_SETTINGSRow rowUSER_SETTINGSRow = ((USER_SETTINGSRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        INFOID,
                        INFONAME,
                        INFOVALUE};
                rowUSER_SETTINGSRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowUSER_SETTINGSRow);
                return rowUSER_SETTINGSRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public USER_SETTINGSRow FindByINFOID(long INFOID) {
                return ((USER_SETTINGSRow)(this.Rows.Find(new object[] {
                            INFOID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                USER_SETTINGSDataTable cln = ((USER_SETTINGSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new USER_SETTINGSDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnINFOID = base.Columns["INFOID"];
                this.columnINFONAME = base.Columns["INFONAME"];
                this.columnINFOVALUE = base.Columns["INFOVALUE"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnINFOID = new global::System.Data.DataColumn("INFOID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnINFOID);
                this.columnINFONAME = new global::System.Data.DataColumn("INFONAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnINFONAME);
                this.columnINFOVALUE = new global::System.Data.DataColumn("INFOVALUE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnINFOVALUE);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnINFONAME}, false));
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint2", new global::System.Data.DataColumn[] {
                                this.columnINFOID}, true));
                this.columnINFOID.AllowDBNull = false;
                this.columnINFOID.Unique = true;
                this.columnINFONAME.AllowDBNull = false;
                this.columnINFONAME.Unique = true;
                this.columnINFONAME.MaxLength = 2147483647;
                this.columnINFOVALUE.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public USER_SETTINGSRow NewUSER_SETTINGSRow() {
                return ((USER_SETTINGSRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new USER_SETTINGSRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(USER_SETTINGSRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.USER_SETTINGSRowChanged != null)) {
                    this.USER_SETTINGSRowChanged(this, new USER_SETTINGSRowChangeEvent(((USER_SETTINGSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.USER_SETTINGSRowChanging != null)) {
                    this.USER_SETTINGSRowChanging(this, new USER_SETTINGSRowChangeEvent(((USER_SETTINGSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.USER_SETTINGSRowDeleted != null)) {
                    this.USER_SETTINGSRowDeleted(this, new USER_SETTINGSRowChangeEvent(((USER_SETTINGSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.USER_SETTINGSRowDeleting != null)) {
                    this.USER_SETTINGSRowDeleting(this, new USER_SETTINGSRowChangeEvent(((USER_SETTINGSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveUSER_SETTINGSRow(USER_SETTINGSRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                creddataDataSet ds = new creddataDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "USER_SETTINGSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ACCOUNTSRow : global::System.Data.DataRow {
            
            private ACCOUNTSDataTable tableACCOUNTS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ACCOUNTSRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableACCOUNTS = ((ACCOUNTSDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long ACCOUNTID {
                get {
                    return ((long)(this[this.tableACCOUNTS.ACCOUNTIDColumn]));
                }
                set {
                    this[this.tableACCOUNTS.ACCOUNTIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ACCOUNTNAME {
                get {
                    return ((string)(this[this.tableACCOUNTS.ACCOUNTNAMEColumn]));
                }
                set {
                    this[this.tableACCOUNTS.ACCOUNTNAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ACCOUNTTYPE {
                get {
                    return ((string)(this[this.tableACCOUNTS.ACCOUNTTYPEColumn]));
                }
                set {
                    this[this.tableACCOUNTS.ACCOUNTTYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ACCOUNTNUM {
                get {
                    try {
                        return ((string)(this[this.tableACCOUNTS.ACCOUNTNUMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ACCOUNTNUM\' in table \'ACCOUNTS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableACCOUNTS.ACCOUNTNUMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string STATUS {
                get {
                    return ((string)(this[this.tableACCOUNTS.STATUSColumn]));
                }
                set {
                    this[this.tableACCOUNTS.STATUSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string NOTES {
                get {
                    try {
                        return ((string)(this[this.tableACCOUNTS.NOTESColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NOTES\' in table \'ACCOUNTS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableACCOUNTS.NOTESColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string HELDAT {
                get {
                    try {
                        return ((string)(this[this.tableACCOUNTS.HELDATColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HELDAT\' in table \'ACCOUNTS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableACCOUNTS.HELDATColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string WEBSITE {
                get {
                    try {
                        return ((string)(this[this.tableACCOUNTS.WEBSITEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WEBSITE\' in table \'ACCOUNTS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableACCOUNTS.WEBSITEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CONTACTINFO {
                get {
                    try {
                        return ((string)(this[this.tableACCOUNTS.CONTACTINFOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CONTACTINFO\' in table \'ACCOUNTS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableACCOUNTS.CONTACTINFOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ACCESSINFO {
                get {
                    try {
                        return ((string)(this[this.tableACCOUNTS.ACCESSINFOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ACCESSINFO\' in table \'ACCOUNTS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableACCOUNTS.ACCESSINFOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal INITIALBAL {
                get {
                    try {
                        return ((decimal)(this[this.tableACCOUNTS.INITIALBALColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'INITIALBAL\' in table \'ACCOUNTS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableACCOUNTS.INITIALBALColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string FAVORITEACCT {
                get {
                    return ((string)(this[this.tableACCOUNTS.FAVORITEACCTColumn]));
                }
                set {
                    this[this.tableACCOUNTS.FAVORITEACCTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long CURRENCYID {
                get {
                    return ((long)(this[this.tableACCOUNTS.CURRENCYIDColumn]));
                }
                set {
                    this[this.tableACCOUNTS.CURRENCYIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsACCOUNTNUMNull() {
                return this.IsNull(this.tableACCOUNTS.ACCOUNTNUMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetACCOUNTNUMNull() {
                this[this.tableACCOUNTS.ACCOUNTNUMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsNOTESNull() {
                return this.IsNull(this.tableACCOUNTS.NOTESColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetNOTESNull() {
                this[this.tableACCOUNTS.NOTESColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsHELDATNull() {
                return this.IsNull(this.tableACCOUNTS.HELDATColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetHELDATNull() {
                this[this.tableACCOUNTS.HELDATColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsWEBSITENull() {
                return this.IsNull(this.tableACCOUNTS.WEBSITEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetWEBSITENull() {
                this[this.tableACCOUNTS.WEBSITEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCONTACTINFONull() {
                return this.IsNull(this.tableACCOUNTS.CONTACTINFOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCONTACTINFONull() {
                this[this.tableACCOUNTS.CONTACTINFOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsACCESSINFONull() {
                return this.IsNull(this.tableACCOUNTS.ACCESSINFOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetACCESSINFONull() {
                this[this.tableACCOUNTS.ACCESSINFOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsINITIALBALNull() {
                return this.IsNull(this.tableACCOUNTS.INITIALBALColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetINITIALBALNull() {
                this[this.tableACCOUNTS.INITIALBALColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ASSETSRow : global::System.Data.DataRow {
            
            private ASSETSDataTable tableASSETS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ASSETSRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableASSETS = ((ASSETSDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long ASSETID {
                get {
                    return ((long)(this[this.tableASSETS.ASSETIDColumn]));
                }
                set {
                    this[this.tableASSETS.ASSETIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string STARTDATE {
                get {
                    return ((string)(this[this.tableASSETS.STARTDATEColumn]));
                }
                set {
                    this[this.tableASSETS.STARTDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ASSETNAME {
                get {
                    return ((string)(this[this.tableASSETS.ASSETNAMEColumn]));
                }
                set {
                    this[this.tableASSETS.ASSETNAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal VALUE {
                get {
                    try {
                        return ((decimal)(this[this.tableASSETS.VALUEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VALUE\' in table \'ASSETS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableASSETS.VALUEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string VALUECHANGE {
                get {
                    try {
                        return ((string)(this[this.tableASSETS.VALUECHANGEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VALUECHANGE\' in table \'ASSETS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableASSETS.VALUECHANGEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string NOTES {
                get {
                    try {
                        return ((string)(this[this.tableASSETS.NOTESColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NOTES\' in table \'ASSETS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableASSETS.NOTESColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal VALUECHANGERATE {
                get {
                    try {
                        return ((decimal)(this[this.tableASSETS.VALUECHANGERATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VALUECHANGERATE\' in table \'ASSETS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableASSETS.VALUECHANGERATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ASSETTYPE {
                get {
                    try {
                        return ((string)(this[this.tableASSETS.ASSETTYPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ASSETTYPE\' in table \'ASSETS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableASSETS.ASSETTYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsVALUENull() {
                return this.IsNull(this.tableASSETS.VALUEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetVALUENull() {
                this[this.tableASSETS.VALUEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsVALUECHANGENull() {
                return this.IsNull(this.tableASSETS.VALUECHANGEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetVALUECHANGENull() {
                this[this.tableASSETS.VALUECHANGEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsNOTESNull() {
                return this.IsNull(this.tableASSETS.NOTESColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetNOTESNull() {
                this[this.tableASSETS.NOTESColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsVALUECHANGERATENull() {
                return this.IsNull(this.tableASSETS.VALUECHANGERATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetVALUECHANGERATENull() {
                this[this.tableASSETS.VALUECHANGERATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsASSETTYPENull() {
                return this.IsNull(this.tableASSETS.ASSETTYPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetASSETTYPENull() {
                this[this.tableASSETS.ASSETTYPEColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class BUDGET_DETAILRow : global::System.Data.DataRow {
            
            private BUDGET_DETAILDataTable tableBUDGET_DETAIL;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal BUDGET_DETAILRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBUDGET_DETAIL = ((BUDGET_DETAILDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long BUDGETENTRYID {
                get {
                    return ((long)(this[this.tableBUDGET_DETAIL.BUDGETENTRYIDColumn]));
                }
                set {
                    this[this.tableBUDGET_DETAIL.BUDGETENTRYIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long BUDGETYEARID {
                get {
                    try {
                        return ((long)(this[this.tableBUDGET_DETAIL.BUDGETYEARIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BUDGETYEARID\' in table \'BUDGET_DETAIL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBUDGET_DETAIL.BUDGETYEARIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long CATEGID {
                get {
                    try {
                        return ((long)(this[this.tableBUDGET_DETAIL.CATEGIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CATEGID\' in table \'BUDGET_DETAIL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBUDGET_DETAIL.CATEGIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long SUBCATEGID {
                get {
                    try {
                        return ((long)(this[this.tableBUDGET_DETAIL.SUBCATEGIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SUBCATEGID\' in table \'BUDGET_DETAIL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBUDGET_DETAIL.SUBCATEGIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string PERIOD {
                get {
                    return ((string)(this[this.tableBUDGET_DETAIL.PERIODColumn]));
                }
                set {
                    this[this.tableBUDGET_DETAIL.PERIODColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal AMOUNT {
                get {
                    return ((decimal)(this[this.tableBUDGET_DETAIL.AMOUNTColumn]));
                }
                set {
                    this[this.tableBUDGET_DETAIL.AMOUNTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsBUDGETYEARIDNull() {
                return this.IsNull(this.tableBUDGET_DETAIL.BUDGETYEARIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetBUDGETYEARIDNull() {
                this[this.tableBUDGET_DETAIL.BUDGETYEARIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCATEGIDNull() {
                return this.IsNull(this.tableBUDGET_DETAIL.CATEGIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCATEGIDNull() {
                this[this.tableBUDGET_DETAIL.CATEGIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSUBCATEGIDNull() {
                return this.IsNull(this.tableBUDGET_DETAIL.SUBCATEGIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSUBCATEGIDNull() {
                this[this.tableBUDGET_DETAIL.SUBCATEGIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class BUDGET_HEADERRow : global::System.Data.DataRow {
            
            private BUDGET_HEADERDataTable tableBUDGET_HEADER;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal BUDGET_HEADERRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBUDGET_HEADER = ((BUDGET_HEADERDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long BUDGETYEARID {
                get {
                    return ((long)(this[this.tableBUDGET_HEADER.BUDGETYEARIDColumn]));
                }
                set {
                    this[this.tableBUDGET_HEADER.BUDGETYEARIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string BUDGETYEARNAME {
                get {
                    return ((string)(this[this.tableBUDGET_HEADER.BUDGETYEARNAMEColumn]));
                }
                set {
                    this[this.tableBUDGET_HEADER.BUDGETYEARNAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string BUDGETFREQUENCY {
                get {
                    try {
                        return ((string)(this[this.tableBUDGET_HEADER.BUDGETFREQUENCYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BUDGETFREQUENCY\' in table \'BUDGET_HEADER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBUDGET_HEADER.BUDGETFREQUENCYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string BUDGETYEAR {
                get {
                    try {
                        return ((string)(this[this.tableBUDGET_HEADER.BUDGETYEARColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BUDGETYEAR\' in table \'BUDGET_HEADER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBUDGET_HEADER.BUDGETYEARColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string BUDGETMONTH {
                get {
                    try {
                        return ((string)(this[this.tableBUDGET_HEADER.BUDGETMONTHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BUDGETMONTH\' in table \'BUDGET_HEADER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBUDGET_HEADER.BUDGETMONTHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ARCHIVED {
                get {
                    try {
                        return ((string)(this[this.tableBUDGET_HEADER.ARCHIVEDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ARCHIVED\' in table \'BUDGET_HEADER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBUDGET_HEADER.ARCHIVEDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string BUDGETACCOUNT {
                get {
                    try {
                        return ((string)(this[this.tableBUDGET_HEADER.BUDGETACCOUNTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BUDGETACCOUNT\' in table \'BUDGET_HEADER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBUDGET_HEADER.BUDGETACCOUNTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsBUDGETFREQUENCYNull() {
                return this.IsNull(this.tableBUDGET_HEADER.BUDGETFREQUENCYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetBUDGETFREQUENCYNull() {
                this[this.tableBUDGET_HEADER.BUDGETFREQUENCYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsBUDGETYEARNull() {
                return this.IsNull(this.tableBUDGET_HEADER.BUDGETYEARColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetBUDGETYEARNull() {
                this[this.tableBUDGET_HEADER.BUDGETYEARColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsBUDGETMONTHNull() {
                return this.IsNull(this.tableBUDGET_HEADER.BUDGETMONTHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetBUDGETMONTHNull() {
                this[this.tableBUDGET_HEADER.BUDGETMONTHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsARCHIVEDNull() {
                return this.IsNull(this.tableBUDGET_HEADER.ARCHIVEDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetARCHIVEDNull() {
                this[this.tableBUDGET_HEADER.ARCHIVEDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsBUDGETACCOUNTNull() {
                return this.IsNull(this.tableBUDGET_HEADER.BUDGETACCOUNTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetBUDGETACCOUNTNull() {
                this[this.tableBUDGET_HEADER.BUDGETACCOUNTColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class CATEGORIESRow : global::System.Data.DataRow {
            
            private CATEGORIESDataTable tableCATEGORIES;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal CATEGORIESRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCATEGORIES = ((CATEGORIESDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long CATEGID {
                get {
                    return ((long)(this[this.tableCATEGORIES.CATEGIDColumn]));
                }
                set {
                    this[this.tableCATEGORIES.CATEGIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CATEGNAME {
                get {
                    return ((string)(this[this.tableCATEGORIES.CATEGNAMEColumn]));
                }
                set {
                    this[this.tableCATEGORIES.CATEGNAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string COLOUR {
                get {
                    try {
                        return ((string)(this[this.tableCATEGORIES.COLOURColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'COLOUR\' in table \'CATEGORIES\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCATEGORIES.COLOURColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string INCLUDEBUDGET {
                get {
                    try {
                        return ((string)(this[this.tableCATEGORIES.INCLUDEBUDGETColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'INCLUDEBUDGET\' in table \'CATEGORIES\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCATEGORIES.INCLUDEBUDGETColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCOLOURNull() {
                return this.IsNull(this.tableCATEGORIES.COLOURColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCOLOURNull() {
                this[this.tableCATEGORIES.COLOURColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsINCLUDEBUDGETNull() {
                return this.IsNull(this.tableCATEGORIES.INCLUDEBUDGETColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetINCLUDEBUDGETNull() {
                this[this.tableCATEGORIES.INCLUDEBUDGETColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class GRID_SETTINGSRow : global::System.Data.DataRow {
            
            private GRID_SETTINGSDataTable tableGRID_SETTINGS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal GRID_SETTINGSRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGRID_SETTINGS = ((GRID_SETTINGSDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long GRIDSETTINGSID {
                get {
                    return ((long)(this[this.tableGRID_SETTINGS.GRIDSETTINGSIDColumn]));
                }
                set {
                    this[this.tableGRID_SETTINGS.GRIDSETTINGSIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string GRIDNAME {
                get {
                    try {
                        return ((string)(this[this.tableGRID_SETTINGS.GRIDNAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GRIDNAME\' in table \'GRID_SETTINGS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGRID_SETTINGS.GRIDNAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string FIELDNAME {
                get {
                    try {
                        return ((string)(this[this.tableGRID_SETTINGS.FIELDNAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FIELDNAME\' in table \'GRID_SETTINGS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGRID_SETTINGS.FIELDNAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long COLUMNINDEX {
                get {
                    try {
                        return ((long)(this[this.tableGRID_SETTINGS.COLUMNINDEXColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'COLUMNINDEX\' in table \'GRID_SETTINGS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGRID_SETTINGS.COLUMNINDEXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long COLUMNWIDTH {
                get {
                    try {
                        return ((long)(this[this.tableGRID_SETTINGS.COLUMNWIDTHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'COLUMNWIDTH\' in table \'GRID_SETTINGS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGRID_SETTINGS.COLUMNWIDTHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string VISIBLE {
                get {
                    try {
                        return ((string)(this[this.tableGRID_SETTINGS.VISIBLEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VISIBLE\' in table \'GRID_SETTINGS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGRID_SETTINGS.VISIBLEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CAPTION {
                get {
                    try {
                        return ((string)(this[this.tableGRID_SETTINGS.CAPTIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CAPTION\' in table \'GRID_SETTINGS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGRID_SETTINGS.CAPTIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsGRIDNAMENull() {
                return this.IsNull(this.tableGRID_SETTINGS.GRIDNAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetGRIDNAMENull() {
                this[this.tableGRID_SETTINGS.GRIDNAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsFIELDNAMENull() {
                return this.IsNull(this.tableGRID_SETTINGS.FIELDNAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetFIELDNAMENull() {
                this[this.tableGRID_SETTINGS.FIELDNAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCOLUMNINDEXNull() {
                return this.IsNull(this.tableGRID_SETTINGS.COLUMNINDEXColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCOLUMNINDEXNull() {
                this[this.tableGRID_SETTINGS.COLUMNINDEXColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCOLUMNWIDTHNull() {
                return this.IsNull(this.tableGRID_SETTINGS.COLUMNWIDTHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCOLUMNWIDTHNull() {
                this[this.tableGRID_SETTINGS.COLUMNWIDTHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsVISIBLENull() {
                return this.IsNull(this.tableGRID_SETTINGS.VISIBLEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetVISIBLENull() {
                this[this.tableGRID_SETTINGS.VISIBLEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCAPTIONNull() {
                return this.IsNull(this.tableGRID_SETTINGS.CAPTIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCAPTIONNull() {
                this[this.tableGRID_SETTINGS.CAPTIONColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class PAYEE_IMPORTRow : global::System.Data.DataRow {
            
            private PAYEE_IMPORTDataTable tablePAYEE_IMPORT;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal PAYEE_IMPORTRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePAYEE_IMPORT = ((PAYEE_IMPORTDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long PAYEEIMPORTID {
                get {
                    return ((long)(this[this.tablePAYEE_IMPORT.PAYEEIMPORTIDColumn]));
                }
                set {
                    this[this.tablePAYEE_IMPORT.PAYEEIMPORTIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string MATCHTEXT {
                get {
                    try {
                        return ((string)(this[this.tablePAYEE_IMPORT.MATCHTEXTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MATCHTEXT\' in table \'PAYEE_IMPORT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePAYEE_IMPORT.MATCHTEXTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long PAYEEID {
                get {
                    try {
                        return ((long)(this[this.tablePAYEE_IMPORT.PAYEEIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PAYEEID\' in table \'PAYEE_IMPORT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePAYEE_IMPORT.PAYEEIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsMATCHTEXTNull() {
                return this.IsNull(this.tablePAYEE_IMPORT.MATCHTEXTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetMATCHTEXTNull() {
                this[this.tablePAYEE_IMPORT.MATCHTEXTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPAYEEIDNull() {
                return this.IsNull(this.tablePAYEE_IMPORT.PAYEEIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPAYEEIDNull() {
                this[this.tablePAYEE_IMPORT.PAYEEIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class PAYEESRow : global::System.Data.DataRow {
            
            private PAYEESDataTable tablePAYEES;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal PAYEESRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePAYEES = ((PAYEESDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long PAYEEID {
                get {
                    return ((long)(this[this.tablePAYEES.PAYEEIDColumn]));
                }
                set {
                    this[this.tablePAYEES.PAYEEIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string PAYEENAME {
                get {
                    return ((string)(this[this.tablePAYEES.PAYEENAMEColumn]));
                }
                set {
                    this[this.tablePAYEES.PAYEENAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long CATEGID {
                get {
                    try {
                        return ((long)(this[this.tablePAYEES.CATEGIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CATEGID\' in table \'PAYEES\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePAYEES.CATEGIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long SUBCATEGID {
                get {
                    try {
                        return ((long)(this[this.tablePAYEES.SUBCATEGIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SUBCATEGID\' in table \'PAYEES\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePAYEES.SUBCATEGIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string COLOUR {
                get {
                    try {
                        return ((string)(this[this.tablePAYEES.COLOURColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'COLOUR\' in table \'PAYEES\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePAYEES.COLOURColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCATEGIDNull() {
                return this.IsNull(this.tablePAYEES.CATEGIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCATEGIDNull() {
                this[this.tablePAYEES.CATEGIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSUBCATEGIDNull() {
                return this.IsNull(this.tablePAYEES.SUBCATEGIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSUBCATEGIDNull() {
                this[this.tablePAYEES.SUBCATEGIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCOLOURNull() {
                return this.IsNull(this.tablePAYEES.COLOURColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCOLOURNull() {
                this[this.tablePAYEES.COLOURColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class REP_FILTERSRow : global::System.Data.DataRow {
            
            private REP_FILTERSDataTable tableREP_FILTERS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal REP_FILTERSRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableREP_FILTERS = ((REP_FILTERSDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long REPFILTERID {
                get {
                    return ((long)(this[this.tableREP_FILTERS.REPFILTERIDColumn]));
                }
                set {
                    this[this.tableREP_FILTERS.REPFILTERIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string REPFILTERNAME {
                get {
                    return ((string)(this[this.tableREP_FILTERS.REPFILTERNAMEColumn]));
                }
                set {
                    this[this.tableREP_FILTERS.REPFILTERNAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string FROMDATE {
                get {
                    try {
                        return ((string)(this[this.tableREP_FILTERS.FROMDATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FROMDATE\' in table \'REP_FILTERS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREP_FILTERS.FROMDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TODATE {
                get {
                    try {
                        return ((string)(this[this.tableREP_FILTERS.TODATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TODATE\' in table \'REP_FILTERS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREP_FILTERS.TODATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TRANSCODE {
                get {
                    try {
                        return ((string)(this[this.tableREP_FILTERS.TRANSCODEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TRANSCODE\' in table \'REP_FILTERS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREP_FILTERS.TRANSCODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal FROMAMOUNT {
                get {
                    try {
                        return ((decimal)(this[this.tableREP_FILTERS.FROMAMOUNTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FROMAMOUNT\' in table \'REP_FILTERS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREP_FILTERS.FROMAMOUNTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal TOAMOUNT {
                get {
                    try {
                        return ((decimal)(this[this.tableREP_FILTERS.TOAMOUNTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TOAMOUNT\' in table \'REP_FILTERS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREP_FILTERS.TOAMOUNTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string PAYEENAME {
                get {
                    try {
                        return ((string)(this[this.tableREP_FILTERS.PAYEENAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PAYEENAME\' in table \'REP_FILTERS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREP_FILTERS.PAYEENAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal CATEGID {
                get {
                    try {
                        return ((decimal)(this[this.tableREP_FILTERS.CATEGIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CATEGID\' in table \'REP_FILTERS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREP_FILTERS.CATEGIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal SUBCATEGID {
                get {
                    try {
                        return ((decimal)(this[this.tableREP_FILTERS.SUBCATEGIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SUBCATEGID\' in table \'REP_FILTERS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREP_FILTERS.SUBCATEGIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ARCHIVED {
                get {
                    try {
                        return ((string)(this[this.tableREP_FILTERS.ARCHIVEDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ARCHIVED\' in table \'REP_FILTERS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREP_FILTERS.ARCHIVEDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal DATEFILTER {
                get {
                    try {
                        return ((decimal)(this[this.tableREP_FILTERS.DATEFILTERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DATEFILTER\' in table \'REP_FILTERS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREP_FILTERS.DATEFILTERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsFROMDATENull() {
                return this.IsNull(this.tableREP_FILTERS.FROMDATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetFROMDATENull() {
                this[this.tableREP_FILTERS.FROMDATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTODATENull() {
                return this.IsNull(this.tableREP_FILTERS.TODATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTODATENull() {
                this[this.tableREP_FILTERS.TODATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTRANSCODENull() {
                return this.IsNull(this.tableREP_FILTERS.TRANSCODEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTRANSCODENull() {
                this[this.tableREP_FILTERS.TRANSCODEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsFROMAMOUNTNull() {
                return this.IsNull(this.tableREP_FILTERS.FROMAMOUNTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetFROMAMOUNTNull() {
                this[this.tableREP_FILTERS.FROMAMOUNTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTOAMOUNTNull() {
                return this.IsNull(this.tableREP_FILTERS.TOAMOUNTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTOAMOUNTNull() {
                this[this.tableREP_FILTERS.TOAMOUNTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPAYEENAMENull() {
                return this.IsNull(this.tableREP_FILTERS.PAYEENAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPAYEENAMENull() {
                this[this.tableREP_FILTERS.PAYEENAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCATEGIDNull() {
                return this.IsNull(this.tableREP_FILTERS.CATEGIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCATEGIDNull() {
                this[this.tableREP_FILTERS.CATEGIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSUBCATEGIDNull() {
                return this.IsNull(this.tableREP_FILTERS.SUBCATEGIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSUBCATEGIDNull() {
                this[this.tableREP_FILTERS.SUBCATEGIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsARCHIVEDNull() {
                return this.IsNull(this.tableREP_FILTERS.ARCHIVEDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetARCHIVEDNull() {
                this[this.tableREP_FILTERS.ARCHIVEDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDATEFILTERNull() {
                return this.IsNull(this.tableREP_FILTERS.DATEFILTERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDATEFILTERNull() {
                this[this.tableREP_FILTERS.DATEFILTERColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class REPEAT_SPLIT_TRANSACTIONSRow : global::System.Data.DataRow {
            
            private REPEAT_SPLIT_TRANSACTIONSDataTable tableREPEAT_SPLIT_TRANSACTIONS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal REPEAT_SPLIT_TRANSACTIONSRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableREPEAT_SPLIT_TRANSACTIONS = ((REPEAT_SPLIT_TRANSACTIONSDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long SPLITTRANSID {
                get {
                    return ((long)(this[this.tableREPEAT_SPLIT_TRANSACTIONS.SPLITTRANSIDColumn]));
                }
                set {
                    this[this.tableREPEAT_SPLIT_TRANSACTIONS.SPLITTRANSIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long TRANSID {
                get {
                    return ((long)(this[this.tableREPEAT_SPLIT_TRANSACTIONS.TRANSIDColumn]));
                }
                set {
                    this[this.tableREPEAT_SPLIT_TRANSACTIONS.TRANSIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long CATEGID {
                get {
                    try {
                        return ((long)(this[this.tableREPEAT_SPLIT_TRANSACTIONS.CATEGIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CATEGID\' in table \'REPEAT_SPLIT_TRANSACTIONS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREPEAT_SPLIT_TRANSACTIONS.CATEGIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long SUBCATEGID {
                get {
                    try {
                        return ((long)(this[this.tableREPEAT_SPLIT_TRANSACTIONS.SUBCATEGIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SUBCATEGID\' in table \'REPEAT_SPLIT_TRANSACTIONS\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableREPEAT_SPLIT_TRANSACTIONS.SUBCATEGIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal SPLITTRANSAMOUNT {
                get {
                    try {
                        return ((decimal)(this[this.tableREPEAT_SPLIT_TRANSACTIONS.SPLITTRANSAMOUNTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SPLITTRANSAMOUNT\' in table \'REPEAT_SPLIT_TRANSACTIONS\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableREPEAT_SPLIT_TRANSACTIONS.SPLITTRANSAMOUNTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCATEGIDNull() {
                return this.IsNull(this.tableREPEAT_SPLIT_TRANSACTIONS.CATEGIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCATEGIDNull() {
                this[this.tableREPEAT_SPLIT_TRANSACTIONS.CATEGIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSUBCATEGIDNull() {
                return this.IsNull(this.tableREPEAT_SPLIT_TRANSACTIONS.SUBCATEGIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSUBCATEGIDNull() {
                this[this.tableREPEAT_SPLIT_TRANSACTIONS.SUBCATEGIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSPLITTRANSAMOUNTNull() {
                return this.IsNull(this.tableREPEAT_SPLIT_TRANSACTIONS.SPLITTRANSAMOUNTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSPLITTRANSAMOUNTNull() {
                this[this.tableREPEAT_SPLIT_TRANSACTIONS.SPLITTRANSAMOUNTColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class REPEAT_TRANSACTIONSRow : global::System.Data.DataRow {
            
            private REPEAT_TRANSACTIONSDataTable tableREPEAT_TRANSACTIONS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal REPEAT_TRANSACTIONSRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableREPEAT_TRANSACTIONS = ((REPEAT_TRANSACTIONSDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long REPTRANSID {
                get {
                    return ((long)(this[this.tableREPEAT_TRANSACTIONS.REPTRANSIDColumn]));
                }
                set {
                    this[this.tableREPEAT_TRANSACTIONS.REPTRANSIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long ACCOUNTID {
                get {
                    return ((long)(this[this.tableREPEAT_TRANSACTIONS.ACCOUNTIDColumn]));
                }
                set {
                    this[this.tableREPEAT_TRANSACTIONS.ACCOUNTIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long TOACCOUNTID {
                get {
                    try {
                        return ((long)(this[this.tableREPEAT_TRANSACTIONS.TOACCOUNTIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TOACCOUNTID\' in table \'REPEAT_TRANSACTIONS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREPEAT_TRANSACTIONS.TOACCOUNTIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long PAYEEID {
                get {
                    return ((long)(this[this.tableREPEAT_TRANSACTIONS.PAYEEIDColumn]));
                }
                set {
                    this[this.tableREPEAT_TRANSACTIONS.PAYEEIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TRANSCODE {
                get {
                    return ((string)(this[this.tableREPEAT_TRANSACTIONS.TRANSCODEColumn]));
                }
                set {
                    this[this.tableREPEAT_TRANSACTIONS.TRANSCODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal TRANSAMOUNT {
                get {
                    return ((decimal)(this[this.tableREPEAT_TRANSACTIONS.TRANSAMOUNTColumn]));
                }
                set {
                    this[this.tableREPEAT_TRANSACTIONS.TRANSAMOUNTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string STATUS {
                get {
                    try {
                        return ((string)(this[this.tableREPEAT_TRANSACTIONS.STATUSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'STATUS\' in table \'REPEAT_TRANSACTIONS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREPEAT_TRANSACTIONS.STATUSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TRANSACTIONNUMBER {
                get {
                    try {
                        return ((string)(this[this.tableREPEAT_TRANSACTIONS.TRANSACTIONNUMBERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TRANSACTIONNUMBER\' in table \'REPEAT_TRANSACTIONS\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableREPEAT_TRANSACTIONS.TRANSACTIONNUMBERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string NOTES {
                get {
                    try {
                        return ((string)(this[this.tableREPEAT_TRANSACTIONS.NOTESColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NOTES\' in table \'REPEAT_TRANSACTIONS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREPEAT_TRANSACTIONS.NOTESColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long CATEGID {
                get {
                    try {
                        return ((long)(this[this.tableREPEAT_TRANSACTIONS.CATEGIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CATEGID\' in table \'REPEAT_TRANSACTIONS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREPEAT_TRANSACTIONS.CATEGIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long SUBCATEGID {
                get {
                    try {
                        return ((long)(this[this.tableREPEAT_TRANSACTIONS.SUBCATEGIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SUBCATEGID\' in table \'REPEAT_TRANSACTIONS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREPEAT_TRANSACTIONS.SUBCATEGIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TRANSDATE {
                get {
                    try {
                        return ((string)(this[this.tableREPEAT_TRANSACTIONS.TRANSDATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TRANSDATE\' in table \'REPEAT_TRANSACTIONS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREPEAT_TRANSACTIONS.TRANSDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long FOLLOWUPID {
                get {
                    try {
                        return ((long)(this[this.tableREPEAT_TRANSACTIONS.FOLLOWUPIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FOLLOWUPID\' in table \'REPEAT_TRANSACTIONS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREPEAT_TRANSACTIONS.FOLLOWUPIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal TOTRANSAMOUNT {
                get {
                    try {
                        return ((decimal)(this[this.tableREPEAT_TRANSACTIONS.TOTRANSAMOUNTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TOTRANSAMOUNT\' in table \'REPEAT_TRANSACTIONS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREPEAT_TRANSACTIONS.TOTRANSAMOUNTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long REPEATS {
                get {
                    try {
                        return ((long)(this[this.tableREPEAT_TRANSACTIONS.REPEATSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'REPEATS\' in table \'REPEAT_TRANSACTIONS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREPEAT_TRANSACTIONS.REPEATSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string NEXTOCCURRENCEDATE {
                get {
                    try {
                        return ((string)(this[this.tableREPEAT_TRANSACTIONS.NEXTOCCURRENCEDATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NEXTOCCURRENCEDATE\' in table \'REPEAT_TRANSACTIONS\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableREPEAT_TRANSACTIONS.NEXTOCCURRENCEDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long NUMOCCURRENCES {
                get {
                    try {
                        return ((long)(this[this.tableREPEAT_TRANSACTIONS.NUMOCCURRENCESColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NUMOCCURRENCES\' in table \'REPEAT_TRANSACTIONS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREPEAT_TRANSACTIONS.NUMOCCURRENCESColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string AUTORUN {
                get {
                    try {
                        return ((string)(this[this.tableREPEAT_TRANSACTIONS.AUTORUNColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AUTORUN\' in table \'REPEAT_TRANSACTIONS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREPEAT_TRANSACTIONS.AUTORUNColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string AUTORUNUSER {
                get {
                    try {
                        return ((string)(this[this.tableREPEAT_TRANSACTIONS.AUTORUNUSERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AUTORUNUSER\' in table \'REPEAT_TRANSACTIONS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREPEAT_TRANSACTIONS.AUTORUNUSERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTOACCOUNTIDNull() {
                return this.IsNull(this.tableREPEAT_TRANSACTIONS.TOACCOUNTIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTOACCOUNTIDNull() {
                this[this.tableREPEAT_TRANSACTIONS.TOACCOUNTIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSTATUSNull() {
                return this.IsNull(this.tableREPEAT_TRANSACTIONS.STATUSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSTATUSNull() {
                this[this.tableREPEAT_TRANSACTIONS.STATUSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTRANSACTIONNUMBERNull() {
                return this.IsNull(this.tableREPEAT_TRANSACTIONS.TRANSACTIONNUMBERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTRANSACTIONNUMBERNull() {
                this[this.tableREPEAT_TRANSACTIONS.TRANSACTIONNUMBERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsNOTESNull() {
                return this.IsNull(this.tableREPEAT_TRANSACTIONS.NOTESColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetNOTESNull() {
                this[this.tableREPEAT_TRANSACTIONS.NOTESColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCATEGIDNull() {
                return this.IsNull(this.tableREPEAT_TRANSACTIONS.CATEGIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCATEGIDNull() {
                this[this.tableREPEAT_TRANSACTIONS.CATEGIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSUBCATEGIDNull() {
                return this.IsNull(this.tableREPEAT_TRANSACTIONS.SUBCATEGIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSUBCATEGIDNull() {
                this[this.tableREPEAT_TRANSACTIONS.SUBCATEGIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTRANSDATENull() {
                return this.IsNull(this.tableREPEAT_TRANSACTIONS.TRANSDATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTRANSDATENull() {
                this[this.tableREPEAT_TRANSACTIONS.TRANSDATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsFOLLOWUPIDNull() {
                return this.IsNull(this.tableREPEAT_TRANSACTIONS.FOLLOWUPIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetFOLLOWUPIDNull() {
                this[this.tableREPEAT_TRANSACTIONS.FOLLOWUPIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTOTRANSAMOUNTNull() {
                return this.IsNull(this.tableREPEAT_TRANSACTIONS.TOTRANSAMOUNTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTOTRANSAMOUNTNull() {
                this[this.tableREPEAT_TRANSACTIONS.TOTRANSAMOUNTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsREPEATSNull() {
                return this.IsNull(this.tableREPEAT_TRANSACTIONS.REPEATSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetREPEATSNull() {
                this[this.tableREPEAT_TRANSACTIONS.REPEATSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsNEXTOCCURRENCEDATENull() {
                return this.IsNull(this.tableREPEAT_TRANSACTIONS.NEXTOCCURRENCEDATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetNEXTOCCURRENCEDATENull() {
                this[this.tableREPEAT_TRANSACTIONS.NEXTOCCURRENCEDATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsNUMOCCURRENCESNull() {
                return this.IsNull(this.tableREPEAT_TRANSACTIONS.NUMOCCURRENCESColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetNUMOCCURRENCESNull() {
                this[this.tableREPEAT_TRANSACTIONS.NUMOCCURRENCESColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsAUTORUNNull() {
                return this.IsNull(this.tableREPEAT_TRANSACTIONS.AUTORUNColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetAUTORUNNull() {
                this[this.tableREPEAT_TRANSACTIONS.AUTORUNColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsAUTORUNUSERNull() {
                return this.IsNull(this.tableREPEAT_TRANSACTIONS.AUTORUNUSERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetAUTORUNUSERNull() {
                this[this.tableREPEAT_TRANSACTIONS.AUTORUNUSERColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class SPLIT_TRANSACTIONSRow : global::System.Data.DataRow {
            
            private SPLIT_TRANSACTIONSDataTable tableSPLIT_TRANSACTIONS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal SPLIT_TRANSACTIONSRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSPLIT_TRANSACTIONS = ((SPLIT_TRANSACTIONSDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long SPLITTRANSID {
                get {
                    return ((long)(this[this.tableSPLIT_TRANSACTIONS.SPLITTRANSIDColumn]));
                }
                set {
                    this[this.tableSPLIT_TRANSACTIONS.SPLITTRANSIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long TRANSID {
                get {
                    return ((long)(this[this.tableSPLIT_TRANSACTIONS.TRANSIDColumn]));
                }
                set {
                    this[this.tableSPLIT_TRANSACTIONS.TRANSIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long CATEGID {
                get {
                    try {
                        return ((long)(this[this.tableSPLIT_TRANSACTIONS.CATEGIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CATEGID\' in table \'SPLIT_TRANSACTIONS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPLIT_TRANSACTIONS.CATEGIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long SUBCATEGID {
                get {
                    try {
                        return ((long)(this[this.tableSPLIT_TRANSACTIONS.SUBCATEGIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SUBCATEGID\' in table \'SPLIT_TRANSACTIONS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPLIT_TRANSACTIONS.SUBCATEGIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal SPLITTRANSAMOUNT {
                get {
                    try {
                        return ((decimal)(this[this.tableSPLIT_TRANSACTIONS.SPLITTRANSAMOUNTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SPLITTRANSAMOUNT\' in table \'SPLIT_TRANSACTIONS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPLIT_TRANSACTIONS.SPLITTRANSAMOUNTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCATEGIDNull() {
                return this.IsNull(this.tableSPLIT_TRANSACTIONS.CATEGIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCATEGIDNull() {
                this[this.tableSPLIT_TRANSACTIONS.CATEGIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSUBCATEGIDNull() {
                return this.IsNull(this.tableSPLIT_TRANSACTIONS.SUBCATEGIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSUBCATEGIDNull() {
                this[this.tableSPLIT_TRANSACTIONS.SUBCATEGIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSPLITTRANSAMOUNTNull() {
                return this.IsNull(this.tableSPLIT_TRANSACTIONS.SPLITTRANSAMOUNTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSPLITTRANSAMOUNTNull() {
                this[this.tableSPLIT_TRANSACTIONS.SPLITTRANSAMOUNTColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class SUB_CATEGORIESRow : global::System.Data.DataRow {
            
            private SUB_CATEGORIESDataTable tableSUB_CATEGORIES;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal SUB_CATEGORIESRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSUB_CATEGORIES = ((SUB_CATEGORIESDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long SUBCATEGID {
                get {
                    return ((long)(this[this.tableSUB_CATEGORIES.SUBCATEGIDColumn]));
                }
                set {
                    this[this.tableSUB_CATEGORIES.SUBCATEGIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string SUBCATEGNAME {
                get {
                    return ((string)(this[this.tableSUB_CATEGORIES.SUBCATEGNAMEColumn]));
                }
                set {
                    this[this.tableSUB_CATEGORIES.SUBCATEGNAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long CATEGID {
                get {
                    return ((long)(this[this.tableSUB_CATEGORIES.CATEGIDColumn]));
                }
                set {
                    this[this.tableSUB_CATEGORIES.CATEGIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string INCLUDEBUDGET {
                get {
                    try {
                        return ((string)(this[this.tableSUB_CATEGORIES.INCLUDEBUDGETColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'INCLUDEBUDGET\' in table \'SUB_CATEGORIES\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSUB_CATEGORIES.INCLUDEBUDGETColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsINCLUDEBUDGETNull() {
                return this.IsNull(this.tableSUB_CATEGORIES.INCLUDEBUDGETColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetINCLUDEBUDGETNull() {
                this[this.tableSUB_CATEGORIES.INCLUDEBUDGETColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class TRANS_FILTERSRow : global::System.Data.DataRow {
            
            private TRANS_FILTERSDataTable tableTRANS_FILTERS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal TRANS_FILTERSRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTRANS_FILTERS = ((TRANS_FILTERSDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long TRANSFILTERID {
                get {
                    return ((long)(this[this.tableTRANS_FILTERS.TRANSFILTERIDColumn]));
                }
                set {
                    this[this.tableTRANS_FILTERS.TRANSFILTERIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TRANSFILTERNAME {
                get {
                    return ((string)(this[this.tableTRANS_FILTERS.TRANSFILTERNAMEColumn]));
                }
                set {
                    this[this.tableTRANS_FILTERS.TRANSFILTERNAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string FROMDATE {
                get {
                    try {
                        return ((string)(this[this.tableTRANS_FILTERS.FROMDATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FROMDATE\' in table \'TRANS_FILTERS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTRANS_FILTERS.FROMDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TODATE {
                get {
                    try {
                        return ((string)(this[this.tableTRANS_FILTERS.TODATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TODATE\' in table \'TRANS_FILTERS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTRANS_FILTERS.TODATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TRANSCODE {
                get {
                    try {
                        return ((string)(this[this.tableTRANS_FILTERS.TRANSCODEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TRANSCODE\' in table \'TRANS_FILTERS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTRANS_FILTERS.TRANSCODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal FROMAMOUNT {
                get {
                    try {
                        return ((decimal)(this[this.tableTRANS_FILTERS.FROMAMOUNTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FROMAMOUNT\' in table \'TRANS_FILTERS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTRANS_FILTERS.FROMAMOUNTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal TOAMOUNT {
                get {
                    try {
                        return ((decimal)(this[this.tableTRANS_FILTERS.TOAMOUNTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TOAMOUNT\' in table \'TRANS_FILTERS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTRANS_FILTERS.TOAMOUNTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string PAYEENAME {
                get {
                    try {
                        return ((string)(this[this.tableTRANS_FILTERS.PAYEENAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PAYEENAME\' in table \'TRANS_FILTERS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTRANS_FILTERS.PAYEENAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal CATEGID {
                get {
                    try {
                        return ((decimal)(this[this.tableTRANS_FILTERS.CATEGIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CATEGID\' in table \'TRANS_FILTERS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTRANS_FILTERS.CATEGIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal SUBCATEGID {
                get {
                    try {
                        return ((decimal)(this[this.tableTRANS_FILTERS.SUBCATEGIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SUBCATEGID\' in table \'TRANS_FILTERS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTRANS_FILTERS.SUBCATEGIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ARCHIVED {
                get {
                    try {
                        return ((string)(this[this.tableTRANS_FILTERS.ARCHIVEDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ARCHIVED\' in table \'TRANS_FILTERS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTRANS_FILTERS.ARCHIVEDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal DATEFILTER {
                get {
                    try {
                        return ((decimal)(this[this.tableTRANS_FILTERS.DATEFILTERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DATEFILTER\' in table \'TRANS_FILTERS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTRANS_FILTERS.DATEFILTERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsFROMDATENull() {
                return this.IsNull(this.tableTRANS_FILTERS.FROMDATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetFROMDATENull() {
                this[this.tableTRANS_FILTERS.FROMDATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTODATENull() {
                return this.IsNull(this.tableTRANS_FILTERS.TODATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTODATENull() {
                this[this.tableTRANS_FILTERS.TODATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTRANSCODENull() {
                return this.IsNull(this.tableTRANS_FILTERS.TRANSCODEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTRANSCODENull() {
                this[this.tableTRANS_FILTERS.TRANSCODEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsFROMAMOUNTNull() {
                return this.IsNull(this.tableTRANS_FILTERS.FROMAMOUNTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetFROMAMOUNTNull() {
                this[this.tableTRANS_FILTERS.FROMAMOUNTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTOAMOUNTNull() {
                return this.IsNull(this.tableTRANS_FILTERS.TOAMOUNTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTOAMOUNTNull() {
                this[this.tableTRANS_FILTERS.TOAMOUNTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPAYEENAMENull() {
                return this.IsNull(this.tableTRANS_FILTERS.PAYEENAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPAYEENAMENull() {
                this[this.tableTRANS_FILTERS.PAYEENAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCATEGIDNull() {
                return this.IsNull(this.tableTRANS_FILTERS.CATEGIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCATEGIDNull() {
                this[this.tableTRANS_FILTERS.CATEGIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSUBCATEGIDNull() {
                return this.IsNull(this.tableTRANS_FILTERS.SUBCATEGIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSUBCATEGIDNull() {
                this[this.tableTRANS_FILTERS.SUBCATEGIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsARCHIVEDNull() {
                return this.IsNull(this.tableTRANS_FILTERS.ARCHIVEDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetARCHIVEDNull() {
                this[this.tableTRANS_FILTERS.ARCHIVEDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDATEFILTERNull() {
                return this.IsNull(this.tableTRANS_FILTERS.DATEFILTERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDATEFILTERNull() {
                this[this.tableTRANS_FILTERS.DATEFILTERColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class TRANSACTIONSRow : global::System.Data.DataRow {
            
            private TRANSACTIONSDataTable tableTRANSACTIONS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal TRANSACTIONSRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTRANSACTIONS = ((TRANSACTIONSDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long TRANSID {
                get {
                    return ((long)(this[this.tableTRANSACTIONS.TRANSIDColumn]));
                }
                set {
                    this[this.tableTRANSACTIONS.TRANSIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long ACCOUNTID {
                get {
                    return ((long)(this[this.tableTRANSACTIONS.ACCOUNTIDColumn]));
                }
                set {
                    this[this.tableTRANSACTIONS.ACCOUNTIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long TOACCOUNTID {
                get {
                    try {
                        return ((long)(this[this.tableTRANSACTIONS.TOACCOUNTIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TOACCOUNTID\' in table \'TRANSACTIONS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTRANSACTIONS.TOACCOUNTIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long PAYEEID {
                get {
                    return ((long)(this[this.tableTRANSACTIONS.PAYEEIDColumn]));
                }
                set {
                    this[this.tableTRANSACTIONS.PAYEEIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TRANSCODE {
                get {
                    return ((string)(this[this.tableTRANSACTIONS.TRANSCODEColumn]));
                }
                set {
                    this[this.tableTRANSACTIONS.TRANSCODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal TRANSAMOUNT {
                get {
                    return ((decimal)(this[this.tableTRANSACTIONS.TRANSAMOUNTColumn]));
                }
                set {
                    this[this.tableTRANSACTIONS.TRANSAMOUNTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string STATUS {
                get {
                    try {
                        return ((string)(this[this.tableTRANSACTIONS.STATUSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'STATUS\' in table \'TRANSACTIONS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTRANSACTIONS.STATUSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TRANSACTIONNUMBER {
                get {
                    try {
                        return ((string)(this[this.tableTRANSACTIONS.TRANSACTIONNUMBERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TRANSACTIONNUMBER\' in table \'TRANSACTIONS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTRANSACTIONS.TRANSACTIONNUMBERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string NOTES {
                get {
                    try {
                        return ((string)(this[this.tableTRANSACTIONS.NOTESColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NOTES\' in table \'TRANSACTIONS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTRANSACTIONS.NOTESColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long CATEGID {
                get {
                    try {
                        return ((long)(this[this.tableTRANSACTIONS.CATEGIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CATEGID\' in table \'TRANSACTIONS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTRANSACTIONS.CATEGIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long SUBCATEGID {
                get {
                    try {
                        return ((long)(this[this.tableTRANSACTIONS.SUBCATEGIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SUBCATEGID\' in table \'TRANSACTIONS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTRANSACTIONS.SUBCATEGIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TRANSDATE {
                get {
                    try {
                        return ((string)(this[this.tableTRANSACTIONS.TRANSDATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TRANSDATE\' in table \'TRANSACTIONS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTRANSACTIONS.TRANSDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long FOLLOWUPID {
                get {
                    try {
                        return ((long)(this[this.tableTRANSACTIONS.FOLLOWUPIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FOLLOWUPID\' in table \'TRANSACTIONS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTRANSACTIONS.FOLLOWUPIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal TOTRANSAMOUNT {
                get {
                    try {
                        return ((decimal)(this[this.tableTRANSACTIONS.TOTRANSAMOUNTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TOTRANSAMOUNT\' in table \'TRANSACTIONS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTRANSACTIONS.TOTRANSAMOUNTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTOACCOUNTIDNull() {
                return this.IsNull(this.tableTRANSACTIONS.TOACCOUNTIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTOACCOUNTIDNull() {
                this[this.tableTRANSACTIONS.TOACCOUNTIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSTATUSNull() {
                return this.IsNull(this.tableTRANSACTIONS.STATUSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSTATUSNull() {
                this[this.tableTRANSACTIONS.STATUSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTRANSACTIONNUMBERNull() {
                return this.IsNull(this.tableTRANSACTIONS.TRANSACTIONNUMBERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTRANSACTIONNUMBERNull() {
                this[this.tableTRANSACTIONS.TRANSACTIONNUMBERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsNOTESNull() {
                return this.IsNull(this.tableTRANSACTIONS.NOTESColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetNOTESNull() {
                this[this.tableTRANSACTIONS.NOTESColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCATEGIDNull() {
                return this.IsNull(this.tableTRANSACTIONS.CATEGIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCATEGIDNull() {
                this[this.tableTRANSACTIONS.CATEGIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSUBCATEGIDNull() {
                return this.IsNull(this.tableTRANSACTIONS.SUBCATEGIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSUBCATEGIDNull() {
                this[this.tableTRANSACTIONS.SUBCATEGIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTRANSDATENull() {
                return this.IsNull(this.tableTRANSACTIONS.TRANSDATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTRANSDATENull() {
                this[this.tableTRANSACTIONS.TRANSDATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsFOLLOWUPIDNull() {
                return this.IsNull(this.tableTRANSACTIONS.FOLLOWUPIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetFOLLOWUPIDNull() {
                this[this.tableTRANSACTIONS.FOLLOWUPIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTOTRANSAMOUNTNull() {
                return this.IsNull(this.tableTRANSACTIONS.TOTRANSAMOUNTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTOTRANSAMOUNTNull() {
                this[this.tableTRANSACTIONS.TOTRANSAMOUNTColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class USER_SETTINGSRow : global::System.Data.DataRow {
            
            private USER_SETTINGSDataTable tableUSER_SETTINGS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal USER_SETTINGSRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUSER_SETTINGS = ((USER_SETTINGSDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long INFOID {
                get {
                    return ((long)(this[this.tableUSER_SETTINGS.INFOIDColumn]));
                }
                set {
                    this[this.tableUSER_SETTINGS.INFOIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string INFONAME {
                get {
                    return ((string)(this[this.tableUSER_SETTINGS.INFONAMEColumn]));
                }
                set {
                    this[this.tableUSER_SETTINGS.INFONAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string INFOVALUE {
                get {
                    try {
                        return ((string)(this[this.tableUSER_SETTINGS.INFOVALUEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'INFOVALUE\' in table \'USER_SETTINGS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUSER_SETTINGS.INFOVALUEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsINFOVALUENull() {
                return this.IsNull(this.tableUSER_SETTINGS.INFOVALUEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetINFOVALUENull() {
                this[this.tableUSER_SETTINGS.INFOVALUEColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class ACCOUNTSRowChangeEvent : global::System.EventArgs {
            
            private ACCOUNTSRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ACCOUNTSRowChangeEvent(ACCOUNTSRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ACCOUNTSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class ASSETSRowChangeEvent : global::System.EventArgs {
            
            private ASSETSRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ASSETSRowChangeEvent(ASSETSRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ASSETSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class BUDGET_DETAILRowChangeEvent : global::System.EventArgs {
            
            private BUDGET_DETAILRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public BUDGET_DETAILRowChangeEvent(BUDGET_DETAILRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public BUDGET_DETAILRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class BUDGET_HEADERRowChangeEvent : global::System.EventArgs {
            
            private BUDGET_HEADERRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public BUDGET_HEADERRowChangeEvent(BUDGET_HEADERRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public BUDGET_HEADERRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class CATEGORIESRowChangeEvent : global::System.EventArgs {
            
            private CATEGORIESRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CATEGORIESRowChangeEvent(CATEGORIESRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CATEGORIESRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class GRID_SETTINGSRowChangeEvent : global::System.EventArgs {
            
            private GRID_SETTINGSRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GRID_SETTINGSRowChangeEvent(GRID_SETTINGSRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GRID_SETTINGSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class PAYEE_IMPORTRowChangeEvent : global::System.EventArgs {
            
            private PAYEE_IMPORTRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PAYEE_IMPORTRowChangeEvent(PAYEE_IMPORTRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PAYEE_IMPORTRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class PAYEESRowChangeEvent : global::System.EventArgs {
            
            private PAYEESRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PAYEESRowChangeEvent(PAYEESRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PAYEESRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class REP_FILTERSRowChangeEvent : global::System.EventArgs {
            
            private REP_FILTERSRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public REP_FILTERSRowChangeEvent(REP_FILTERSRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public REP_FILTERSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class REPEAT_SPLIT_TRANSACTIONSRowChangeEvent : global::System.EventArgs {
            
            private REPEAT_SPLIT_TRANSACTIONSRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public REPEAT_SPLIT_TRANSACTIONSRowChangeEvent(REPEAT_SPLIT_TRANSACTIONSRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public REPEAT_SPLIT_TRANSACTIONSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class REPEAT_TRANSACTIONSRowChangeEvent : global::System.EventArgs {
            
            private REPEAT_TRANSACTIONSRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public REPEAT_TRANSACTIONSRowChangeEvent(REPEAT_TRANSACTIONSRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public REPEAT_TRANSACTIONSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class SPLIT_TRANSACTIONSRowChangeEvent : global::System.EventArgs {
            
            private SPLIT_TRANSACTIONSRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public SPLIT_TRANSACTIONSRowChangeEvent(SPLIT_TRANSACTIONSRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public SPLIT_TRANSACTIONSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class SUB_CATEGORIESRowChangeEvent : global::System.EventArgs {
            
            private SUB_CATEGORIESRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public SUB_CATEGORIESRowChangeEvent(SUB_CATEGORIESRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public SUB_CATEGORIESRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class TRANS_FILTERSRowChangeEvent : global::System.EventArgs {
            
            private TRANS_FILTERSRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TRANS_FILTERSRowChangeEvent(TRANS_FILTERSRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TRANS_FILTERSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class TRANSACTIONSRowChangeEvent : global::System.EventArgs {
            
            private TRANSACTIONSRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TRANSACTIONSRowChangeEvent(TRANSACTIONSRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TRANSACTIONSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class USER_SETTINGSRowChangeEvent : global::System.EventArgs {
            
            private USER_SETTINGSRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public USER_SETTINGSRowChangeEvent(USER_SETTINGSRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public USER_SETTINGSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace MoneyManager.creddataDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ACCOUNTSTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::System.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.SQLite.SQLiteTransaction _transaction;
        
        private global::System.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public ACCOUNTSTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ACCOUNTS";
            tableMapping.ColumnMappings.Add("ACCOUNTID", "ACCOUNTID");
            tableMapping.ColumnMappings.Add("ACCOUNTNAME", "ACCOUNTNAME");
            tableMapping.ColumnMappings.Add("ACCOUNTTYPE", "ACCOUNTTYPE");
            tableMapping.ColumnMappings.Add("ACCOUNTNUM", "ACCOUNTNUM");
            tableMapping.ColumnMappings.Add("STATUS", "STATUS");
            tableMapping.ColumnMappings.Add("NOTES", "NOTES");
            tableMapping.ColumnMappings.Add("HELDAT", "HELDAT");
            tableMapping.ColumnMappings.Add("WEBSITE", "WEBSITE");
            tableMapping.ColumnMappings.Add("CONTACTINFO", "CONTACTINFO");
            tableMapping.ColumnMappings.Add("ACCESSINFO", "ACCESSINFO");
            tableMapping.ColumnMappings.Add("INITIALBAL", "INITIALBAL");
            tableMapping.ColumnMappings.Add("FAVORITEACCT", "FAVORITEACCT");
            tableMapping.ColumnMappings.Add("CURRENCYID", "CURRENCYID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [main].[sqlite_default_schema].[ACCOUNTS] WHERE (([ACCOUNTID] = @Original_ACCOUNTID) AND ([ACCOUNTNAME] = @Original_ACCOUNTNAME) AND ([ACCOUNTTYPE] = @Original_ACCOUNTTYPE) AND ((@IsNull_ACCOUNTNUM = 1 AND [ACCOUNTNUM] IS NULL) OR ([ACCOUNTNUM] = @Original_ACCOUNTNUM)) AND ([STATUS] = @Original_STATUS) AND ((@IsNull_NOTES = 1 AND [NOTES] IS NULL) OR ([NOTES] = @Original_NOTES)) AND ((@IsNull_HELDAT = 1 AND [HELDAT] IS NULL) OR ([HELDAT] = @Original_HELDAT)) AND ((@IsNull_WEBSITE = 1 AND [WEBSITE] IS NULL) OR ([WEBSITE] = @Original_WEBSITE)) AND ((@IsNull_CONTACTINFO = 1 AND [CONTACTINFO] IS NULL) OR ([CONTACTINFO] = @Original_CONTACTINFO)) AND ((@IsNull_ACCESSINFO = 1 AND [ACCESSINFO] IS NULL) OR ([ACCESSINFO] = @Original_ACCESSINFO)) AND ((@IsNull_INITIALBAL = 1 AND [INITIALBAL] IS NULL) OR ([INITIALBAL] = @Original_INITIALBAL)) AND ([FAVORITEACCT] = @Original_FAVORITEACCT) AND ([CURRENCYID] = @Original_CURRENCYID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SQLite.SQLiteParameter param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ACCOUNTID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ACCOUNTID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ACCOUNTNAME";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "ACCOUNTNAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ACCOUNTTYPE";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "ACCOUNTTYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ACCOUNTNUM";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ACCOUNTNUM";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ACCOUNTNUM";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "ACCOUNTNUM";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_STATUS";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "STATUS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_NOTES";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "NOTES";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_NOTES";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "NOTES";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_HELDAT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "HELDAT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_HELDAT";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "HELDAT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_WEBSITE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "WEBSITE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_WEBSITE";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "WEBSITE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_CONTACTINFO";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "CONTACTINFO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_CONTACTINFO";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "CONTACTINFO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ACCESSINFO";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ACCESSINFO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ACCESSINFO";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "ACCESSINFO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_INITIALBAL";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "INITIALBAL";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_INITIALBAL";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "INITIALBAL";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_FAVORITEACCT";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "FAVORITEACCT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_CURRENCYID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "CURRENCYID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [main].[sqlite_default_schema].[ACCOUNTS] ([ACCOUNTNAME], [ACCOUNTTYPE], [ACCOUNTNUM], [STATUS], [NOTES], [HELDAT], [WEBSITE], [CONTACTINFO], [ACCESSINFO], [INITIALBAL], [FAVORITEACCT], [CURRENCYID]) VALUES (@ACCOUNTNAME, @ACCOUNTTYPE, @ACCOUNTNUM, @STATUS, @NOTES, @HELDAT, @WEBSITE, @CONTACTINFO, @ACCESSINFO, @INITIALBAL, @FAVORITEACCT, @CURRENCYID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ACCOUNTNAME";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "ACCOUNTNAME";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ACCOUNTTYPE";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "ACCOUNTTYPE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ACCOUNTNUM";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "ACCOUNTNUM";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@STATUS";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "STATUS";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@NOTES";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "NOTES";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@HELDAT";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "HELDAT";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@WEBSITE";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "WEBSITE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@CONTACTINFO";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "CONTACTINFO";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ACCESSINFO";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "ACCESSINFO";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@INITIALBAL";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "INITIALBAL";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@FAVORITEACCT";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "FAVORITEACCT";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@CURRENCYID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "CURRENCYID";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [main].[sqlite_default_schema].[ACCOUNTS] SET [ACCOUNTNAME] = @ACCOUNTNAME, [ACCOUNTTYPE] = @ACCOUNTTYPE, [ACCOUNTNUM] = @ACCOUNTNUM, [STATUS] = @STATUS, [NOTES] = @NOTES, [HELDAT] = @HELDAT, [WEBSITE] = @WEBSITE, [CONTACTINFO] = @CONTACTINFO, [ACCESSINFO] = @ACCESSINFO, [INITIALBAL] = @INITIALBAL, [FAVORITEACCT] = @FAVORITEACCT, [CURRENCYID] = @CURRENCYID WHERE (([ACCOUNTID] = @Original_ACCOUNTID) AND ([ACCOUNTNAME] = @Original_ACCOUNTNAME) AND ([ACCOUNTTYPE] = @Original_ACCOUNTTYPE) AND ((@IsNull_ACCOUNTNUM = 1 AND [ACCOUNTNUM] IS NULL) OR ([ACCOUNTNUM] = @Original_ACCOUNTNUM)) AND ([STATUS] = @Original_STATUS) AND ((@IsNull_NOTES = 1 AND [NOTES] IS NULL) OR ([NOTES] = @Original_NOTES)) AND ((@IsNull_HELDAT = 1 AND [HELDAT] IS NULL) OR ([HELDAT] = @Original_HELDAT)) AND ((@IsNull_WEBSITE = 1 AND [WEBSITE] IS NULL) OR ([WEBSITE] = @Original_WEBSITE)) AND ((@IsNull_CONTACTINFO = 1 AND [CONTACTINFO] IS NULL) OR ([CONTACTINFO] = @Original_CONTACTINFO)) AND ((@IsNull_ACCESSINFO = 1 AND [ACCESSINFO] IS NULL) OR ([ACCESSINFO] = @Original_ACCESSINFO)) AND ((@IsNull_INITIALBAL = 1 AND [INITIALBAL] IS NULL) OR ([INITIALBAL] = @Original_INITIALBAL)) AND ([FAVORITEACCT] = @Original_FAVORITEACCT) AND ([CURRENCYID] = @Original_CURRENCYID))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ACCOUNTNAME";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "ACCOUNTNAME";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ACCOUNTTYPE";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "ACCOUNTTYPE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ACCOUNTNUM";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "ACCOUNTNUM";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@STATUS";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "STATUS";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@NOTES";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "NOTES";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@HELDAT";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "HELDAT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@WEBSITE";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "WEBSITE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@CONTACTINFO";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "CONTACTINFO";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ACCESSINFO";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "ACCESSINFO";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@INITIALBAL";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "INITIALBAL";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@FAVORITEACCT";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "FAVORITEACCT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@CURRENCYID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "CURRENCYID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ACCOUNTID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ACCOUNTID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ACCOUNTNAME";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "ACCOUNTNAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ACCOUNTTYPE";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "ACCOUNTTYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ACCOUNTNUM";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ACCOUNTNUM";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ACCOUNTNUM";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "ACCOUNTNUM";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_STATUS";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "STATUS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_NOTES";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "NOTES";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_NOTES";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "NOTES";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_HELDAT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "HELDAT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_HELDAT";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "HELDAT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_WEBSITE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "WEBSITE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_WEBSITE";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "WEBSITE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_CONTACTINFO";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "CONTACTINFO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_CONTACTINFO";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "CONTACTINFO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ACCESSINFO";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ACCESSINFO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ACCESSINFO";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "ACCESSINFO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_INITIALBAL";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "INITIALBAL";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_INITIALBAL";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "INITIALBAL";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_FAVORITEACCT";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "FAVORITEACCT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_CURRENCYID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "CURRENCYID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = global::MoneyManager.Properties.Settings.Default.creddataCS;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::System.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [ACCOUNTID], [ACCOUNTNAME], [ACCOUNTTYPE], [ACCOUNTNUM], [STATUS], [NOTES]" +
                ", [HELDAT], [WEBSITE], [CONTACTINFO], [ACCESSINFO], [INITIALBAL], [FAVORITEACCT]" +
                ", [CURRENCYID] FROM [ACCOUNTS]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(creddataDataSet.ACCOUNTSDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual creddataDataSet.ACCOUNTSDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            creddataDataSet.ACCOUNTSDataTable dataTable = new creddataDataSet.ACCOUNTSDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(creddataDataSet.ACCOUNTSDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(creddataDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ACCOUNTS");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_ACCOUNTID, string Original_ACCOUNTNAME, string Original_ACCOUNTTYPE, string Original_ACCOUNTNUM, string Original_STATUS, string Original_NOTES, string Original_HELDAT, string Original_WEBSITE, string Original_CONTACTINFO, string Original_ACCESSINFO, global::System.Nullable<decimal> Original_INITIALBAL, string Original_FAVORITEACCT, long Original_CURRENCYID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_ACCOUNTID));
            if ((Original_ACCOUNTNAME == null)) {
                throw new global::System.ArgumentNullException("Original_ACCOUNTNAME");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_ACCOUNTNAME));
            }
            if ((Original_ACCOUNTTYPE == null)) {
                throw new global::System.ArgumentNullException("Original_ACCOUNTTYPE");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_ACCOUNTTYPE));
            }
            if ((Original_ACCOUNTNUM == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_ACCOUNTNUM));
            }
            if ((Original_STATUS == null)) {
                throw new global::System.ArgumentNullException("Original_STATUS");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_STATUS));
            }
            if ((Original_NOTES == null)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_NOTES));
            }
            if ((Original_HELDAT == null)) {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[9].Value = ((string)(Original_HELDAT));
            }
            if ((Original_WEBSITE == null)) {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[11].Value = ((string)(Original_WEBSITE));
            }
            if ((Original_CONTACTINFO == null)) {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[13].Value = ((string)(Original_CONTACTINFO));
            }
            if ((Original_ACCESSINFO == null)) {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[15].Value = ((string)(Original_ACCESSINFO));
            }
            if ((Original_INITIALBAL.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[17].Value = ((decimal)(Original_INITIALBAL.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((Original_FAVORITEACCT == null)) {
                throw new global::System.ArgumentNullException("Original_FAVORITEACCT");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[18].Value = ((string)(Original_FAVORITEACCT));
            }
            this.Adapter.DeleteCommand.Parameters[19].Value = ((long)(Original_CURRENCYID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string ACCOUNTNAME, string ACCOUNTTYPE, string ACCOUNTNUM, string STATUS, string NOTES, string HELDAT, string WEBSITE, string CONTACTINFO, string ACCESSINFO, global::System.Nullable<decimal> INITIALBAL, string FAVORITEACCT, long CURRENCYID) {
            if ((ACCOUNTNAME == null)) {
                throw new global::System.ArgumentNullException("ACCOUNTNAME");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(ACCOUNTNAME));
            }
            if ((ACCOUNTTYPE == null)) {
                throw new global::System.ArgumentNullException("ACCOUNTTYPE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(ACCOUNTTYPE));
            }
            if ((ACCOUNTNUM == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(ACCOUNTNUM));
            }
            if ((STATUS == null)) {
                throw new global::System.ArgumentNullException("STATUS");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(STATUS));
            }
            if ((NOTES == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(NOTES));
            }
            if ((HELDAT == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(HELDAT));
            }
            if ((WEBSITE == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(WEBSITE));
            }
            if ((CONTACTINFO == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(CONTACTINFO));
            }
            if ((ACCESSINFO == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(ACCESSINFO));
            }
            if ((INITIALBAL.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((decimal)(INITIALBAL.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((FAVORITEACCT == null)) {
                throw new global::System.ArgumentNullException("FAVORITEACCT");
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(FAVORITEACCT));
            }
            this.Adapter.InsertCommand.Parameters[11].Value = ((long)(CURRENCYID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string ACCOUNTNAME, 
                    string ACCOUNTTYPE, 
                    string ACCOUNTNUM, 
                    string STATUS, 
                    string NOTES, 
                    string HELDAT, 
                    string WEBSITE, 
                    string CONTACTINFO, 
                    string ACCESSINFO, 
                    global::System.Nullable<decimal> INITIALBAL, 
                    string FAVORITEACCT, 
                    long CURRENCYID, 
                    long Original_ACCOUNTID, 
                    string Original_ACCOUNTNAME, 
                    string Original_ACCOUNTTYPE, 
                    string Original_ACCOUNTNUM, 
                    string Original_STATUS, 
                    string Original_NOTES, 
                    string Original_HELDAT, 
                    string Original_WEBSITE, 
                    string Original_CONTACTINFO, 
                    string Original_ACCESSINFO, 
                    global::System.Nullable<decimal> Original_INITIALBAL, 
                    string Original_FAVORITEACCT, 
                    long Original_CURRENCYID) {
            if ((ACCOUNTNAME == null)) {
                throw new global::System.ArgumentNullException("ACCOUNTNAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(ACCOUNTNAME));
            }
            if ((ACCOUNTTYPE == null)) {
                throw new global::System.ArgumentNullException("ACCOUNTTYPE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(ACCOUNTTYPE));
            }
            if ((ACCOUNTNUM == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(ACCOUNTNUM));
            }
            if ((STATUS == null)) {
                throw new global::System.ArgumentNullException("STATUS");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(STATUS));
            }
            if ((NOTES == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(NOTES));
            }
            if ((HELDAT == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(HELDAT));
            }
            if ((WEBSITE == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(WEBSITE));
            }
            if ((CONTACTINFO == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(CONTACTINFO));
            }
            if ((ACCESSINFO == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(ACCESSINFO));
            }
            if ((INITIALBAL.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((decimal)(INITIALBAL.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((FAVORITEACCT == null)) {
                throw new global::System.ArgumentNullException("FAVORITEACCT");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(FAVORITEACCT));
            }
            this.Adapter.UpdateCommand.Parameters[11].Value = ((long)(CURRENCYID));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((long)(Original_ACCOUNTID));
            if ((Original_ACCOUNTNAME == null)) {
                throw new global::System.ArgumentNullException("Original_ACCOUNTNAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_ACCOUNTNAME));
            }
            if ((Original_ACCOUNTTYPE == null)) {
                throw new global::System.ArgumentNullException("Original_ACCOUNTTYPE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_ACCOUNTTYPE));
            }
            if ((Original_ACCOUNTNUM == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_ACCOUNTNUM));
            }
            if ((Original_STATUS == null)) {
                throw new global::System.ArgumentNullException("Original_STATUS");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(Original_STATUS));
            }
            if ((Original_NOTES == null)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Original_NOTES));
            }
            if ((Original_HELDAT == null)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Original_HELDAT));
            }
            if ((Original_WEBSITE == null)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(Original_WEBSITE));
            }
            if ((Original_CONTACTINFO == null)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[25].Value = ((string)(Original_CONTACTINFO));
            }
            if ((Original_ACCESSINFO == null)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[27].Value = ((string)(Original_ACCESSINFO));
            }
            if ((Original_INITIALBAL.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[29].Value = ((decimal)(Original_INITIALBAL.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            if ((Original_FAVORITEACCT == null)) {
                throw new global::System.ArgumentNullException("Original_FAVORITEACCT");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((string)(Original_FAVORITEACCT));
            }
            this.Adapter.UpdateCommand.Parameters[31].Value = ((long)(Original_CURRENCYID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ASSETSTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::System.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.SQLite.SQLiteTransaction _transaction;
        
        private global::System.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public ASSETSTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ASSETS";
            tableMapping.ColumnMappings.Add("ASSETID", "ASSETID");
            tableMapping.ColumnMappings.Add("STARTDATE", "STARTDATE");
            tableMapping.ColumnMappings.Add("ASSETNAME", "ASSETNAME");
            tableMapping.ColumnMappings.Add("VALUE", "VALUE");
            tableMapping.ColumnMappings.Add("VALUECHANGE", "VALUECHANGE");
            tableMapping.ColumnMappings.Add("NOTES", "NOTES");
            tableMapping.ColumnMappings.Add("VALUECHANGERATE", "VALUECHANGERATE");
            tableMapping.ColumnMappings.Add("ASSETTYPE", "ASSETTYPE");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [main].[sqlite_default_schema].[ASSETS] WHERE (([ASSETID] = @Original_ASSETID) AND ([STARTDATE] = @Original_STARTDATE) AND ([ASSETNAME] = @Original_ASSETNAME) AND ((@IsNull_VALUE = 1 AND [VALUE] IS NULL) OR ([VALUE] = @Original_VALUE)) AND ((@IsNull_VALUECHANGE = 1 AND [VALUECHANGE] IS NULL) OR ([VALUECHANGE] = @Original_VALUECHANGE)) AND ((@IsNull_NOTES = 1 AND [NOTES] IS NULL) OR ([NOTES] = @Original_NOTES)) AND ((@IsNull_VALUECHANGERATE = 1 AND [VALUECHANGERATE] IS NULL) OR ([VALUECHANGERATE] = @Original_VALUECHANGERATE)) AND ((@IsNull_ASSETTYPE = 1 AND [ASSETTYPE] IS NULL) OR ([ASSETTYPE] = @Original_ASSETTYPE)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SQLite.SQLiteParameter param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ASSETID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ASSETID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_STARTDATE";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "STARTDATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ASSETNAME";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "ASSETNAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_VALUE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "VALUE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_VALUE";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "VALUE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_VALUECHANGE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "VALUECHANGE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_VALUECHANGE";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "VALUECHANGE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_NOTES";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "NOTES";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_NOTES";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "NOTES";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_VALUECHANGERATE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "VALUECHANGERATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_VALUECHANGERATE";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "VALUECHANGERATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ASSETTYPE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ASSETTYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ASSETTYPE";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "ASSETTYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [main].[sqlite_default_schema].[ASSETS] ([STARTDATE], [ASSETNAME], [V" +
                "ALUE], [VALUECHANGE], [NOTES], [VALUECHANGERATE], [ASSETTYPE]) VALUES (@STARTDAT" +
                "E, @ASSETNAME, @VALUE, @VALUECHANGE, @NOTES, @VALUECHANGERATE, @ASSETTYPE)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@STARTDATE";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "STARTDATE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ASSETNAME";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "ASSETNAME";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@VALUE";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "VALUE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@VALUECHANGE";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "VALUECHANGE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@NOTES";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "NOTES";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@VALUECHANGERATE";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "VALUECHANGERATE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ASSETTYPE";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "ASSETTYPE";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [main].[sqlite_default_schema].[ASSETS] SET [STARTDATE] = @STARTDATE, [ASSETNAME] = @ASSETNAME, [VALUE] = @VALUE, [VALUECHANGE] = @VALUECHANGE, [NOTES] = @NOTES, [VALUECHANGERATE] = @VALUECHANGERATE, [ASSETTYPE] = @ASSETTYPE WHERE (([ASSETID] = @Original_ASSETID) AND ([STARTDATE] = @Original_STARTDATE) AND ([ASSETNAME] = @Original_ASSETNAME) AND ((@IsNull_VALUE = 1 AND [VALUE] IS NULL) OR ([VALUE] = @Original_VALUE)) AND ((@IsNull_VALUECHANGE = 1 AND [VALUECHANGE] IS NULL) OR ([VALUECHANGE] = @Original_VALUECHANGE)) AND ((@IsNull_NOTES = 1 AND [NOTES] IS NULL) OR ([NOTES] = @Original_NOTES)) AND ((@IsNull_VALUECHANGERATE = 1 AND [VALUECHANGERATE] IS NULL) OR ([VALUECHANGERATE] = @Original_VALUECHANGERATE)) AND ((@IsNull_ASSETTYPE = 1 AND [ASSETTYPE] IS NULL) OR ([ASSETTYPE] = @Original_ASSETTYPE)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@STARTDATE";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "STARTDATE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ASSETNAME";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "ASSETNAME";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@VALUE";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "VALUE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@VALUECHANGE";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "VALUECHANGE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@NOTES";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "NOTES";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@VALUECHANGERATE";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "VALUECHANGERATE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ASSETTYPE";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "ASSETTYPE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ASSETID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ASSETID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_STARTDATE";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "STARTDATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ASSETNAME";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "ASSETNAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_VALUE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "VALUE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_VALUE";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "VALUE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_VALUECHANGE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "VALUECHANGE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_VALUECHANGE";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "VALUECHANGE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_NOTES";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "NOTES";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_NOTES";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "NOTES";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_VALUECHANGERATE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "VALUECHANGERATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_VALUECHANGERATE";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "VALUECHANGERATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ASSETTYPE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ASSETTYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ASSETTYPE";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "ASSETTYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = global::MoneyManager.Properties.Settings.Default.creddataCS;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::System.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [ASSETID], [STARTDATE], [ASSETNAME], [VALUE], [VALUECHANGE], [NOTES], [VAL" +
                "UECHANGERATE], [ASSETTYPE] FROM [ASSETS]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(creddataDataSet.ASSETSDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual creddataDataSet.ASSETSDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            creddataDataSet.ASSETSDataTable dataTable = new creddataDataSet.ASSETSDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(creddataDataSet.ASSETSDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(creddataDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ASSETS");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_ASSETID, string Original_STARTDATE, string Original_ASSETNAME, global::System.Nullable<decimal> Original_VALUE, string Original_VALUECHANGE, string Original_NOTES, global::System.Nullable<decimal> Original_VALUECHANGERATE, string Original_ASSETTYPE) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_ASSETID));
            if ((Original_STARTDATE == null)) {
                throw new global::System.ArgumentNullException("Original_STARTDATE");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_STARTDATE));
            }
            if ((Original_ASSETNAME == null)) {
                throw new global::System.ArgumentNullException("Original_ASSETNAME");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_ASSETNAME));
            }
            if ((Original_VALUE.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((decimal)(Original_VALUE.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Original_VALUECHANGE == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_VALUECHANGE));
            }
            if ((Original_NOTES == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_NOTES));
            }
            if ((Original_VALUECHANGERATE.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((decimal)(Original_VALUECHANGERATE.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Original_ASSETTYPE == null)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_ASSETTYPE));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string STARTDATE, string ASSETNAME, global::System.Nullable<decimal> VALUE, string VALUECHANGE, string NOTES, global::System.Nullable<decimal> VALUECHANGERATE, string ASSETTYPE) {
            if ((STARTDATE == null)) {
                throw new global::System.ArgumentNullException("STARTDATE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(STARTDATE));
            }
            if ((ASSETNAME == null)) {
                throw new global::System.ArgumentNullException("ASSETNAME");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(ASSETNAME));
            }
            if ((VALUE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((decimal)(VALUE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((VALUECHANGE == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(VALUECHANGE));
            }
            if ((NOTES == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(NOTES));
            }
            if ((VALUECHANGERATE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((decimal)(VALUECHANGERATE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((ASSETTYPE == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(ASSETTYPE));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string STARTDATE, string ASSETNAME, global::System.Nullable<decimal> VALUE, string VALUECHANGE, string NOTES, global::System.Nullable<decimal> VALUECHANGERATE, string ASSETTYPE, long Original_ASSETID, string Original_STARTDATE, string Original_ASSETNAME, global::System.Nullable<decimal> Original_VALUE, string Original_VALUECHANGE, string Original_NOTES, global::System.Nullable<decimal> Original_VALUECHANGERATE, string Original_ASSETTYPE) {
            if ((STARTDATE == null)) {
                throw new global::System.ArgumentNullException("STARTDATE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(STARTDATE));
            }
            if ((ASSETNAME == null)) {
                throw new global::System.ArgumentNullException("ASSETNAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(ASSETNAME));
            }
            if ((VALUE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((decimal)(VALUE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((VALUECHANGE == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(VALUECHANGE));
            }
            if ((NOTES == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(NOTES));
            }
            if ((VALUECHANGERATE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((decimal)(VALUECHANGERATE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((ASSETTYPE == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(ASSETTYPE));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((long)(Original_ASSETID));
            if ((Original_STARTDATE == null)) {
                throw new global::System.ArgumentNullException("Original_STARTDATE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_STARTDATE));
            }
            if ((Original_ASSETNAME == null)) {
                throw new global::System.ArgumentNullException("Original_ASSETNAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_ASSETNAME));
            }
            if ((Original_VALUE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[11].Value = ((decimal)(Original_VALUE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((Original_VALUECHANGE == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_VALUECHANGE));
            }
            if ((Original_NOTES == null)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Original_NOTES));
            }
            if ((Original_VALUECHANGERATE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[17].Value = ((decimal)(Original_VALUECHANGERATE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((Original_ASSETTYPE == null)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Original_ASSETTYPE));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class BUDGET_DETAILTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::System.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.SQLite.SQLiteTransaction _transaction;
        
        private global::System.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public BUDGET_DETAILTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "BUDGET_DETAIL";
            tableMapping.ColumnMappings.Add("BUDGETENTRYID", "BUDGETENTRYID");
            tableMapping.ColumnMappings.Add("BUDGETYEARID", "BUDGETYEARID");
            tableMapping.ColumnMappings.Add("CATEGID", "CATEGID");
            tableMapping.ColumnMappings.Add("SUBCATEGID", "SUBCATEGID");
            tableMapping.ColumnMappings.Add("PERIOD", "PERIOD");
            tableMapping.ColumnMappings.Add("AMOUNT", "AMOUNT");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [main].[sqlite_default_schema].[BUDGET_DETAIL] WHERE (([BUDGETENTRYID] = @Original_BUDGETENTRYID) AND ((@IsNull_BUDGETYEARID = 1 AND [BUDGETYEARID] IS NULL) OR ([BUDGETYEARID] = @Original_BUDGETYEARID)) AND ((@IsNull_CATEGID = 1 AND [CATEGID] IS NULL) OR ([CATEGID] = @Original_CATEGID)) AND ((@IsNull_SUBCATEGID = 1 AND [SUBCATEGID] IS NULL) OR ([SUBCATEGID] = @Original_SUBCATEGID)) AND ([PERIOD] = @Original_PERIOD) AND ([AMOUNT] = @Original_AMOUNT))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SQLite.SQLiteParameter param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_BUDGETENTRYID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "BUDGETENTRYID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_BUDGETYEARID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "BUDGETYEARID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_BUDGETYEARID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "BUDGETYEARID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_CATEGID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "CATEGID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_CATEGID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "CATEGID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SUBCATEGID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SUBCATEGID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SUBCATEGID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SUBCATEGID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PERIOD";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "PERIOD";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_AMOUNT";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "AMOUNT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [main].[sqlite_default_schema].[BUDGET_DETAIL] ([BUDGETENTRYID], [BUD" +
                "GETYEARID], [CATEGID], [SUBCATEGID], [PERIOD], [AMOUNT]) VALUES (@BUDGETENTRYID," +
                " @BUDGETYEARID, @CATEGID, @SUBCATEGID, @PERIOD, @AMOUNT)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@BUDGETENTRYID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "BUDGETENTRYID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@BUDGETYEARID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "BUDGETYEARID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@CATEGID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "CATEGID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SUBCATEGID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SUBCATEGID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PERIOD";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "PERIOD";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@AMOUNT";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "AMOUNT";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [main].[sqlite_default_schema].[BUDGET_DETAIL] SET [BUDGETENTRYID] = @BUDGETENTRYID, [BUDGETYEARID] = @BUDGETYEARID, [CATEGID] = @CATEGID, [SUBCATEGID] = @SUBCATEGID, [PERIOD] = @PERIOD, [AMOUNT] = @AMOUNT WHERE (([BUDGETENTRYID] = @Original_BUDGETENTRYID) AND ((@IsNull_BUDGETYEARID = 1 AND [BUDGETYEARID] IS NULL) OR ([BUDGETYEARID] = @Original_BUDGETYEARID)) AND ((@IsNull_CATEGID = 1 AND [CATEGID] IS NULL) OR ([CATEGID] = @Original_CATEGID)) AND ((@IsNull_SUBCATEGID = 1 AND [SUBCATEGID] IS NULL) OR ([SUBCATEGID] = @Original_SUBCATEGID)) AND ([PERIOD] = @Original_PERIOD) AND ([AMOUNT] = @Original_AMOUNT))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@BUDGETENTRYID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "BUDGETENTRYID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@BUDGETYEARID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "BUDGETYEARID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@CATEGID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "CATEGID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SUBCATEGID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SUBCATEGID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PERIOD";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "PERIOD";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@AMOUNT";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "AMOUNT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_BUDGETENTRYID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "BUDGETENTRYID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_BUDGETYEARID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "BUDGETYEARID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_BUDGETYEARID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "BUDGETYEARID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_CATEGID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "CATEGID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_CATEGID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "CATEGID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SUBCATEGID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SUBCATEGID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SUBCATEGID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SUBCATEGID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PERIOD";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "PERIOD";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_AMOUNT";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "AMOUNT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = global::MoneyManager.Properties.Settings.Default.creddataCS;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::System.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [BUDGETENTRYID], [BUDGETYEARID], [CATEGID], [SUBCATEGID], [PERIOD], [AMOUN" +
                "T] FROM [BUDGET_DETAIL]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(creddataDataSet.BUDGET_DETAILDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual creddataDataSet.BUDGET_DETAILDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            creddataDataSet.BUDGET_DETAILDataTable dataTable = new creddataDataSet.BUDGET_DETAILDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(creddataDataSet.BUDGET_DETAILDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(creddataDataSet dataSet) {
            return this.Adapter.Update(dataSet, "BUDGET_DETAIL");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_BUDGETENTRYID, global::System.Nullable<long> Original_BUDGETYEARID, global::System.Nullable<long> Original_CATEGID, global::System.Nullable<long> Original_SUBCATEGID, string Original_PERIOD, decimal Original_AMOUNT) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_BUDGETENTRYID));
            if ((Original_BUDGETYEARID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((long)(Original_BUDGETYEARID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((Original_CATEGID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((long)(Original_CATEGID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Original_SUBCATEGID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((long)(Original_SUBCATEGID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Original_PERIOD == null)) {
                throw new global::System.ArgumentNullException("Original_PERIOD");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_PERIOD));
            }
            this.Adapter.DeleteCommand.Parameters[8].Value = ((decimal)(Original_AMOUNT));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(long BUDGETENTRYID, global::System.Nullable<long> BUDGETYEARID, global::System.Nullable<long> CATEGID, global::System.Nullable<long> SUBCATEGID, string PERIOD, decimal AMOUNT) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((long)(BUDGETENTRYID));
            if ((BUDGETYEARID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((long)(BUDGETYEARID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((CATEGID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((long)(CATEGID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((SUBCATEGID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((long)(SUBCATEGID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((PERIOD == null)) {
                throw new global::System.ArgumentNullException("PERIOD");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(PERIOD));
            }
            this.Adapter.InsertCommand.Parameters[5].Value = ((decimal)(AMOUNT));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(long BUDGETENTRYID, global::System.Nullable<long> BUDGETYEARID, global::System.Nullable<long> CATEGID, global::System.Nullable<long> SUBCATEGID, string PERIOD, decimal AMOUNT, long Original_BUDGETENTRYID, global::System.Nullable<long> Original_BUDGETYEARID, global::System.Nullable<long> Original_CATEGID, global::System.Nullable<long> Original_SUBCATEGID, string Original_PERIOD, decimal Original_AMOUNT) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(BUDGETENTRYID));
            if ((BUDGETYEARID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((long)(BUDGETYEARID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((CATEGID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((long)(CATEGID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((SUBCATEGID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((long)(SUBCATEGID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((PERIOD == null)) {
                throw new global::System.ArgumentNullException("PERIOD");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(PERIOD));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((decimal)(AMOUNT));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((long)(Original_BUDGETENTRYID));
            if ((Original_BUDGETYEARID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[8].Value = ((long)(Original_BUDGETYEARID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Original_CATEGID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[10].Value = ((long)(Original_CATEGID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Original_SUBCATEGID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[12].Value = ((long)(Original_SUBCATEGID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Original_PERIOD == null)) {
                throw new global::System.ArgumentNullException("Original_PERIOD");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_PERIOD));
            }
            this.Adapter.UpdateCommand.Parameters[14].Value = ((decimal)(Original_AMOUNT));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(global::System.Nullable<long> BUDGETYEARID, global::System.Nullable<long> CATEGID, global::System.Nullable<long> SUBCATEGID, string PERIOD, decimal AMOUNT, long Original_BUDGETENTRYID, global::System.Nullable<long> Original_BUDGETYEARID, global::System.Nullable<long> Original_CATEGID, global::System.Nullable<long> Original_SUBCATEGID, string Original_PERIOD, decimal Original_AMOUNT) {
            return this.Update(Original_BUDGETENTRYID, BUDGETYEARID, CATEGID, SUBCATEGID, PERIOD, AMOUNT, Original_BUDGETENTRYID, Original_BUDGETYEARID, Original_CATEGID, Original_SUBCATEGID, Original_PERIOD, Original_AMOUNT);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class BUDGET_HEADERTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::System.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.SQLite.SQLiteTransaction _transaction;
        
        private global::System.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public BUDGET_HEADERTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "BUDGET_HEADER";
            tableMapping.ColumnMappings.Add("BUDGETYEARID", "BUDGETYEARID");
            tableMapping.ColumnMappings.Add("BUDGETYEARNAME", "BUDGETYEARNAME");
            tableMapping.ColumnMappings.Add("BUDGETFREQUENCY", "BUDGETFREQUENCY");
            tableMapping.ColumnMappings.Add("BUDGETYEAR", "BUDGETYEAR");
            tableMapping.ColumnMappings.Add("BUDGETMONTH", "BUDGETMONTH");
            tableMapping.ColumnMappings.Add("ARCHIVED", "ARCHIVED");
            tableMapping.ColumnMappings.Add("BUDGETACCOUNT", "BUDGETACCOUNT");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [main].[sqlite_default_schema].[BUDGET_HEADER] WHERE (([BUDGETYEARID] = @Original_BUDGETYEARID) AND ([BUDGETYEARNAME] = @Original_BUDGETYEARNAME) AND ((@IsNull_BUDGETFREQUENCY = 1 AND [BUDGETFREQUENCY] IS NULL) OR ([BUDGETFREQUENCY] = @Original_BUDGETFREQUENCY)) AND ((@IsNull_BUDGETYEAR = 1 AND [BUDGETYEAR] IS NULL) OR ([BUDGETYEAR] = @Original_BUDGETYEAR)) AND ((@IsNull_BUDGETMONTH = 1 AND [BUDGETMONTH] IS NULL) OR ([BUDGETMONTH] = @Original_BUDGETMONTH)) AND ((@IsNull_ARCHIVED = 1 AND [ARCHIVED] IS NULL) OR ([ARCHIVED] = @Original_ARCHIVED)) AND ((@IsNull_BUDGETACCOUNT = 1 AND [BUDGETACCOUNT] IS NULL) OR ([BUDGETACCOUNT] = @Original_BUDGETACCOUNT)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SQLite.SQLiteParameter param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_BUDGETYEARID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "BUDGETYEARID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_BUDGETYEARNAME";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "BUDGETYEARNAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_BUDGETFREQUENCY";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "BUDGETFREQUENCY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_BUDGETFREQUENCY";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "BUDGETFREQUENCY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_BUDGETYEAR";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "BUDGETYEAR";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_BUDGETYEAR";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "BUDGETYEAR";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_BUDGETMONTH";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "BUDGETMONTH";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_BUDGETMONTH";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "BUDGETMONTH";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ARCHIVED";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ARCHIVED";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ARCHIVED";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "ARCHIVED";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_BUDGETACCOUNT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "BUDGETACCOUNT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_BUDGETACCOUNT";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "BUDGETACCOUNT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [main].[sqlite_default_schema].[BUDGET_HEADER] ([BUDGETYEARID], [BUDGETYEARNAME], [BUDGETFREQUENCY], [BUDGETYEAR], [BUDGETMONTH], [ARCHIVED], [BUDGETACCOUNT]) VALUES (@BUDGETYEARID, @BUDGETYEARNAME, @BUDGETFREQUENCY, @BUDGETYEAR, @BUDGETMONTH, @ARCHIVED, @BUDGETACCOUNT)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@BUDGETYEARID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "BUDGETYEARID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@BUDGETYEARNAME";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "BUDGETYEARNAME";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@BUDGETFREQUENCY";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "BUDGETFREQUENCY";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@BUDGETYEAR";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "BUDGETYEAR";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@BUDGETMONTH";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "BUDGETMONTH";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ARCHIVED";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "ARCHIVED";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@BUDGETACCOUNT";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "BUDGETACCOUNT";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [main].[sqlite_default_schema].[BUDGET_HEADER] SET [BUDGETYEARID] = @BUDGETYEARID, [BUDGETYEARNAME] = @BUDGETYEARNAME, [BUDGETFREQUENCY] = @BUDGETFREQUENCY, [BUDGETYEAR] = @BUDGETYEAR, [BUDGETMONTH] = @BUDGETMONTH, [ARCHIVED] = @ARCHIVED, [BUDGETACCOUNT] = @BUDGETACCOUNT WHERE (([BUDGETYEARID] = @Original_BUDGETYEARID) AND ([BUDGETYEARNAME] = @Original_BUDGETYEARNAME) AND ((@IsNull_BUDGETFREQUENCY = 1 AND [BUDGETFREQUENCY] IS NULL) OR ([BUDGETFREQUENCY] = @Original_BUDGETFREQUENCY)) AND ((@IsNull_BUDGETYEAR = 1 AND [BUDGETYEAR] IS NULL) OR ([BUDGETYEAR] = @Original_BUDGETYEAR)) AND ((@IsNull_BUDGETMONTH = 1 AND [BUDGETMONTH] IS NULL) OR ([BUDGETMONTH] = @Original_BUDGETMONTH)) AND ((@IsNull_ARCHIVED = 1 AND [ARCHIVED] IS NULL) OR ([ARCHIVED] = @Original_ARCHIVED)) AND ((@IsNull_BUDGETACCOUNT = 1 AND [BUDGETACCOUNT] IS NULL) OR ([BUDGETACCOUNT] = @Original_BUDGETACCOUNT)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@BUDGETYEARID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "BUDGETYEARID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@BUDGETYEARNAME";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "BUDGETYEARNAME";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@BUDGETFREQUENCY";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "BUDGETFREQUENCY";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@BUDGETYEAR";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "BUDGETYEAR";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@BUDGETMONTH";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "BUDGETMONTH";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ARCHIVED";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "ARCHIVED";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@BUDGETACCOUNT";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "BUDGETACCOUNT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_BUDGETYEARID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "BUDGETYEARID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_BUDGETYEARNAME";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "BUDGETYEARNAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_BUDGETFREQUENCY";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "BUDGETFREQUENCY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_BUDGETFREQUENCY";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "BUDGETFREQUENCY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_BUDGETYEAR";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "BUDGETYEAR";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_BUDGETYEAR";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "BUDGETYEAR";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_BUDGETMONTH";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "BUDGETMONTH";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_BUDGETMONTH";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "BUDGETMONTH";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ARCHIVED";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ARCHIVED";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ARCHIVED";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "ARCHIVED";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_BUDGETACCOUNT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "BUDGETACCOUNT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_BUDGETACCOUNT";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "BUDGETACCOUNT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = global::MoneyManager.Properties.Settings.Default.creddataCS;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::System.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [BUDGETYEARID], [BUDGETYEARNAME], [BUDGETFREQUENCY], [BUDGETYEAR], [BUDGET" +
                "MONTH], [ARCHIVED], [BUDGETACCOUNT] FROM [BUDGET_HEADER]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(creddataDataSet.BUDGET_HEADERDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual creddataDataSet.BUDGET_HEADERDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            creddataDataSet.BUDGET_HEADERDataTable dataTable = new creddataDataSet.BUDGET_HEADERDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(creddataDataSet.BUDGET_HEADERDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(creddataDataSet dataSet) {
            return this.Adapter.Update(dataSet, "BUDGET_HEADER");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_BUDGETYEARID, string Original_BUDGETYEARNAME, string Original_BUDGETFREQUENCY, string Original_BUDGETYEAR, string Original_BUDGETMONTH, string Original_ARCHIVED, string Original_BUDGETACCOUNT) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_BUDGETYEARID));
            if ((Original_BUDGETYEARNAME == null)) {
                throw new global::System.ArgumentNullException("Original_BUDGETYEARNAME");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_BUDGETYEARNAME));
            }
            if ((Original_BUDGETFREQUENCY == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_BUDGETFREQUENCY));
            }
            if ((Original_BUDGETYEAR == null)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_BUDGETYEAR));
            }
            if ((Original_BUDGETMONTH == null)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_BUDGETMONTH));
            }
            if ((Original_ARCHIVED == null)) {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[9].Value = ((string)(Original_ARCHIVED));
            }
            if ((Original_BUDGETACCOUNT == null)) {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[11].Value = ((string)(Original_BUDGETACCOUNT));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(long BUDGETYEARID, string BUDGETYEARNAME, string BUDGETFREQUENCY, string BUDGETYEAR, string BUDGETMONTH, string ARCHIVED, string BUDGETACCOUNT) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((long)(BUDGETYEARID));
            if ((BUDGETYEARNAME == null)) {
                throw new global::System.ArgumentNullException("BUDGETYEARNAME");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(BUDGETYEARNAME));
            }
            if ((BUDGETFREQUENCY == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(BUDGETFREQUENCY));
            }
            if ((BUDGETYEAR == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(BUDGETYEAR));
            }
            if ((BUDGETMONTH == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(BUDGETMONTH));
            }
            if ((ARCHIVED == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(ARCHIVED));
            }
            if ((BUDGETACCOUNT == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(BUDGETACCOUNT));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(long BUDGETYEARID, string BUDGETYEARNAME, string BUDGETFREQUENCY, string BUDGETYEAR, string BUDGETMONTH, string ARCHIVED, string BUDGETACCOUNT, long Original_BUDGETYEARID, string Original_BUDGETYEARNAME, string Original_BUDGETFREQUENCY, string Original_BUDGETYEAR, string Original_BUDGETMONTH, string Original_ARCHIVED, string Original_BUDGETACCOUNT) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(BUDGETYEARID));
            if ((BUDGETYEARNAME == null)) {
                throw new global::System.ArgumentNullException("BUDGETYEARNAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(BUDGETYEARNAME));
            }
            if ((BUDGETFREQUENCY == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(BUDGETFREQUENCY));
            }
            if ((BUDGETYEAR == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(BUDGETYEAR));
            }
            if ((BUDGETMONTH == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(BUDGETMONTH));
            }
            if ((ARCHIVED == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(ARCHIVED));
            }
            if ((BUDGETACCOUNT == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(BUDGETACCOUNT));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((long)(Original_BUDGETYEARID));
            if ((Original_BUDGETYEARNAME == null)) {
                throw new global::System.ArgumentNullException("Original_BUDGETYEARNAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_BUDGETYEARNAME));
            }
            if ((Original_BUDGETFREQUENCY == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_BUDGETFREQUENCY));
            }
            if ((Original_BUDGETYEAR == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_BUDGETYEAR));
            }
            if ((Original_BUDGETMONTH == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_BUDGETMONTH));
            }
            if ((Original_ARCHIVED == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_ARCHIVED));
            }
            if ((Original_BUDGETACCOUNT == null)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(Original_BUDGETACCOUNT));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string BUDGETYEARNAME, string BUDGETFREQUENCY, string BUDGETYEAR, string BUDGETMONTH, string ARCHIVED, string BUDGETACCOUNT, long Original_BUDGETYEARID, string Original_BUDGETYEARNAME, string Original_BUDGETFREQUENCY, string Original_BUDGETYEAR, string Original_BUDGETMONTH, string Original_ARCHIVED, string Original_BUDGETACCOUNT) {
            return this.Update(Original_BUDGETYEARID, BUDGETYEARNAME, BUDGETFREQUENCY, BUDGETYEAR, BUDGETMONTH, ARCHIVED, BUDGETACCOUNT, Original_BUDGETYEARID, Original_BUDGETYEARNAME, Original_BUDGETFREQUENCY, Original_BUDGETYEAR, Original_BUDGETMONTH, Original_ARCHIVED, Original_BUDGETACCOUNT);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class CATEGORIESTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::System.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.SQLite.SQLiteTransaction _transaction;
        
        private global::System.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public CATEGORIESTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "CATEGORIES";
            tableMapping.ColumnMappings.Add("CATEGID", "CATEGID");
            tableMapping.ColumnMappings.Add("CATEGNAME", "CATEGNAME");
            tableMapping.ColumnMappings.Add("COLOUR", "COLOUR");
            tableMapping.ColumnMappings.Add("INCLUDEBUDGET", "INCLUDEBUDGET");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [main].[sqlite_default_schema].[CATEGORIES] WHERE (([CATEGID] = @Original_CATEGID) AND ([CATEGNAME] = @Original_CATEGNAME) AND ((@IsNull_COLOUR = 1 AND [COLOUR] IS NULL) OR ([COLOUR] = @Original_COLOUR)) AND ((@IsNull_INCLUDEBUDGET = 1 AND [INCLUDEBUDGET] IS NULL) OR ([INCLUDEBUDGET] = @Original_INCLUDEBUDGET)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SQLite.SQLiteParameter param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_CATEGID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "CATEGID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_CATEGNAME";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "CATEGNAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_COLOUR";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "COLOUR";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_COLOUR";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "COLOUR";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_INCLUDEBUDGET";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "INCLUDEBUDGET";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_INCLUDEBUDGET";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "INCLUDEBUDGET";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [main].[sqlite_default_schema].[CATEGORIES] ([CATEGNAME], [COLOUR], [" +
                "INCLUDEBUDGET]) VALUES (@CATEGNAME, @COLOUR, @INCLUDEBUDGET)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@CATEGNAME";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "CATEGNAME";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@COLOUR";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "COLOUR";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@INCLUDEBUDGET";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "INCLUDEBUDGET";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [main].[sqlite_default_schema].[CATEGORIES] SET [CATEGNAME] = @CATEGNAME, [COLOUR] = @COLOUR, [INCLUDEBUDGET] = @INCLUDEBUDGET WHERE (([CATEGID] = @Original_CATEGID) AND ([CATEGNAME] = @Original_CATEGNAME) AND ((@IsNull_COLOUR = 1 AND [COLOUR] IS NULL) OR ([COLOUR] = @Original_COLOUR)) AND ((@IsNull_INCLUDEBUDGET = 1 AND [INCLUDEBUDGET] IS NULL) OR ([INCLUDEBUDGET] = @Original_INCLUDEBUDGET)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@CATEGNAME";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "CATEGNAME";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@COLOUR";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "COLOUR";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@INCLUDEBUDGET";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "INCLUDEBUDGET";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_CATEGID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "CATEGID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_CATEGNAME";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "CATEGNAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_COLOUR";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "COLOUR";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_COLOUR";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "COLOUR";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_INCLUDEBUDGET";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "INCLUDEBUDGET";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_INCLUDEBUDGET";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "INCLUDEBUDGET";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = global::MoneyManager.Properties.Settings.Default.creddataCS;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::System.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [CATEGID], [CATEGNAME], [COLOUR], [INCLUDEBUDGET] FROM [CATEGORIES]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(creddataDataSet.CATEGORIESDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual creddataDataSet.CATEGORIESDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            creddataDataSet.CATEGORIESDataTable dataTable = new creddataDataSet.CATEGORIESDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(creddataDataSet.CATEGORIESDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(creddataDataSet dataSet) {
            return this.Adapter.Update(dataSet, "CATEGORIES");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_CATEGID, string Original_CATEGNAME, string Original_COLOUR, string Original_INCLUDEBUDGET) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_CATEGID));
            if ((Original_CATEGNAME == null)) {
                throw new global::System.ArgumentNullException("Original_CATEGNAME");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_CATEGNAME));
            }
            if ((Original_COLOUR == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_COLOUR));
            }
            if ((Original_INCLUDEBUDGET == null)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_INCLUDEBUDGET));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string CATEGNAME, string COLOUR, string INCLUDEBUDGET) {
            if ((CATEGNAME == null)) {
                throw new global::System.ArgumentNullException("CATEGNAME");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(CATEGNAME));
            }
            if ((COLOUR == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(COLOUR));
            }
            if ((INCLUDEBUDGET == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(INCLUDEBUDGET));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string CATEGNAME, string COLOUR, string INCLUDEBUDGET, long Original_CATEGID, string Original_CATEGNAME, string Original_COLOUR, string Original_INCLUDEBUDGET) {
            if ((CATEGNAME == null)) {
                throw new global::System.ArgumentNullException("CATEGNAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(CATEGNAME));
            }
            if ((COLOUR == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(COLOUR));
            }
            if ((INCLUDEBUDGET == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(INCLUDEBUDGET));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((long)(Original_CATEGID));
            if ((Original_CATEGNAME == null)) {
                throw new global::System.ArgumentNullException("Original_CATEGNAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_CATEGNAME));
            }
            if ((Original_COLOUR == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_COLOUR));
            }
            if ((Original_INCLUDEBUDGET == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_INCLUDEBUDGET));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class GRID_SETTINGSTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::System.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.SQLite.SQLiteTransaction _transaction;
        
        private global::System.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public GRID_SETTINGSTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "GRID_SETTINGS";
            tableMapping.ColumnMappings.Add("GRIDSETTINGSID", "GRIDSETTINGSID");
            tableMapping.ColumnMappings.Add("GRIDNAME", "GRIDNAME");
            tableMapping.ColumnMappings.Add("FIELDNAME", "FIELDNAME");
            tableMapping.ColumnMappings.Add("COLUMNINDEX", "COLUMNINDEX");
            tableMapping.ColumnMappings.Add("COLUMNWIDTH", "COLUMNWIDTH");
            tableMapping.ColumnMappings.Add("VISIBLE", "VISIBLE");
            tableMapping.ColumnMappings.Add("CAPTION", "CAPTION");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [main].[sqlite_default_schema].[GRID_SETTINGS] WHERE (([GRIDSETTINGSID] = @Original_GRIDSETTINGSID) AND ((@IsNull_GRIDNAME = 1 AND [GRIDNAME] IS NULL) OR ([GRIDNAME] = @Original_GRIDNAME)) AND ((@IsNull_FIELDNAME = 1 AND [FIELDNAME] IS NULL) OR ([FIELDNAME] = @Original_FIELDNAME)) AND ((@IsNull_COLUMNINDEX = 1 AND [COLUMNINDEX] IS NULL) OR ([COLUMNINDEX] = @Original_COLUMNINDEX)) AND ((@IsNull_COLUMNWIDTH = 1 AND [COLUMNWIDTH] IS NULL) OR ([COLUMNWIDTH] = @Original_COLUMNWIDTH)) AND ((@IsNull_VISIBLE = 1 AND [VISIBLE] IS NULL) OR ([VISIBLE] = @Original_VISIBLE)) AND ((@IsNull_CAPTION = 1 AND [CAPTION] IS NULL) OR ([CAPTION] = @Original_CAPTION)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SQLite.SQLiteParameter param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_GRIDSETTINGSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "GRIDSETTINGSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_GRIDNAME";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "GRIDNAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_GRIDNAME";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "GRIDNAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_FIELDNAME";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "FIELDNAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_FIELDNAME";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "FIELDNAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_COLUMNINDEX";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "COLUMNINDEX";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_COLUMNINDEX";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "COLUMNINDEX";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_COLUMNWIDTH";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "COLUMNWIDTH";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_COLUMNWIDTH";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "COLUMNWIDTH";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_VISIBLE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "VISIBLE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_VISIBLE";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "VISIBLE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_CAPTION";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "CAPTION";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_CAPTION";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "CAPTION";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [main].[sqlite_default_schema].[GRID_SETTINGS] ([GRIDSETTINGSID], [GR" +
                "IDNAME], [FIELDNAME], [COLUMNINDEX], [COLUMNWIDTH], [VISIBLE], [CAPTION]) VALUES" +
                " (@GRIDSETTINGSID, @GRIDNAME, @FIELDNAME, @COLUMNINDEX, @COLUMNWIDTH, @VISIBLE, " +
                "@CAPTION)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@GRIDSETTINGSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "GRIDSETTINGSID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@GRIDNAME";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "GRIDNAME";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@FIELDNAME";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "FIELDNAME";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@COLUMNINDEX";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "COLUMNINDEX";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@COLUMNWIDTH";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "COLUMNWIDTH";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@VISIBLE";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "VISIBLE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@CAPTION";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "CAPTION";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [main].[sqlite_default_schema].[GRID_SETTINGS] SET [GRIDSETTINGSID] = @GRIDSETTINGSID, [GRIDNAME] = @GRIDNAME, [FIELDNAME] = @FIELDNAME, [COLUMNINDEX] = @COLUMNINDEX, [COLUMNWIDTH] = @COLUMNWIDTH, [VISIBLE] = @VISIBLE, [CAPTION] = @CAPTION WHERE (([GRIDSETTINGSID] = @Original_GRIDSETTINGSID) AND ((@IsNull_GRIDNAME = 1 AND [GRIDNAME] IS NULL) OR ([GRIDNAME] = @Original_GRIDNAME)) AND ((@IsNull_FIELDNAME = 1 AND [FIELDNAME] IS NULL) OR ([FIELDNAME] = @Original_FIELDNAME)) AND ((@IsNull_COLUMNINDEX = 1 AND [COLUMNINDEX] IS NULL) OR ([COLUMNINDEX] = @Original_COLUMNINDEX)) AND ((@IsNull_COLUMNWIDTH = 1 AND [COLUMNWIDTH] IS NULL) OR ([COLUMNWIDTH] = @Original_COLUMNWIDTH)) AND ((@IsNull_VISIBLE = 1 AND [VISIBLE] IS NULL) OR ([VISIBLE] = @Original_VISIBLE)) AND ((@IsNull_CAPTION = 1 AND [CAPTION] IS NULL) OR ([CAPTION] = @Original_CAPTION)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@GRIDSETTINGSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "GRIDSETTINGSID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@GRIDNAME";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "GRIDNAME";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@FIELDNAME";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "FIELDNAME";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@COLUMNINDEX";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "COLUMNINDEX";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@COLUMNWIDTH";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "COLUMNWIDTH";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@VISIBLE";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "VISIBLE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@CAPTION";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "CAPTION";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_GRIDSETTINGSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "GRIDSETTINGSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_GRIDNAME";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "GRIDNAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_GRIDNAME";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "GRIDNAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_FIELDNAME";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "FIELDNAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_FIELDNAME";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "FIELDNAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_COLUMNINDEX";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "COLUMNINDEX";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_COLUMNINDEX";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "COLUMNINDEX";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_COLUMNWIDTH";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "COLUMNWIDTH";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_COLUMNWIDTH";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "COLUMNWIDTH";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_VISIBLE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "VISIBLE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_VISIBLE";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "VISIBLE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_CAPTION";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "CAPTION";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_CAPTION";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "CAPTION";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = global::MoneyManager.Properties.Settings.Default.creddataCS;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::System.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [GRIDSETTINGSID], [GRIDNAME], [FIELDNAME], [COLUMNINDEX], [COLUMNWIDTH], [" +
                "VISIBLE], [CAPTION] FROM [GRID_SETTINGS]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(creddataDataSet.GRID_SETTINGSDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual creddataDataSet.GRID_SETTINGSDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            creddataDataSet.GRID_SETTINGSDataTable dataTable = new creddataDataSet.GRID_SETTINGSDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(creddataDataSet.GRID_SETTINGSDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(creddataDataSet dataSet) {
            return this.Adapter.Update(dataSet, "GRID_SETTINGS");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_GRIDSETTINGSID, string Original_GRIDNAME, string Original_FIELDNAME, global::System.Nullable<long> Original_COLUMNINDEX, global::System.Nullable<long> Original_COLUMNWIDTH, string Original_VISIBLE, string Original_CAPTION) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_GRIDSETTINGSID));
            if ((Original_GRIDNAME == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_GRIDNAME));
            }
            if ((Original_FIELDNAME == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_FIELDNAME));
            }
            if ((Original_COLUMNINDEX.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((long)(Original_COLUMNINDEX.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Original_COLUMNWIDTH.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((long)(Original_COLUMNWIDTH.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Original_VISIBLE == null)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_VISIBLE));
            }
            if ((Original_CAPTION == null)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_CAPTION));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(long GRIDSETTINGSID, string GRIDNAME, string FIELDNAME, global::System.Nullable<long> COLUMNINDEX, global::System.Nullable<long> COLUMNWIDTH, string VISIBLE, string CAPTION) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((long)(GRIDSETTINGSID));
            if ((GRIDNAME == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(GRIDNAME));
            }
            if ((FIELDNAME == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(FIELDNAME));
            }
            if ((COLUMNINDEX.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((long)(COLUMNINDEX.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((COLUMNWIDTH.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((long)(COLUMNWIDTH.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((VISIBLE == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(VISIBLE));
            }
            if ((CAPTION == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(CAPTION));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(long GRIDSETTINGSID, string GRIDNAME, string FIELDNAME, global::System.Nullable<long> COLUMNINDEX, global::System.Nullable<long> COLUMNWIDTH, string VISIBLE, string CAPTION, long Original_GRIDSETTINGSID, string Original_GRIDNAME, string Original_FIELDNAME, global::System.Nullable<long> Original_COLUMNINDEX, global::System.Nullable<long> Original_COLUMNWIDTH, string Original_VISIBLE, string Original_CAPTION) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(GRIDSETTINGSID));
            if ((GRIDNAME == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(GRIDNAME));
            }
            if ((FIELDNAME == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(FIELDNAME));
            }
            if ((COLUMNINDEX.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((long)(COLUMNINDEX.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((COLUMNWIDTH.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((long)(COLUMNWIDTH.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((VISIBLE == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(VISIBLE));
            }
            if ((CAPTION == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(CAPTION));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((long)(Original_GRIDSETTINGSID));
            if ((Original_GRIDNAME == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_GRIDNAME));
            }
            if ((Original_FIELDNAME == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_FIELDNAME));
            }
            if ((Original_COLUMNINDEX.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[13].Value = ((long)(Original_COLUMNINDEX.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((Original_COLUMNWIDTH.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[15].Value = ((long)(Original_COLUMNWIDTH.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((Original_VISIBLE == null)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(Original_VISIBLE));
            }
            if ((Original_CAPTION == null)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Original_CAPTION));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string GRIDNAME, string FIELDNAME, global::System.Nullable<long> COLUMNINDEX, global::System.Nullable<long> COLUMNWIDTH, string VISIBLE, string CAPTION, long Original_GRIDSETTINGSID, string Original_GRIDNAME, string Original_FIELDNAME, global::System.Nullable<long> Original_COLUMNINDEX, global::System.Nullable<long> Original_COLUMNWIDTH, string Original_VISIBLE, string Original_CAPTION) {
            return this.Update(Original_GRIDSETTINGSID, GRIDNAME, FIELDNAME, COLUMNINDEX, COLUMNWIDTH, VISIBLE, CAPTION, Original_GRIDSETTINGSID, Original_GRIDNAME, Original_FIELDNAME, Original_COLUMNINDEX, Original_COLUMNWIDTH, Original_VISIBLE, Original_CAPTION);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class PAYEE_IMPORTTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::System.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.SQLite.SQLiteTransaction _transaction;
        
        private global::System.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public PAYEE_IMPORTTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "PAYEE_IMPORT";
            tableMapping.ColumnMappings.Add("PAYEEIMPORTID", "PAYEEIMPORTID");
            tableMapping.ColumnMappings.Add("MATCHTEXT", "MATCHTEXT");
            tableMapping.ColumnMappings.Add("PAYEEID", "PAYEEID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [main].[sqlite_default_schema].[PAYEE_IMPORT] WHERE (([PAYEEIMPORTID] = @Original_PAYEEIMPORTID) AND ((@IsNull_MATCHTEXT = 1 AND [MATCHTEXT] IS NULL) OR ([MATCHTEXT] = @Original_MATCHTEXT)) AND ((@IsNull_PAYEEID = 1 AND [PAYEEID] IS NULL) OR ([PAYEEID] = @Original_PAYEEID)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SQLite.SQLiteParameter param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PAYEEIMPORTID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "PAYEEIMPORTID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_MATCHTEXT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "MATCHTEXT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_MATCHTEXT";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "MATCHTEXT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_PAYEEID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "PAYEEID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PAYEEID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "PAYEEID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [main].[sqlite_default_schema].[PAYEE_IMPORT] ([MATCHTEXT], [PAYEEID]" +
                ") VALUES (@MATCHTEXT, @PAYEEID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@MATCHTEXT";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "MATCHTEXT";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PAYEEID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "PAYEEID";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [main].[sqlite_default_schema].[PAYEE_IMPORT] SET [MATCHTEXT] = @MATCHTEXT, [PAYEEID] = @PAYEEID WHERE (([PAYEEIMPORTID] = @Original_PAYEEIMPORTID) AND ((@IsNull_MATCHTEXT = 1 AND [MATCHTEXT] IS NULL) OR ([MATCHTEXT] = @Original_MATCHTEXT)) AND ((@IsNull_PAYEEID = 1 AND [PAYEEID] IS NULL) OR ([PAYEEID] = @Original_PAYEEID)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@MATCHTEXT";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "MATCHTEXT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PAYEEID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "PAYEEID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PAYEEIMPORTID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "PAYEEIMPORTID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_MATCHTEXT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "MATCHTEXT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_MATCHTEXT";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "MATCHTEXT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_PAYEEID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "PAYEEID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PAYEEID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "PAYEEID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = global::MoneyManager.Properties.Settings.Default.creddataCS;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::System.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [PAYEEIMPORTID], [MATCHTEXT], [PAYEEID] FROM [PAYEE_IMPORT]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(creddataDataSet.PAYEE_IMPORTDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual creddataDataSet.PAYEE_IMPORTDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            creddataDataSet.PAYEE_IMPORTDataTable dataTable = new creddataDataSet.PAYEE_IMPORTDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(creddataDataSet.PAYEE_IMPORTDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(creddataDataSet dataSet) {
            return this.Adapter.Update(dataSet, "PAYEE_IMPORT");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_PAYEEIMPORTID, string Original_MATCHTEXT, global::System.Nullable<long> Original_PAYEEID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_PAYEEIMPORTID));
            if ((Original_MATCHTEXT == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_MATCHTEXT));
            }
            if ((Original_PAYEEID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((long)(Original_PAYEEID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string MATCHTEXT, global::System.Nullable<long> PAYEEID) {
            if ((MATCHTEXT == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(MATCHTEXT));
            }
            if ((PAYEEID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((long)(PAYEEID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string MATCHTEXT, global::System.Nullable<long> PAYEEID, long Original_PAYEEIMPORTID, string Original_MATCHTEXT, global::System.Nullable<long> Original_PAYEEID) {
            if ((MATCHTEXT == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(MATCHTEXT));
            }
            if ((PAYEEID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((long)(PAYEEID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((long)(Original_PAYEEIMPORTID));
            if ((Original_MATCHTEXT == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_MATCHTEXT));
            }
            if ((Original_PAYEEID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[6].Value = ((long)(Original_PAYEEID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class PAYEESTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::System.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.SQLite.SQLiteTransaction _transaction;
        
        private global::System.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public PAYEESTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "PAYEES";
            tableMapping.ColumnMappings.Add("PAYEEID", "PAYEEID");
            tableMapping.ColumnMappings.Add("PAYEENAME", "PAYEENAME");
            tableMapping.ColumnMappings.Add("CATEGID", "CATEGID");
            tableMapping.ColumnMappings.Add("SUBCATEGID", "SUBCATEGID");
            tableMapping.ColumnMappings.Add("COLOUR", "COLOUR");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [main].[sqlite_default_schema].[PAYEES] WHERE (([PAYEEID] = @Original_PAYEEID) AND ([PAYEENAME] = @Original_PAYEENAME) AND ((@IsNull_CATEGID = 1 AND [CATEGID] IS NULL) OR ([CATEGID] = @Original_CATEGID)) AND ((@IsNull_SUBCATEGID = 1 AND [SUBCATEGID] IS NULL) OR ([SUBCATEGID] = @Original_SUBCATEGID)) AND ((@IsNull_COLOUR = 1 AND [COLOUR] IS NULL) OR ([COLOUR] = @Original_COLOUR)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SQLite.SQLiteParameter param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PAYEEID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "PAYEEID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PAYEENAME";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "PAYEENAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_CATEGID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "CATEGID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_CATEGID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "CATEGID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SUBCATEGID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SUBCATEGID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SUBCATEGID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SUBCATEGID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_COLOUR";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "COLOUR";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_COLOUR";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "COLOUR";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [main].[sqlite_default_schema].[PAYEES] ([PAYEENAME], [CATEGID], [SUB" +
                "CATEGID], [COLOUR]) VALUES (@PAYEENAME, @CATEGID, @SUBCATEGID, @COLOUR)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PAYEENAME";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "PAYEENAME";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@CATEGID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "CATEGID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SUBCATEGID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SUBCATEGID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@COLOUR";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "COLOUR";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [main].[sqlite_default_schema].[PAYEES] SET [PAYEENAME] = @PAYEENAME, [CATEGID] = @CATEGID, [SUBCATEGID] = @SUBCATEGID, [COLOUR] = @COLOUR WHERE (([PAYEEID] = @Original_PAYEEID) AND ([PAYEENAME] = @Original_PAYEENAME) AND ((@IsNull_CATEGID = 1 AND [CATEGID] IS NULL) OR ([CATEGID] = @Original_CATEGID)) AND ((@IsNull_SUBCATEGID = 1 AND [SUBCATEGID] IS NULL) OR ([SUBCATEGID] = @Original_SUBCATEGID)) AND ((@IsNull_COLOUR = 1 AND [COLOUR] IS NULL) OR ([COLOUR] = @Original_COLOUR)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PAYEENAME";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "PAYEENAME";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@CATEGID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "CATEGID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SUBCATEGID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SUBCATEGID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@COLOUR";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "COLOUR";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PAYEEID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "PAYEEID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PAYEENAME";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "PAYEENAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_CATEGID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "CATEGID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_CATEGID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "CATEGID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SUBCATEGID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SUBCATEGID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SUBCATEGID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SUBCATEGID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_COLOUR";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "COLOUR";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_COLOUR";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "COLOUR";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = global::MoneyManager.Properties.Settings.Default.creddataCS;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::System.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [PAYEEID], [PAYEENAME], [CATEGID], [SUBCATEGID], [COLOUR] FROM [PAYEES]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(creddataDataSet.PAYEESDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual creddataDataSet.PAYEESDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            creddataDataSet.PAYEESDataTable dataTable = new creddataDataSet.PAYEESDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(creddataDataSet.PAYEESDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(creddataDataSet dataSet) {
            return this.Adapter.Update(dataSet, "PAYEES");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_PAYEEID, string Original_PAYEENAME, global::System.Nullable<long> Original_CATEGID, global::System.Nullable<long> Original_SUBCATEGID, string Original_COLOUR) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_PAYEEID));
            if ((Original_PAYEENAME == null)) {
                throw new global::System.ArgumentNullException("Original_PAYEENAME");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_PAYEENAME));
            }
            if ((Original_CATEGID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((long)(Original_CATEGID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((Original_SUBCATEGID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((long)(Original_SUBCATEGID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((Original_COLOUR == null)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_COLOUR));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string PAYEENAME, global::System.Nullable<long> CATEGID, global::System.Nullable<long> SUBCATEGID, string COLOUR) {
            if ((PAYEENAME == null)) {
                throw new global::System.ArgumentNullException("PAYEENAME");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(PAYEENAME));
            }
            if ((CATEGID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((long)(CATEGID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((SUBCATEGID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((long)(SUBCATEGID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((COLOUR == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(COLOUR));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string PAYEENAME, global::System.Nullable<long> CATEGID, global::System.Nullable<long> SUBCATEGID, string COLOUR, long Original_PAYEEID, string Original_PAYEENAME, global::System.Nullable<long> Original_CATEGID, global::System.Nullable<long> Original_SUBCATEGID, string Original_COLOUR) {
            if ((PAYEENAME == null)) {
                throw new global::System.ArgumentNullException("PAYEENAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(PAYEENAME));
            }
            if ((CATEGID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((long)(CATEGID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((SUBCATEGID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((long)(SUBCATEGID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((COLOUR == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(COLOUR));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((long)(Original_PAYEEID));
            if ((Original_PAYEENAME == null)) {
                throw new global::System.ArgumentNullException("Original_PAYEENAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_PAYEENAME));
            }
            if ((Original_CATEGID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[7].Value = ((long)(Original_CATEGID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((Original_SUBCATEGID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[9].Value = ((long)(Original_SUBCATEGID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((Original_COLOUR == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_COLOUR));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class REP_FILTERSTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::System.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.SQLite.SQLiteTransaction _transaction;
        
        private global::System.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public REP_FILTERSTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "REP_FILTERS";
            tableMapping.ColumnMappings.Add("REPFILTERID", "REPFILTERID");
            tableMapping.ColumnMappings.Add("REPFILTERNAME", "REPFILTERNAME");
            tableMapping.ColumnMappings.Add("FROMDATE", "FROMDATE");
            tableMapping.ColumnMappings.Add("TODATE", "TODATE");
            tableMapping.ColumnMappings.Add("TRANSCODE", "TRANSCODE");
            tableMapping.ColumnMappings.Add("FROMAMOUNT", "FROMAMOUNT");
            tableMapping.ColumnMappings.Add("TOAMOUNT", "TOAMOUNT");
            tableMapping.ColumnMappings.Add("PAYEENAME", "PAYEENAME");
            tableMapping.ColumnMappings.Add("CATEGID", "CATEGID");
            tableMapping.ColumnMappings.Add("SUBCATEGID", "SUBCATEGID");
            tableMapping.ColumnMappings.Add("ARCHIVED", "ARCHIVED");
            tableMapping.ColumnMappings.Add("DATEFILTER", "DATEFILTER");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [main].[sqlite_default_schema].[REP_FILTERS] WHERE (([REPFILTERID] = @Original_REPFILTERID) AND ([REPFILTERNAME] = @Original_REPFILTERNAME) AND ((@IsNull_FROMDATE = 1 AND [FROMDATE] IS NULL) OR ([FROMDATE] = @Original_FROMDATE)) AND ((@IsNull_TODATE = 1 AND [TODATE] IS NULL) OR ([TODATE] = @Original_TODATE)) AND ((@IsNull_TRANSCODE = 1 AND [TRANSCODE] IS NULL) OR ([TRANSCODE] = @Original_TRANSCODE)) AND ((@IsNull_FROMAMOUNT = 1 AND [FROMAMOUNT] IS NULL) OR ([FROMAMOUNT] = @Original_FROMAMOUNT)) AND ((@IsNull_TOAMOUNT = 1 AND [TOAMOUNT] IS NULL) OR ([TOAMOUNT] = @Original_TOAMOUNT)) AND ((@IsNull_PAYEENAME = 1 AND [PAYEENAME] IS NULL) OR ([PAYEENAME] = @Original_PAYEENAME)) AND ((@IsNull_CATEGID = 1 AND [CATEGID] IS NULL) OR ([CATEGID] = @Original_CATEGID)) AND ((@IsNull_SUBCATEGID = 1 AND [SUBCATEGID] IS NULL) OR ([SUBCATEGID] = @Original_SUBCATEGID)) AND ((@IsNull_ARCHIVED = 1 AND [ARCHIVED] IS NULL) OR ([ARCHIVED] = @Original_ARCHIVED)) AND ((@IsNull_DATEFILTER = 1 AND [DATEFILTER] IS NULL) OR ([DATEFILTER] = @Original_DATEFILTER)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SQLite.SQLiteParameter param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_REPFILTERID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "REPFILTERID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_REPFILTERNAME";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "REPFILTERNAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_FROMDATE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "FROMDATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_FROMDATE";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "FROMDATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TODATE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TODATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TODATE";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "TODATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TRANSCODE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TRANSCODE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TRANSCODE";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "TRANSCODE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_FROMAMOUNT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "FROMAMOUNT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_FROMAMOUNT";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "FROMAMOUNT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TOAMOUNT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TOAMOUNT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TOAMOUNT";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "TOAMOUNT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_PAYEENAME";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "PAYEENAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PAYEENAME";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "PAYEENAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_CATEGID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "CATEGID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_CATEGID";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "CATEGID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SUBCATEGID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SUBCATEGID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SUBCATEGID";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "SUBCATEGID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ARCHIVED";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ARCHIVED";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ARCHIVED";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "ARCHIVED";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DATEFILTER";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DATEFILTER";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DATEFILTER";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "DATEFILTER";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [main].[sqlite_default_schema].[REP_FILTERS] ([REPFILTERNAME], [FROMDATE], [TODATE], [TRANSCODE], [FROMAMOUNT], [TOAMOUNT], [PAYEENAME], [CATEGID], [SUBCATEGID], [ARCHIVED], [DATEFILTER]) VALUES (@REPFILTERNAME, @FROMDATE, @TODATE, @TRANSCODE, @FROMAMOUNT, @TOAMOUNT, @PAYEENAME, @CATEGID, @SUBCATEGID, @ARCHIVED, @DATEFILTER)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@REPFILTERNAME";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "REPFILTERNAME";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@FROMDATE";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "FROMDATE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TODATE";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "TODATE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TRANSCODE";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "TRANSCODE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@FROMAMOUNT";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "FROMAMOUNT";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TOAMOUNT";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "TOAMOUNT";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PAYEENAME";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "PAYEENAME";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@CATEGID";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "CATEGID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SUBCATEGID";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "SUBCATEGID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ARCHIVED";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "ARCHIVED";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DATEFILTER";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "DATEFILTER";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [main].[sqlite_default_schema].[REP_FILTERS] SET [REPFILTERNAME] = @REPFILTERNAME, [FROMDATE] = @FROMDATE, [TODATE] = @TODATE, [TRANSCODE] = @TRANSCODE, [FROMAMOUNT] = @FROMAMOUNT, [TOAMOUNT] = @TOAMOUNT, [PAYEENAME] = @PAYEENAME, [CATEGID] = @CATEGID, [SUBCATEGID] = @SUBCATEGID, [ARCHIVED] = @ARCHIVED, [DATEFILTER] = @DATEFILTER WHERE (([REPFILTERID] = @Original_REPFILTERID) AND ([REPFILTERNAME] = @Original_REPFILTERNAME) AND ((@IsNull_FROMDATE = 1 AND [FROMDATE] IS NULL) OR ([FROMDATE] = @Original_FROMDATE)) AND ((@IsNull_TODATE = 1 AND [TODATE] IS NULL) OR ([TODATE] = @Original_TODATE)) AND ((@IsNull_TRANSCODE = 1 AND [TRANSCODE] IS NULL) OR ([TRANSCODE] = @Original_TRANSCODE)) AND ((@IsNull_FROMAMOUNT = 1 AND [FROMAMOUNT] IS NULL) OR ([FROMAMOUNT] = @Original_FROMAMOUNT)) AND ((@IsNull_TOAMOUNT = 1 AND [TOAMOUNT] IS NULL) OR ([TOAMOUNT] = @Original_TOAMOUNT)) AND ((@IsNull_PAYEENAME = 1 AND [PAYEENAME] IS NULL) OR ([PAYEENAME] = @Original_PAYEENAME)) AND ((@IsNull_CATEGID = 1 AND [CATEGID] IS NULL) OR ([CATEGID] = @Original_CATEGID)) AND ((@IsNull_SUBCATEGID = 1 AND [SUBCATEGID] IS NULL) OR ([SUBCATEGID] = @Original_SUBCATEGID)) AND ((@IsNull_ARCHIVED = 1 AND [ARCHIVED] IS NULL) OR ([ARCHIVED] = @Original_ARCHIVED)) AND ((@IsNull_DATEFILTER = 1 AND [DATEFILTER] IS NULL) OR ([DATEFILTER] = @Original_DATEFILTER)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@REPFILTERNAME";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "REPFILTERNAME";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@FROMDATE";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "FROMDATE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TODATE";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "TODATE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TRANSCODE";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "TRANSCODE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@FROMAMOUNT";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "FROMAMOUNT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TOAMOUNT";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "TOAMOUNT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PAYEENAME";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "PAYEENAME";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@CATEGID";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "CATEGID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SUBCATEGID";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "SUBCATEGID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ARCHIVED";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "ARCHIVED";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DATEFILTER";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "DATEFILTER";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_REPFILTERID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "REPFILTERID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_REPFILTERNAME";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "REPFILTERNAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_FROMDATE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "FROMDATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_FROMDATE";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "FROMDATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TODATE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TODATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TODATE";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "TODATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TRANSCODE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TRANSCODE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TRANSCODE";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "TRANSCODE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_FROMAMOUNT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "FROMAMOUNT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_FROMAMOUNT";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "FROMAMOUNT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TOAMOUNT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TOAMOUNT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TOAMOUNT";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "TOAMOUNT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_PAYEENAME";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "PAYEENAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PAYEENAME";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "PAYEENAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_CATEGID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "CATEGID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_CATEGID";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "CATEGID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SUBCATEGID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SUBCATEGID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SUBCATEGID";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "SUBCATEGID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ARCHIVED";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ARCHIVED";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ARCHIVED";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "ARCHIVED";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DATEFILTER";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DATEFILTER";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DATEFILTER";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "DATEFILTER";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = global::MoneyManager.Properties.Settings.Default.creddataCS;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::System.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [REPFILTERID], [REPFILTERNAME], [FROMDATE], [TODATE], [TRANSCODE], [FROMAM" +
                "OUNT], [TOAMOUNT], [PAYEENAME], [CATEGID], [SUBCATEGID], [ARCHIVED], [DATEFILTER" +
                "] FROM [REP_FILTERS]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(creddataDataSet.REP_FILTERSDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual creddataDataSet.REP_FILTERSDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            creddataDataSet.REP_FILTERSDataTable dataTable = new creddataDataSet.REP_FILTERSDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(creddataDataSet.REP_FILTERSDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(creddataDataSet dataSet) {
            return this.Adapter.Update(dataSet, "REP_FILTERS");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_REPFILTERID, string Original_REPFILTERNAME, string Original_FROMDATE, string Original_TODATE, string Original_TRANSCODE, global::System.Nullable<decimal> Original_FROMAMOUNT, global::System.Nullable<decimal> Original_TOAMOUNT, string Original_PAYEENAME, global::System.Nullable<decimal> Original_CATEGID, global::System.Nullable<decimal> Original_SUBCATEGID, string Original_ARCHIVED, global::System.Nullable<decimal> Original_DATEFILTER) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_REPFILTERID));
            if ((Original_REPFILTERNAME == null)) {
                throw new global::System.ArgumentNullException("Original_REPFILTERNAME");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_REPFILTERNAME));
            }
            if ((Original_FROMDATE == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_FROMDATE));
            }
            if ((Original_TODATE == null)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_TODATE));
            }
            if ((Original_TRANSCODE == null)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_TRANSCODE));
            }
            if ((Original_FROMAMOUNT.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[9].Value = ((decimal)(Original_FROMAMOUNT.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((Original_TOAMOUNT.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[11].Value = ((decimal)(Original_TOAMOUNT.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((Original_PAYEENAME == null)) {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[13].Value = ((string)(Original_PAYEENAME));
            }
            if ((Original_CATEGID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[15].Value = ((decimal)(Original_CATEGID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((Original_SUBCATEGID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[17].Value = ((decimal)(Original_SUBCATEGID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((Original_ARCHIVED == null)) {
                this.Adapter.DeleteCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[19].Value = ((string)(Original_ARCHIVED));
            }
            if ((Original_DATEFILTER.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[20].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[21].Value = ((decimal)(Original_DATEFILTER.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[20].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string REPFILTERNAME, string FROMDATE, string TODATE, string TRANSCODE, global::System.Nullable<decimal> FROMAMOUNT, global::System.Nullable<decimal> TOAMOUNT, string PAYEENAME, global::System.Nullable<decimal> CATEGID, global::System.Nullable<decimal> SUBCATEGID, string ARCHIVED, global::System.Nullable<decimal> DATEFILTER) {
            if ((REPFILTERNAME == null)) {
                throw new global::System.ArgumentNullException("REPFILTERNAME");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(REPFILTERNAME));
            }
            if ((FROMDATE == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(FROMDATE));
            }
            if ((TODATE == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(TODATE));
            }
            if ((TRANSCODE == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(TRANSCODE));
            }
            if ((FROMAMOUNT.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((decimal)(FROMAMOUNT.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((TOAMOUNT.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((decimal)(TOAMOUNT.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((PAYEENAME == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(PAYEENAME));
            }
            if ((CATEGID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((decimal)(CATEGID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((SUBCATEGID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((decimal)(SUBCATEGID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((ARCHIVED == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(ARCHIVED));
            }
            if ((DATEFILTER.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((decimal)(DATEFILTER.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string REPFILTERNAME, 
                    string FROMDATE, 
                    string TODATE, 
                    string TRANSCODE, 
                    global::System.Nullable<decimal> FROMAMOUNT, 
                    global::System.Nullable<decimal> TOAMOUNT, 
                    string PAYEENAME, 
                    global::System.Nullable<decimal> CATEGID, 
                    global::System.Nullable<decimal> SUBCATEGID, 
                    string ARCHIVED, 
                    global::System.Nullable<decimal> DATEFILTER, 
                    long Original_REPFILTERID, 
                    string Original_REPFILTERNAME, 
                    string Original_FROMDATE, 
                    string Original_TODATE, 
                    string Original_TRANSCODE, 
                    global::System.Nullable<decimal> Original_FROMAMOUNT, 
                    global::System.Nullable<decimal> Original_TOAMOUNT, 
                    string Original_PAYEENAME, 
                    global::System.Nullable<decimal> Original_CATEGID, 
                    global::System.Nullable<decimal> Original_SUBCATEGID, 
                    string Original_ARCHIVED, 
                    global::System.Nullable<decimal> Original_DATEFILTER) {
            if ((REPFILTERNAME == null)) {
                throw new global::System.ArgumentNullException("REPFILTERNAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(REPFILTERNAME));
            }
            if ((FROMDATE == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(FROMDATE));
            }
            if ((TODATE == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(TODATE));
            }
            if ((TRANSCODE == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(TRANSCODE));
            }
            if ((FROMAMOUNT.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((decimal)(FROMAMOUNT.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((TOAMOUNT.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((decimal)(TOAMOUNT.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((PAYEENAME == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(PAYEENAME));
            }
            if ((CATEGID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((decimal)(CATEGID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((SUBCATEGID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((decimal)(SUBCATEGID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((ARCHIVED == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(ARCHIVED));
            }
            if ((DATEFILTER.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((decimal)(DATEFILTER.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[11].Value = ((long)(Original_REPFILTERID));
            if ((Original_REPFILTERNAME == null)) {
                throw new global::System.ArgumentNullException("Original_REPFILTERNAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_REPFILTERNAME));
            }
            if ((Original_FROMDATE == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_FROMDATE));
            }
            if ((Original_TODATE == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_TODATE));
            }
            if ((Original_TRANSCODE == null)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(Original_TRANSCODE));
            }
            if ((Original_FROMAMOUNT.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[20].Value = ((decimal)(Original_FROMAMOUNT.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((Original_TOAMOUNT.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[22].Value = ((decimal)(Original_TOAMOUNT.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((Original_PAYEENAME == null)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(Original_PAYEENAME));
            }
            if ((Original_CATEGID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[26].Value = ((decimal)(Original_CATEGID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((Original_SUBCATEGID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[28].Value = ((decimal)(Original_SUBCATEGID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((Original_ARCHIVED == null)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[30].Value = ((string)(Original_ARCHIVED));
            }
            if ((Original_DATEFILTER.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[32].Value = ((decimal)(Original_DATEFILTER.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class REPEAT_SPLIT_TRANSACTIONSTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::System.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.SQLite.SQLiteTransaction _transaction;
        
        private global::System.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public REPEAT_SPLIT_TRANSACTIONSTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "REPEAT_SPLIT_TRANSACTIONS";
            tableMapping.ColumnMappings.Add("SPLITTRANSID", "SPLITTRANSID");
            tableMapping.ColumnMappings.Add("TRANSID", "TRANSID");
            tableMapping.ColumnMappings.Add("CATEGID", "CATEGID");
            tableMapping.ColumnMappings.Add("SUBCATEGID", "SUBCATEGID");
            tableMapping.ColumnMappings.Add("SPLITTRANSAMOUNT", "SPLITTRANSAMOUNT");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [main].[sqlite_default_schema].[REPEAT_SPLIT_TRANSACTIONS] WHERE (([SPLITTRANSID] = @Original_SPLITTRANSID) AND ([TRANSID] = @Original_TRANSID) AND ((@IsNull_CATEGID = 1 AND [CATEGID] IS NULL) OR ([CATEGID] = @Original_CATEGID)) AND ((@IsNull_SUBCATEGID = 1 AND [SUBCATEGID] IS NULL) OR ([SUBCATEGID] = @Original_SUBCATEGID)) AND ((@IsNull_SPLITTRANSAMOUNT = 1 AND [SPLITTRANSAMOUNT] IS NULL) OR ([SPLITTRANSAMOUNT] = @Original_SPLITTRANSAMOUNT)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SQLite.SQLiteParameter param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SPLITTRANSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SPLITTRANSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TRANSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "TRANSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_CATEGID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "CATEGID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_CATEGID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "CATEGID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SUBCATEGID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SUBCATEGID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SUBCATEGID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SUBCATEGID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SPLITTRANSAMOUNT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SPLITTRANSAMOUNT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SPLITTRANSAMOUNT";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "SPLITTRANSAMOUNT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [main].[sqlite_default_schema].[REPEAT_SPLIT_TRANSACTIONS] ([SPLITTRA" +
                "NSID], [TRANSID], [CATEGID], [SUBCATEGID], [SPLITTRANSAMOUNT]) VALUES (@SPLITTRA" +
                "NSID, @TRANSID, @CATEGID, @SUBCATEGID, @SPLITTRANSAMOUNT)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SPLITTRANSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SPLITTRANSID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TRANSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "TRANSID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@CATEGID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "CATEGID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SUBCATEGID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SUBCATEGID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SPLITTRANSAMOUNT";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "SPLITTRANSAMOUNT";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [main].[sqlite_default_schema].[REPEAT_SPLIT_TRANSACTIONS] SET [SPLITTRANSID] = @SPLITTRANSID, [TRANSID] = @TRANSID, [CATEGID] = @CATEGID, [SUBCATEGID] = @SUBCATEGID, [SPLITTRANSAMOUNT] = @SPLITTRANSAMOUNT WHERE (([SPLITTRANSID] = @Original_SPLITTRANSID) AND ([TRANSID] = @Original_TRANSID) AND ((@IsNull_CATEGID = 1 AND [CATEGID] IS NULL) OR ([CATEGID] = @Original_CATEGID)) AND ((@IsNull_SUBCATEGID = 1 AND [SUBCATEGID] IS NULL) OR ([SUBCATEGID] = @Original_SUBCATEGID)) AND ((@IsNull_SPLITTRANSAMOUNT = 1 AND [SPLITTRANSAMOUNT] IS NULL) OR ([SPLITTRANSAMOUNT] = @Original_SPLITTRANSAMOUNT)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SPLITTRANSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SPLITTRANSID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TRANSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "TRANSID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@CATEGID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "CATEGID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SUBCATEGID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SUBCATEGID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SPLITTRANSAMOUNT";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "SPLITTRANSAMOUNT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SPLITTRANSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SPLITTRANSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TRANSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "TRANSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_CATEGID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "CATEGID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_CATEGID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "CATEGID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SUBCATEGID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SUBCATEGID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SUBCATEGID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SUBCATEGID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SPLITTRANSAMOUNT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SPLITTRANSAMOUNT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SPLITTRANSAMOUNT";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "SPLITTRANSAMOUNT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = global::MoneyManager.Properties.Settings.Default.creddataCS;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::System.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [SPLITTRANSID], [TRANSID], [CATEGID], [SUBCATEGID], [SPLITTRANSAMOUNT] FRO" +
                "M [REPEAT_SPLIT_TRANSACTIONS]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(creddataDataSet.REPEAT_SPLIT_TRANSACTIONSDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual creddataDataSet.REPEAT_SPLIT_TRANSACTIONSDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            creddataDataSet.REPEAT_SPLIT_TRANSACTIONSDataTable dataTable = new creddataDataSet.REPEAT_SPLIT_TRANSACTIONSDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(creddataDataSet.REPEAT_SPLIT_TRANSACTIONSDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(creddataDataSet dataSet) {
            return this.Adapter.Update(dataSet, "REPEAT_SPLIT_TRANSACTIONS");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_SPLITTRANSID, long Original_TRANSID, global::System.Nullable<long> Original_CATEGID, global::System.Nullable<long> Original_SUBCATEGID, global::System.Nullable<decimal> Original_SPLITTRANSAMOUNT) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_SPLITTRANSID));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((long)(Original_TRANSID));
            if ((Original_CATEGID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((long)(Original_CATEGID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((Original_SUBCATEGID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((long)(Original_SUBCATEGID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((Original_SPLITTRANSAMOUNT.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((decimal)(Original_SPLITTRANSAMOUNT.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(long SPLITTRANSID, long TRANSID, global::System.Nullable<long> CATEGID, global::System.Nullable<long> SUBCATEGID, global::System.Nullable<decimal> SPLITTRANSAMOUNT) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((long)(SPLITTRANSID));
            this.Adapter.InsertCommand.Parameters[1].Value = ((long)(TRANSID));
            if ((CATEGID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((long)(CATEGID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((SUBCATEGID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((long)(SUBCATEGID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((SPLITTRANSAMOUNT.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((decimal)(SPLITTRANSAMOUNT.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(long SPLITTRANSID, long TRANSID, global::System.Nullable<long> CATEGID, global::System.Nullable<long> SUBCATEGID, global::System.Nullable<decimal> SPLITTRANSAMOUNT, long Original_SPLITTRANSID, long Original_TRANSID, global::System.Nullable<long> Original_CATEGID, global::System.Nullable<long> Original_SUBCATEGID, global::System.Nullable<decimal> Original_SPLITTRANSAMOUNT) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(SPLITTRANSID));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((long)(TRANSID));
            if ((CATEGID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((long)(CATEGID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((SUBCATEGID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((long)(SUBCATEGID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((SPLITTRANSAMOUNT.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((decimal)(SPLITTRANSAMOUNT.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((long)(Original_SPLITTRANSID));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((long)(Original_TRANSID));
            if ((Original_CATEGID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[8].Value = ((long)(Original_CATEGID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Original_SUBCATEGID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[10].Value = ((long)(Original_SUBCATEGID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Original_SPLITTRANSAMOUNT.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[12].Value = ((decimal)(Original_SPLITTRANSAMOUNT.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(long TRANSID, global::System.Nullable<long> CATEGID, global::System.Nullable<long> SUBCATEGID, global::System.Nullable<decimal> SPLITTRANSAMOUNT, long Original_SPLITTRANSID, long Original_TRANSID, global::System.Nullable<long> Original_CATEGID, global::System.Nullable<long> Original_SUBCATEGID, global::System.Nullable<decimal> Original_SPLITTRANSAMOUNT) {
            return this.Update(Original_SPLITTRANSID, TRANSID, CATEGID, SUBCATEGID, SPLITTRANSAMOUNT, Original_SPLITTRANSID, Original_TRANSID, Original_CATEGID, Original_SUBCATEGID, Original_SPLITTRANSAMOUNT);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class REPEAT_TRANSACTIONSTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::System.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.SQLite.SQLiteTransaction _transaction;
        
        private global::System.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public REPEAT_TRANSACTIONSTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "REPEAT_TRANSACTIONS";
            tableMapping.ColumnMappings.Add("REPTRANSID", "REPTRANSID");
            tableMapping.ColumnMappings.Add("ACCOUNTID", "ACCOUNTID");
            tableMapping.ColumnMappings.Add("TOACCOUNTID", "TOACCOUNTID");
            tableMapping.ColumnMappings.Add("PAYEEID", "PAYEEID");
            tableMapping.ColumnMappings.Add("TRANSCODE", "TRANSCODE");
            tableMapping.ColumnMappings.Add("TRANSAMOUNT", "TRANSAMOUNT");
            tableMapping.ColumnMappings.Add("STATUS", "STATUS");
            tableMapping.ColumnMappings.Add("TRANSACTIONNUMBER", "TRANSACTIONNUMBER");
            tableMapping.ColumnMappings.Add("NOTES", "NOTES");
            tableMapping.ColumnMappings.Add("CATEGID", "CATEGID");
            tableMapping.ColumnMappings.Add("SUBCATEGID", "SUBCATEGID");
            tableMapping.ColumnMappings.Add("TRANSDATE", "TRANSDATE");
            tableMapping.ColumnMappings.Add("FOLLOWUPID", "FOLLOWUPID");
            tableMapping.ColumnMappings.Add("TOTRANSAMOUNT", "TOTRANSAMOUNT");
            tableMapping.ColumnMappings.Add("REPEATS", "REPEATS");
            tableMapping.ColumnMappings.Add("NEXTOCCURRENCEDATE", "NEXTOCCURRENCEDATE");
            tableMapping.ColumnMappings.Add("NUMOCCURRENCES", "NUMOCCURRENCES");
            tableMapping.ColumnMappings.Add("AUTORUN", "AUTORUN");
            tableMapping.ColumnMappings.Add("AUTORUNUSER", "AUTORUNUSER");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [main].[sqlite_default_schema].[REPEAT_TRANSACTIONS] WHERE (([REPTRAN" +
                "SID] = @Original_REPTRANSID) AND ([ACCOUNTID] = @Original_ACCOUNTID) AND ((@IsNu" +
                "ll_TOACCOUNTID = 1 AND [TOACCOUNTID] IS NULL) OR ([TOACCOUNTID] = @Original_TOAC" +
                "COUNTID)) AND ([PAYEEID] = @Original_PAYEEID) AND ([TRANSCODE] = @Original_TRANS" +
                "CODE) AND ([TRANSAMOUNT] = @Original_TRANSAMOUNT) AND ((@IsNull_STATUS = 1 AND [" +
                "STATUS] IS NULL) OR ([STATUS] = @Original_STATUS)) AND ((@IsNull_TRANSACTIONNUMB" +
                "ER = 1 AND [TRANSACTIONNUMBER] IS NULL) OR ([TRANSACTIONNUMBER] = @Original_TRAN" +
                "SACTIONNUMBER)) AND ((@IsNull_NOTES = 1 AND [NOTES] IS NULL) OR ([NOTES] = @Orig" +
                "inal_NOTES)) AND ((@IsNull_CATEGID = 1 AND [CATEGID] IS NULL) OR ([CATEGID] = @O" +
                "riginal_CATEGID)) AND ((@IsNull_SUBCATEGID = 1 AND [SUBCATEGID] IS NULL) OR ([SU" +
                "BCATEGID] = @Original_SUBCATEGID)) AND ((@IsNull_TRANSDATE = 1 AND [TRANSDATE] I" +
                "S NULL) OR ([TRANSDATE] = @Original_TRANSDATE)) AND ((@IsNull_FOLLOWUPID = 1 AND" +
                " [FOLLOWUPID] IS NULL) OR ([FOLLOWUPID] = @Original_FOLLOWUPID)) AND ((@IsNull_T" +
                "OTRANSAMOUNT = 1 AND [TOTRANSAMOUNT] IS NULL) OR ([TOTRANSAMOUNT] = @Original_TO" +
                "TRANSAMOUNT)) AND ((@IsNull_REPEATS = 1 AND [REPEATS] IS NULL) OR ([REPEATS] = @" +
                "Original_REPEATS)) AND ((@IsNull_NEXTOCCURRENCEDATE = 1 AND [NEXTOCCURRENCEDATE]" +
                " IS NULL) OR ([NEXTOCCURRENCEDATE] = @Original_NEXTOCCURRENCEDATE)) AND ((@IsNul" +
                "l_NUMOCCURRENCES = 1 AND [NUMOCCURRENCES] IS NULL) OR ([NUMOCCURRENCES] = @Origi" +
                "nal_NUMOCCURRENCES)) AND ((@IsNull_AUTORUN = 1 AND [AUTORUN] IS NULL) OR ([AUTOR" +
                "UN] = @Original_AUTORUN)) AND ((@IsNull_AUTORUNUSER = 1 AND [AUTORUNUSER] IS NUL" +
                "L) OR ([AUTORUNUSER] = @Original_AUTORUNUSER)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SQLite.SQLiteParameter param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_REPTRANSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "REPTRANSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ACCOUNTID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ACCOUNTID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TOACCOUNTID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TOACCOUNTID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TOACCOUNTID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "TOACCOUNTID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PAYEEID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "PAYEEID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TRANSCODE";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "TRANSCODE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TRANSAMOUNT";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "TRANSAMOUNT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_STATUS";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "STATUS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_STATUS";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "STATUS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TRANSACTIONNUMBER";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TRANSACTIONNUMBER";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TRANSACTIONNUMBER";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "TRANSACTIONNUMBER";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_NOTES";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "NOTES";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_NOTES";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "NOTES";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_CATEGID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "CATEGID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_CATEGID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "CATEGID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SUBCATEGID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SUBCATEGID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SUBCATEGID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SUBCATEGID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TRANSDATE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TRANSDATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TRANSDATE";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "TRANSDATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_FOLLOWUPID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "FOLLOWUPID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_FOLLOWUPID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "FOLLOWUPID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TOTRANSAMOUNT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TOTRANSAMOUNT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TOTRANSAMOUNT";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "TOTRANSAMOUNT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_REPEATS";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "REPEATS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_REPEATS";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "REPEATS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_NEXTOCCURRENCEDATE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "NEXTOCCURRENCEDATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_NEXTOCCURRENCEDATE";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "NEXTOCCURRENCEDATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_NUMOCCURRENCES";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "NUMOCCURRENCES";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_NUMOCCURRENCES";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "NUMOCCURRENCES";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_AUTORUN";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "AUTORUN";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_AUTORUN";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "AUTORUN";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_AUTORUNUSER";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "AUTORUNUSER";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_AUTORUNUSER";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "AUTORUNUSER";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [main].[sqlite_default_schema].[REPEAT_TRANSACTIONS] ([REPTRANSID], [ACCOUNTID], [TOACCOUNTID], [PAYEEID], [TRANSCODE], [TRANSAMOUNT], [STATUS], [TRANSACTIONNUMBER], [NOTES], [CATEGID], [SUBCATEGID], [TRANSDATE], [FOLLOWUPID], [TOTRANSAMOUNT], [REPEATS], [NEXTOCCURRENCEDATE], [NUMOCCURRENCES], [AUTORUN], [AUTORUNUSER]) VALUES (@REPTRANSID, @ACCOUNTID, @TOACCOUNTID, @PAYEEID, @TRANSCODE, @TRANSAMOUNT, @STATUS, @TRANSACTIONNUMBER, @NOTES, @CATEGID, @SUBCATEGID, @TRANSDATE, @FOLLOWUPID, @TOTRANSAMOUNT, @REPEATS, @NEXTOCCURRENCEDATE, @NUMOCCURRENCES, @AUTORUN, @AUTORUNUSER)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@REPTRANSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "REPTRANSID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ACCOUNTID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ACCOUNTID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TOACCOUNTID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "TOACCOUNTID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PAYEEID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "PAYEEID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TRANSCODE";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "TRANSCODE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TRANSAMOUNT";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "TRANSAMOUNT";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@STATUS";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "STATUS";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TRANSACTIONNUMBER";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "TRANSACTIONNUMBER";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@NOTES";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "NOTES";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@CATEGID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "CATEGID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SUBCATEGID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SUBCATEGID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TRANSDATE";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "TRANSDATE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@FOLLOWUPID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "FOLLOWUPID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TOTRANSAMOUNT";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "TOTRANSAMOUNT";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@REPEATS";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "REPEATS";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@NEXTOCCURRENCEDATE";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "NEXTOCCURRENCEDATE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@NUMOCCURRENCES";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "NUMOCCURRENCES";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@AUTORUN";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "AUTORUN";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@AUTORUNUSER";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "AUTORUNUSER";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [main].[sqlite_default_schema].[REPEAT_TRANSACTIONS] SET [REPTRANSID] = @R" +
                "EPTRANSID, [ACCOUNTID] = @ACCOUNTID, [TOACCOUNTID] = @TOACCOUNTID, [PAYEEID] = @" +
                "PAYEEID, [TRANSCODE] = @TRANSCODE, [TRANSAMOUNT] = @TRANSAMOUNT, [STATUS] = @STA" +
                "TUS, [TRANSACTIONNUMBER] = @TRANSACTIONNUMBER, [NOTES] = @NOTES, [CATEGID] = @CA" +
                "TEGID, [SUBCATEGID] = @SUBCATEGID, [TRANSDATE] = @TRANSDATE, [FOLLOWUPID] = @FOL" +
                "LOWUPID, [TOTRANSAMOUNT] = @TOTRANSAMOUNT, [REPEATS] = @REPEATS, [NEXTOCCURRENCE" +
                "DATE] = @NEXTOCCURRENCEDATE, [NUMOCCURRENCES] = @NUMOCCURRENCES, [AUTORUN] = @AU" +
                "TORUN, [AUTORUNUSER] = @AUTORUNUSER WHERE (([REPTRANSID] = @Original_REPTRANSID)" +
                " AND ([ACCOUNTID] = @Original_ACCOUNTID) AND ((@IsNull_TOACCOUNTID = 1 AND [TOAC" +
                "COUNTID] IS NULL) OR ([TOACCOUNTID] = @Original_TOACCOUNTID)) AND ([PAYEEID] = @" +
                "Original_PAYEEID) AND ([TRANSCODE] = @Original_TRANSCODE) AND ([TRANSAMOUNT] = @" +
                "Original_TRANSAMOUNT) AND ((@IsNull_STATUS = 1 AND [STATUS] IS NULL) OR ([STATUS" +
                "] = @Original_STATUS)) AND ((@IsNull_TRANSACTIONNUMBER = 1 AND [TRANSACTIONNUMBE" +
                "R] IS NULL) OR ([TRANSACTIONNUMBER] = @Original_TRANSACTIONNUMBER)) AND ((@IsNul" +
                "l_NOTES = 1 AND [NOTES] IS NULL) OR ([NOTES] = @Original_NOTES)) AND ((@IsNull_C" +
                "ATEGID = 1 AND [CATEGID] IS NULL) OR ([CATEGID] = @Original_CATEGID)) AND ((@IsN" +
                "ull_SUBCATEGID = 1 AND [SUBCATEGID] IS NULL) OR ([SUBCATEGID] = @Original_SUBCAT" +
                "EGID)) AND ((@IsNull_TRANSDATE = 1 AND [TRANSDATE] IS NULL) OR ([TRANSDATE] = @O" +
                "riginal_TRANSDATE)) AND ((@IsNull_FOLLOWUPID = 1 AND [FOLLOWUPID] IS NULL) OR ([" +
                "FOLLOWUPID] = @Original_FOLLOWUPID)) AND ((@IsNull_TOTRANSAMOUNT = 1 AND [TOTRAN" +
                "SAMOUNT] IS NULL) OR ([TOTRANSAMOUNT] = @Original_TOTRANSAMOUNT)) AND ((@IsNull_" +
                "REPEATS = 1 AND [REPEATS] IS NULL) OR ([REPEATS] = @Original_REPEATS)) AND ((@Is" +
                "Null_NEXTOCCURRENCEDATE = 1 AND [NEXTOCCURRENCEDATE] IS NULL) OR ([NEXTOCCURRENC" +
                "EDATE] = @Original_NEXTOCCURRENCEDATE)) AND ((@IsNull_NUMOCCURRENCES = 1 AND [NU" +
                "MOCCURRENCES] IS NULL) OR ([NUMOCCURRENCES] = @Original_NUMOCCURRENCES)) AND ((@" +
                "IsNull_AUTORUN = 1 AND [AUTORUN] IS NULL) OR ([AUTORUN] = @Original_AUTORUN)) AN" +
                "D ((@IsNull_AUTORUNUSER = 1 AND [AUTORUNUSER] IS NULL) OR ([AUTORUNUSER] = @Orig" +
                "inal_AUTORUNUSER)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@REPTRANSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "REPTRANSID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ACCOUNTID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ACCOUNTID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TOACCOUNTID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "TOACCOUNTID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PAYEEID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "PAYEEID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TRANSCODE";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "TRANSCODE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TRANSAMOUNT";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "TRANSAMOUNT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@STATUS";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "STATUS";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TRANSACTIONNUMBER";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "TRANSACTIONNUMBER";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@NOTES";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "NOTES";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@CATEGID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "CATEGID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SUBCATEGID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SUBCATEGID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TRANSDATE";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "TRANSDATE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@FOLLOWUPID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "FOLLOWUPID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TOTRANSAMOUNT";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "TOTRANSAMOUNT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@REPEATS";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "REPEATS";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@NEXTOCCURRENCEDATE";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "NEXTOCCURRENCEDATE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@NUMOCCURRENCES";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "NUMOCCURRENCES";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@AUTORUN";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "AUTORUN";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@AUTORUNUSER";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "AUTORUNUSER";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_REPTRANSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "REPTRANSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ACCOUNTID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ACCOUNTID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TOACCOUNTID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TOACCOUNTID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TOACCOUNTID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "TOACCOUNTID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PAYEEID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "PAYEEID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TRANSCODE";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "TRANSCODE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TRANSAMOUNT";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "TRANSAMOUNT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_STATUS";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "STATUS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_STATUS";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "STATUS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TRANSACTIONNUMBER";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TRANSACTIONNUMBER";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TRANSACTIONNUMBER";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "TRANSACTIONNUMBER";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_NOTES";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "NOTES";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_NOTES";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "NOTES";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_CATEGID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "CATEGID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_CATEGID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "CATEGID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SUBCATEGID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SUBCATEGID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SUBCATEGID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SUBCATEGID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TRANSDATE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TRANSDATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TRANSDATE";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "TRANSDATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_FOLLOWUPID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "FOLLOWUPID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_FOLLOWUPID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "FOLLOWUPID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TOTRANSAMOUNT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TOTRANSAMOUNT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TOTRANSAMOUNT";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "TOTRANSAMOUNT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_REPEATS";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "REPEATS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_REPEATS";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "REPEATS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_NEXTOCCURRENCEDATE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "NEXTOCCURRENCEDATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_NEXTOCCURRENCEDATE";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "NEXTOCCURRENCEDATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_NUMOCCURRENCES";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "NUMOCCURRENCES";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_NUMOCCURRENCES";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "NUMOCCURRENCES";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_AUTORUN";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "AUTORUN";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_AUTORUN";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "AUTORUN";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_AUTORUNUSER";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "AUTORUNUSER";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_AUTORUNUSER";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "AUTORUNUSER";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = global::MoneyManager.Properties.Settings.Default.creddataCS;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::System.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT [REPTRANSID], [ACCOUNTID], [TOACCOUNTID], [PAYEEID], [TRANSCODE], [TRANSAMOUNT], [STATUS], [TRANSACTIONNUMBER], [NOTES], [CATEGID], [SUBCATEGID], [TRANSDATE], [FOLLOWUPID], [TOTRANSAMOUNT], [REPEATS], [NEXTOCCURRENCEDATE], [NUMOCCURRENCES], [AUTORUN], [AUTORUNUSER] FROM [REPEAT_TRANSACTIONS]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(creddataDataSet.REPEAT_TRANSACTIONSDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual creddataDataSet.REPEAT_TRANSACTIONSDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            creddataDataSet.REPEAT_TRANSACTIONSDataTable dataTable = new creddataDataSet.REPEAT_TRANSACTIONSDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(creddataDataSet.REPEAT_TRANSACTIONSDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(creddataDataSet dataSet) {
            return this.Adapter.Update(dataSet, "REPEAT_TRANSACTIONS");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    long Original_REPTRANSID, 
                    long Original_ACCOUNTID, 
                    global::System.Nullable<long> Original_TOACCOUNTID, 
                    long Original_PAYEEID, 
                    string Original_TRANSCODE, 
                    decimal Original_TRANSAMOUNT, 
                    string Original_STATUS, 
                    string Original_TRANSACTIONNUMBER, 
                    string Original_NOTES, 
                    global::System.Nullable<long> Original_CATEGID, 
                    global::System.Nullable<long> Original_SUBCATEGID, 
                    string Original_TRANSDATE, 
                    global::System.Nullable<long> Original_FOLLOWUPID, 
                    global::System.Nullable<decimal> Original_TOTRANSAMOUNT, 
                    global::System.Nullable<long> Original_REPEATS, 
                    string Original_NEXTOCCURRENCEDATE, 
                    global::System.Nullable<long> Original_NUMOCCURRENCES, 
                    string Original_AUTORUN, 
                    string Original_AUTORUNUSER) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_REPTRANSID));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((long)(Original_ACCOUNTID));
            if ((Original_TOACCOUNTID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((long)(Original_TOACCOUNTID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[4].Value = ((long)(Original_PAYEEID));
            if ((Original_TRANSCODE == null)) {
                throw new global::System.ArgumentNullException("Original_TRANSCODE");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_TRANSCODE));
            }
            this.Adapter.DeleteCommand.Parameters[6].Value = ((decimal)(Original_TRANSAMOUNT));
            if ((Original_STATUS == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_STATUS));
            }
            if ((Original_TRANSACTIONNUMBER == null)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_TRANSACTIONNUMBER));
            }
            if ((Original_NOTES == null)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_NOTES));
            }
            if ((Original_CATEGID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((long)(Original_CATEGID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((Original_SUBCATEGID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((long)(Original_SUBCATEGID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((Original_TRANSDATE == null)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((string)(Original_TRANSDATE));
            }
            if ((Original_FOLLOWUPID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((long)(Original_FOLLOWUPID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((Original_TOTRANSAMOUNT.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((decimal)(Original_TOTRANSAMOUNT.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((Original_REPEATS.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[24].Value = ((long)(Original_REPEATS.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((Original_NEXTOCCURRENCEDATE == null)) {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[26].Value = ((string)(Original_NEXTOCCURRENCEDATE));
            }
            if ((Original_NUMOCCURRENCES.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[28].Value = ((long)(Original_NUMOCCURRENCES.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((Original_AUTORUN == null)) {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[30].Value = ((string)(Original_AUTORUN));
            }
            if ((Original_AUTORUNUSER == null)) {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[32].Value = ((string)(Original_AUTORUNUSER));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    long REPTRANSID, 
                    long ACCOUNTID, 
                    global::System.Nullable<long> TOACCOUNTID, 
                    long PAYEEID, 
                    string TRANSCODE, 
                    decimal TRANSAMOUNT, 
                    string STATUS, 
                    string TRANSACTIONNUMBER, 
                    string NOTES, 
                    global::System.Nullable<long> CATEGID, 
                    global::System.Nullable<long> SUBCATEGID, 
                    string TRANSDATE, 
                    global::System.Nullable<long> FOLLOWUPID, 
                    global::System.Nullable<decimal> TOTRANSAMOUNT, 
                    global::System.Nullable<long> REPEATS, 
                    string NEXTOCCURRENCEDATE, 
                    global::System.Nullable<long> NUMOCCURRENCES, 
                    string AUTORUN, 
                    string AUTORUNUSER) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((long)(REPTRANSID));
            this.Adapter.InsertCommand.Parameters[1].Value = ((long)(ACCOUNTID));
            if ((TOACCOUNTID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((long)(TOACCOUNTID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[3].Value = ((long)(PAYEEID));
            if ((TRANSCODE == null)) {
                throw new global::System.ArgumentNullException("TRANSCODE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(TRANSCODE));
            }
            this.Adapter.InsertCommand.Parameters[5].Value = ((decimal)(TRANSAMOUNT));
            if ((STATUS == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(STATUS));
            }
            if ((TRANSACTIONNUMBER == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(TRANSACTIONNUMBER));
            }
            if ((NOTES == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(NOTES));
            }
            if ((CATEGID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((long)(CATEGID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((SUBCATEGID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((long)(SUBCATEGID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((TRANSDATE == null)) {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(TRANSDATE));
            }
            if ((FOLLOWUPID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((long)(FOLLOWUPID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((TOTRANSAMOUNT.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((decimal)(TOTRANSAMOUNT.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((REPEATS.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[14].Value = ((long)(REPEATS.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((NEXTOCCURRENCEDATE == null)) {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = ((string)(NEXTOCCURRENCEDATE));
            }
            if ((NUMOCCURRENCES.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[16].Value = ((long)(NUMOCCURRENCES.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((AUTORUN == null)) {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = ((string)(AUTORUN));
            }
            if ((AUTORUNUSER == null)) {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = ((string)(AUTORUNUSER));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    long REPTRANSID, 
                    long ACCOUNTID, 
                    global::System.Nullable<long> TOACCOUNTID, 
                    long PAYEEID, 
                    string TRANSCODE, 
                    decimal TRANSAMOUNT, 
                    string STATUS, 
                    string TRANSACTIONNUMBER, 
                    string NOTES, 
                    global::System.Nullable<long> CATEGID, 
                    global::System.Nullable<long> SUBCATEGID, 
                    string TRANSDATE, 
                    global::System.Nullable<long> FOLLOWUPID, 
                    global::System.Nullable<decimal> TOTRANSAMOUNT, 
                    global::System.Nullable<long> REPEATS, 
                    string NEXTOCCURRENCEDATE, 
                    global::System.Nullable<long> NUMOCCURRENCES, 
                    string AUTORUN, 
                    string AUTORUNUSER, 
                    long Original_REPTRANSID, 
                    long Original_ACCOUNTID, 
                    global::System.Nullable<long> Original_TOACCOUNTID, 
                    long Original_PAYEEID, 
                    string Original_TRANSCODE, 
                    decimal Original_TRANSAMOUNT, 
                    string Original_STATUS, 
                    string Original_TRANSACTIONNUMBER, 
                    string Original_NOTES, 
                    global::System.Nullable<long> Original_CATEGID, 
                    global::System.Nullable<long> Original_SUBCATEGID, 
                    string Original_TRANSDATE, 
                    global::System.Nullable<long> Original_FOLLOWUPID, 
                    global::System.Nullable<decimal> Original_TOTRANSAMOUNT, 
                    global::System.Nullable<long> Original_REPEATS, 
                    string Original_NEXTOCCURRENCEDATE, 
                    global::System.Nullable<long> Original_NUMOCCURRENCES, 
                    string Original_AUTORUN, 
                    string Original_AUTORUNUSER) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(REPTRANSID));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((long)(ACCOUNTID));
            if ((TOACCOUNTID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((long)(TOACCOUNTID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((long)(PAYEEID));
            if ((TRANSCODE == null)) {
                throw new global::System.ArgumentNullException("TRANSCODE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(TRANSCODE));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((decimal)(TRANSAMOUNT));
            if ((STATUS == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(STATUS));
            }
            if ((TRANSACTIONNUMBER == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(TRANSACTIONNUMBER));
            }
            if ((NOTES == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(NOTES));
            }
            if ((CATEGID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((long)(CATEGID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((SUBCATEGID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((long)(SUBCATEGID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((TRANSDATE == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(TRANSDATE));
            }
            if ((FOLLOWUPID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((long)(FOLLOWUPID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((TOTRANSAMOUNT.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((decimal)(TOTRANSAMOUNT.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((REPEATS.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((long)(REPEATS.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((NEXTOCCURRENCEDATE == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(NEXTOCCURRENCEDATE));
            }
            if ((NUMOCCURRENCES.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((long)(NUMOCCURRENCES.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((AUTORUN == null)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(AUTORUN));
            }
            if ((AUTORUNUSER == null)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(AUTORUNUSER));
            }
            this.Adapter.UpdateCommand.Parameters[19].Value = ((long)(Original_REPTRANSID));
            this.Adapter.UpdateCommand.Parameters[20].Value = ((long)(Original_ACCOUNTID));
            if ((Original_TOACCOUNTID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[22].Value = ((long)(Original_TOACCOUNTID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[23].Value = ((long)(Original_PAYEEID));
            if ((Original_TRANSCODE == null)) {
                throw new global::System.ArgumentNullException("Original_TRANSCODE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(Original_TRANSCODE));
            }
            this.Adapter.UpdateCommand.Parameters[25].Value = ((decimal)(Original_TRANSAMOUNT));
            if ((Original_STATUS == null)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[27].Value = ((string)(Original_STATUS));
            }
            if ((Original_TRANSACTIONNUMBER == null)) {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[29].Value = ((string)(Original_TRANSACTIONNUMBER));
            }
            if ((Original_NOTES == null)) {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[31].Value = ((string)(Original_NOTES));
            }
            if ((Original_CATEGID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[33].Value = ((long)(Original_CATEGID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            if ((Original_SUBCATEGID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[35].Value = ((long)(Original_SUBCATEGID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[35].Value = global::System.DBNull.Value;
            }
            if ((Original_TRANSDATE == null)) {
                this.Adapter.UpdateCommand.Parameters[36].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[37].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[36].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[37].Value = ((string)(Original_TRANSDATE));
            }
            if ((Original_FOLLOWUPID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[38].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[39].Value = ((long)(Original_FOLLOWUPID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[38].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[39].Value = global::System.DBNull.Value;
            }
            if ((Original_TOTRANSAMOUNT.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[40].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[41].Value = ((decimal)(Original_TOTRANSAMOUNT.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[40].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[41].Value = global::System.DBNull.Value;
            }
            if ((Original_REPEATS.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[42].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[43].Value = ((long)(Original_REPEATS.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[42].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[43].Value = global::System.DBNull.Value;
            }
            if ((Original_NEXTOCCURRENCEDATE == null)) {
                this.Adapter.UpdateCommand.Parameters[44].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[45].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[44].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[45].Value = ((string)(Original_NEXTOCCURRENCEDATE));
            }
            if ((Original_NUMOCCURRENCES.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[46].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[47].Value = ((long)(Original_NUMOCCURRENCES.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[46].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[47].Value = global::System.DBNull.Value;
            }
            if ((Original_AUTORUN == null)) {
                this.Adapter.UpdateCommand.Parameters[48].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[49].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[48].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[49].Value = ((string)(Original_AUTORUN));
            }
            if ((Original_AUTORUNUSER == null)) {
                this.Adapter.UpdateCommand.Parameters[50].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[51].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[50].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[51].Value = ((string)(Original_AUTORUNUSER));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    long ACCOUNTID, 
                    global::System.Nullable<long> TOACCOUNTID, 
                    long PAYEEID, 
                    string TRANSCODE, 
                    decimal TRANSAMOUNT, 
                    string STATUS, 
                    string TRANSACTIONNUMBER, 
                    string NOTES, 
                    global::System.Nullable<long> CATEGID, 
                    global::System.Nullable<long> SUBCATEGID, 
                    string TRANSDATE, 
                    global::System.Nullable<long> FOLLOWUPID, 
                    global::System.Nullable<decimal> TOTRANSAMOUNT, 
                    global::System.Nullable<long> REPEATS, 
                    string NEXTOCCURRENCEDATE, 
                    global::System.Nullable<long> NUMOCCURRENCES, 
                    string AUTORUN, 
                    string AUTORUNUSER, 
                    long Original_REPTRANSID, 
                    long Original_ACCOUNTID, 
                    global::System.Nullable<long> Original_TOACCOUNTID, 
                    long Original_PAYEEID, 
                    string Original_TRANSCODE, 
                    decimal Original_TRANSAMOUNT, 
                    string Original_STATUS, 
                    string Original_TRANSACTIONNUMBER, 
                    string Original_NOTES, 
                    global::System.Nullable<long> Original_CATEGID, 
                    global::System.Nullable<long> Original_SUBCATEGID, 
                    string Original_TRANSDATE, 
                    global::System.Nullable<long> Original_FOLLOWUPID, 
                    global::System.Nullable<decimal> Original_TOTRANSAMOUNT, 
                    global::System.Nullable<long> Original_REPEATS, 
                    string Original_NEXTOCCURRENCEDATE, 
                    global::System.Nullable<long> Original_NUMOCCURRENCES, 
                    string Original_AUTORUN, 
                    string Original_AUTORUNUSER) {
            return this.Update(Original_REPTRANSID, ACCOUNTID, TOACCOUNTID, PAYEEID, TRANSCODE, TRANSAMOUNT, STATUS, TRANSACTIONNUMBER, NOTES, CATEGID, SUBCATEGID, TRANSDATE, FOLLOWUPID, TOTRANSAMOUNT, REPEATS, NEXTOCCURRENCEDATE, NUMOCCURRENCES, AUTORUN, AUTORUNUSER, Original_REPTRANSID, Original_ACCOUNTID, Original_TOACCOUNTID, Original_PAYEEID, Original_TRANSCODE, Original_TRANSAMOUNT, Original_STATUS, Original_TRANSACTIONNUMBER, Original_NOTES, Original_CATEGID, Original_SUBCATEGID, Original_TRANSDATE, Original_FOLLOWUPID, Original_TOTRANSAMOUNT, Original_REPEATS, Original_NEXTOCCURRENCEDATE, Original_NUMOCCURRENCES, Original_AUTORUN, Original_AUTORUNUSER);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SPLIT_TRANSACTIONSTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::System.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.SQLite.SQLiteTransaction _transaction;
        
        private global::System.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public SPLIT_TRANSACTIONSTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SPLIT_TRANSACTIONS";
            tableMapping.ColumnMappings.Add("SPLITTRANSID", "SPLITTRANSID");
            tableMapping.ColumnMappings.Add("TRANSID", "TRANSID");
            tableMapping.ColumnMappings.Add("CATEGID", "CATEGID");
            tableMapping.ColumnMappings.Add("SUBCATEGID", "SUBCATEGID");
            tableMapping.ColumnMappings.Add("SPLITTRANSAMOUNT", "SPLITTRANSAMOUNT");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [main].[sqlite_default_schema].[SPLIT_TRANSACTIONS] WHERE (([SPLITTRANSID] = @Original_SPLITTRANSID) AND ([TRANSID] = @Original_TRANSID) AND ((@IsNull_CATEGID = 1 AND [CATEGID] IS NULL) OR ([CATEGID] = @Original_CATEGID)) AND ((@IsNull_SUBCATEGID = 1 AND [SUBCATEGID] IS NULL) OR ([SUBCATEGID] = @Original_SUBCATEGID)) AND ((@IsNull_SPLITTRANSAMOUNT = 1 AND [SPLITTRANSAMOUNT] IS NULL) OR ([SPLITTRANSAMOUNT] = @Original_SPLITTRANSAMOUNT)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SQLite.SQLiteParameter param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SPLITTRANSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SPLITTRANSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TRANSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "TRANSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_CATEGID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "CATEGID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_CATEGID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "CATEGID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SUBCATEGID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SUBCATEGID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SUBCATEGID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SUBCATEGID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SPLITTRANSAMOUNT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SPLITTRANSAMOUNT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SPLITTRANSAMOUNT";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "SPLITTRANSAMOUNT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [main].[sqlite_default_schema].[SPLIT_TRANSACTIONS] ([SPLITTRANSID], " +
                "[TRANSID], [CATEGID], [SUBCATEGID], [SPLITTRANSAMOUNT]) VALUES (@SPLITTRANSID, @" +
                "TRANSID, @CATEGID, @SUBCATEGID, @SPLITTRANSAMOUNT)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SPLITTRANSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SPLITTRANSID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TRANSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "TRANSID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@CATEGID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "CATEGID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SUBCATEGID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SUBCATEGID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SPLITTRANSAMOUNT";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "SPLITTRANSAMOUNT";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [main].[sqlite_default_schema].[SPLIT_TRANSACTIONS] SET [SPLITTRANSID] = @SPLITTRANSID, [TRANSID] = @TRANSID, [CATEGID] = @CATEGID, [SUBCATEGID] = @SUBCATEGID, [SPLITTRANSAMOUNT] = @SPLITTRANSAMOUNT WHERE (([SPLITTRANSID] = @Original_SPLITTRANSID) AND ([TRANSID] = @Original_TRANSID) AND ((@IsNull_CATEGID = 1 AND [CATEGID] IS NULL) OR ([CATEGID] = @Original_CATEGID)) AND ((@IsNull_SUBCATEGID = 1 AND [SUBCATEGID] IS NULL) OR ([SUBCATEGID] = @Original_SUBCATEGID)) AND ((@IsNull_SPLITTRANSAMOUNT = 1 AND [SPLITTRANSAMOUNT] IS NULL) OR ([SPLITTRANSAMOUNT] = @Original_SPLITTRANSAMOUNT)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SPLITTRANSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SPLITTRANSID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TRANSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "TRANSID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@CATEGID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "CATEGID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SUBCATEGID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SUBCATEGID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SPLITTRANSAMOUNT";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "SPLITTRANSAMOUNT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SPLITTRANSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SPLITTRANSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TRANSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "TRANSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_CATEGID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "CATEGID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_CATEGID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "CATEGID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SUBCATEGID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SUBCATEGID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SUBCATEGID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SUBCATEGID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SPLITTRANSAMOUNT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SPLITTRANSAMOUNT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SPLITTRANSAMOUNT";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "SPLITTRANSAMOUNT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = global::MoneyManager.Properties.Settings.Default.creddataCS;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::System.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [SPLITTRANSID], [TRANSID], [CATEGID], [SUBCATEGID], [SPLITTRANSAMOUNT] FRO" +
                "M [SPLIT_TRANSACTIONS]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(creddataDataSet.SPLIT_TRANSACTIONSDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual creddataDataSet.SPLIT_TRANSACTIONSDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            creddataDataSet.SPLIT_TRANSACTIONSDataTable dataTable = new creddataDataSet.SPLIT_TRANSACTIONSDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(creddataDataSet.SPLIT_TRANSACTIONSDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(creddataDataSet dataSet) {
            return this.Adapter.Update(dataSet, "SPLIT_TRANSACTIONS");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_SPLITTRANSID, long Original_TRANSID, global::System.Nullable<long> Original_CATEGID, global::System.Nullable<long> Original_SUBCATEGID, global::System.Nullable<decimal> Original_SPLITTRANSAMOUNT) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_SPLITTRANSID));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((long)(Original_TRANSID));
            if ((Original_CATEGID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((long)(Original_CATEGID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((Original_SUBCATEGID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((long)(Original_SUBCATEGID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((Original_SPLITTRANSAMOUNT.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((decimal)(Original_SPLITTRANSAMOUNT.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(long SPLITTRANSID, long TRANSID, global::System.Nullable<long> CATEGID, global::System.Nullable<long> SUBCATEGID, global::System.Nullable<decimal> SPLITTRANSAMOUNT) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((long)(SPLITTRANSID));
            this.Adapter.InsertCommand.Parameters[1].Value = ((long)(TRANSID));
            if ((CATEGID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((long)(CATEGID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((SUBCATEGID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((long)(SUBCATEGID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((SPLITTRANSAMOUNT.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((decimal)(SPLITTRANSAMOUNT.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(long SPLITTRANSID, long TRANSID, global::System.Nullable<long> CATEGID, global::System.Nullable<long> SUBCATEGID, global::System.Nullable<decimal> SPLITTRANSAMOUNT, long Original_SPLITTRANSID, long Original_TRANSID, global::System.Nullable<long> Original_CATEGID, global::System.Nullable<long> Original_SUBCATEGID, global::System.Nullable<decimal> Original_SPLITTRANSAMOUNT) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(SPLITTRANSID));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((long)(TRANSID));
            if ((CATEGID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((long)(CATEGID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((SUBCATEGID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((long)(SUBCATEGID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((SPLITTRANSAMOUNT.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((decimal)(SPLITTRANSAMOUNT.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((long)(Original_SPLITTRANSID));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((long)(Original_TRANSID));
            if ((Original_CATEGID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[8].Value = ((long)(Original_CATEGID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Original_SUBCATEGID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[10].Value = ((long)(Original_SUBCATEGID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Original_SPLITTRANSAMOUNT.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[12].Value = ((decimal)(Original_SPLITTRANSAMOUNT.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(long TRANSID, global::System.Nullable<long> CATEGID, global::System.Nullable<long> SUBCATEGID, global::System.Nullable<decimal> SPLITTRANSAMOUNT, long Original_SPLITTRANSID, long Original_TRANSID, global::System.Nullable<long> Original_CATEGID, global::System.Nullable<long> Original_SUBCATEGID, global::System.Nullable<decimal> Original_SPLITTRANSAMOUNT) {
            return this.Update(Original_SPLITTRANSID, TRANSID, CATEGID, SUBCATEGID, SPLITTRANSAMOUNT, Original_SPLITTRANSID, Original_TRANSID, Original_CATEGID, Original_SUBCATEGID, Original_SPLITTRANSAMOUNT);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SUB_CATEGORIESTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::System.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.SQLite.SQLiteTransaction _transaction;
        
        private global::System.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public SUB_CATEGORIESTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SUB_CATEGORIES";
            tableMapping.ColumnMappings.Add("SUBCATEGID", "SUBCATEGID");
            tableMapping.ColumnMappings.Add("SUBCATEGNAME", "SUBCATEGNAME");
            tableMapping.ColumnMappings.Add("CATEGID", "CATEGID");
            tableMapping.ColumnMappings.Add("INCLUDEBUDGET", "INCLUDEBUDGET");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [main].[sqlite_default_schema].[SUB_CATEGORIES] WHERE (([SUBCATEGID] = @Original_SUBCATEGID) AND ([SUBCATEGNAME] = @Original_SUBCATEGNAME) AND ([CATEGID] = @Original_CATEGID) AND ((@IsNull_INCLUDEBUDGET = 1 AND [INCLUDEBUDGET] IS NULL) OR ([INCLUDEBUDGET] = @Original_INCLUDEBUDGET)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SQLite.SQLiteParameter param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SUBCATEGID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SUBCATEGID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SUBCATEGNAME";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "SUBCATEGNAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_CATEGID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "CATEGID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_INCLUDEBUDGET";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "INCLUDEBUDGET";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_INCLUDEBUDGET";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "INCLUDEBUDGET";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [main].[sqlite_default_schema].[SUB_CATEGORIES] ([SUBCATEGNAME], [CAT" +
                "EGID], [INCLUDEBUDGET]) VALUES (@SUBCATEGNAME, @CATEGID, @INCLUDEBUDGET)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SUBCATEGNAME";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "SUBCATEGNAME";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@CATEGID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "CATEGID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@INCLUDEBUDGET";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "INCLUDEBUDGET";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [main].[sqlite_default_schema].[SUB_CATEGORIES] SET [SUBCATEGNAME] = @SUBCATEGNAME, [CATEGID] = @CATEGID, [INCLUDEBUDGET] = @INCLUDEBUDGET WHERE (([SUBCATEGID] = @Original_SUBCATEGID) AND ([SUBCATEGNAME] = @Original_SUBCATEGNAME) AND ([CATEGID] = @Original_CATEGID) AND ((@IsNull_INCLUDEBUDGET = 1 AND [INCLUDEBUDGET] IS NULL) OR ([INCLUDEBUDGET] = @Original_INCLUDEBUDGET)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SUBCATEGNAME";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "SUBCATEGNAME";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@CATEGID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "CATEGID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@INCLUDEBUDGET";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "INCLUDEBUDGET";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SUBCATEGID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SUBCATEGID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SUBCATEGNAME";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "SUBCATEGNAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_CATEGID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "CATEGID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_INCLUDEBUDGET";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "INCLUDEBUDGET";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_INCLUDEBUDGET";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "INCLUDEBUDGET";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = global::MoneyManager.Properties.Settings.Default.creddataCS;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::System.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [SUBCATEGID], [SUBCATEGNAME], [CATEGID], [INCLUDEBUDGET] FROM [SUB_CATEGOR" +
                "IES]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(creddataDataSet.SUB_CATEGORIESDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual creddataDataSet.SUB_CATEGORIESDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            creddataDataSet.SUB_CATEGORIESDataTable dataTable = new creddataDataSet.SUB_CATEGORIESDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(creddataDataSet.SUB_CATEGORIESDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(creddataDataSet dataSet) {
            return this.Adapter.Update(dataSet, "SUB_CATEGORIES");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_SUBCATEGID, string Original_SUBCATEGNAME, long Original_CATEGID, string Original_INCLUDEBUDGET) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_SUBCATEGID));
            if ((Original_SUBCATEGNAME == null)) {
                throw new global::System.ArgumentNullException("Original_SUBCATEGNAME");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_SUBCATEGNAME));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((long)(Original_CATEGID));
            if ((Original_INCLUDEBUDGET == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_INCLUDEBUDGET));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string SUBCATEGNAME, long CATEGID, string INCLUDEBUDGET) {
            if ((SUBCATEGNAME == null)) {
                throw new global::System.ArgumentNullException("SUBCATEGNAME");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(SUBCATEGNAME));
            }
            this.Adapter.InsertCommand.Parameters[1].Value = ((long)(CATEGID));
            if ((INCLUDEBUDGET == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(INCLUDEBUDGET));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string SUBCATEGNAME, long CATEGID, string INCLUDEBUDGET, long Original_SUBCATEGID, string Original_SUBCATEGNAME, long Original_CATEGID, string Original_INCLUDEBUDGET) {
            if ((SUBCATEGNAME == null)) {
                throw new global::System.ArgumentNullException("SUBCATEGNAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(SUBCATEGNAME));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((long)(CATEGID));
            if ((INCLUDEBUDGET == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(INCLUDEBUDGET));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((long)(Original_SUBCATEGID));
            if ((Original_SUBCATEGNAME == null)) {
                throw new global::System.ArgumentNullException("Original_SUBCATEGNAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_SUBCATEGNAME));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((long)(Original_CATEGID));
            if ((Original_INCLUDEBUDGET == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_INCLUDEBUDGET));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TRANS_FILTERSTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::System.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.SQLite.SQLiteTransaction _transaction;
        
        private global::System.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public TRANS_FILTERSTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TRANS_FILTERS";
            tableMapping.ColumnMappings.Add("TRANSFILTERID", "TRANSFILTERID");
            tableMapping.ColumnMappings.Add("TRANSFILTERNAME", "TRANSFILTERNAME");
            tableMapping.ColumnMappings.Add("FROMDATE", "FROMDATE");
            tableMapping.ColumnMappings.Add("TODATE", "TODATE");
            tableMapping.ColumnMappings.Add("TRANSCODE", "TRANSCODE");
            tableMapping.ColumnMappings.Add("FROMAMOUNT", "FROMAMOUNT");
            tableMapping.ColumnMappings.Add("TOAMOUNT", "TOAMOUNT");
            tableMapping.ColumnMappings.Add("PAYEENAME", "PAYEENAME");
            tableMapping.ColumnMappings.Add("CATEGID", "CATEGID");
            tableMapping.ColumnMappings.Add("SUBCATEGID", "SUBCATEGID");
            tableMapping.ColumnMappings.Add("ARCHIVED", "ARCHIVED");
            tableMapping.ColumnMappings.Add("DATEFILTER", "DATEFILTER");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [main].[sqlite_default_schema].[TRANS_FILTERS] WHERE (([TRANSFILTERID] = @Original_TRANSFILTERID) AND ([TRANSFILTERNAME] = @Original_TRANSFILTERNAME) AND ((@IsNull_FROMDATE = 1 AND [FROMDATE] IS NULL) OR ([FROMDATE] = @Original_FROMDATE)) AND ((@IsNull_TODATE = 1 AND [TODATE] IS NULL) OR ([TODATE] = @Original_TODATE)) AND ((@IsNull_TRANSCODE = 1 AND [TRANSCODE] IS NULL) OR ([TRANSCODE] = @Original_TRANSCODE)) AND ((@IsNull_FROMAMOUNT = 1 AND [FROMAMOUNT] IS NULL) OR ([FROMAMOUNT] = @Original_FROMAMOUNT)) AND ((@IsNull_TOAMOUNT = 1 AND [TOAMOUNT] IS NULL) OR ([TOAMOUNT] = @Original_TOAMOUNT)) AND ((@IsNull_PAYEENAME = 1 AND [PAYEENAME] IS NULL) OR ([PAYEENAME] = @Original_PAYEENAME)) AND ((@IsNull_CATEGID = 1 AND [CATEGID] IS NULL) OR ([CATEGID] = @Original_CATEGID)) AND ((@IsNull_SUBCATEGID = 1 AND [SUBCATEGID] IS NULL) OR ([SUBCATEGID] = @Original_SUBCATEGID)) AND ((@IsNull_ARCHIVED = 1 AND [ARCHIVED] IS NULL) OR ([ARCHIVED] = @Original_ARCHIVED)) AND ((@IsNull_DATEFILTER = 1 AND [DATEFILTER] IS NULL) OR ([DATEFILTER] = @Original_DATEFILTER)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SQLite.SQLiteParameter param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TRANSFILTERID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "TRANSFILTERID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TRANSFILTERNAME";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "TRANSFILTERNAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_FROMDATE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "FROMDATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_FROMDATE";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "FROMDATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TODATE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TODATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TODATE";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "TODATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TRANSCODE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TRANSCODE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TRANSCODE";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "TRANSCODE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_FROMAMOUNT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "FROMAMOUNT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_FROMAMOUNT";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "FROMAMOUNT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TOAMOUNT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TOAMOUNT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TOAMOUNT";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "TOAMOUNT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_PAYEENAME";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "PAYEENAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PAYEENAME";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "PAYEENAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_CATEGID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "CATEGID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_CATEGID";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "CATEGID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SUBCATEGID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SUBCATEGID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SUBCATEGID";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "SUBCATEGID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ARCHIVED";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ARCHIVED";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ARCHIVED";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "ARCHIVED";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DATEFILTER";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DATEFILTER";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DATEFILTER";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "DATEFILTER";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [main].[sqlite_default_schema].[TRANS_FILTERS] ([TRANSFILTERNAME], [FROMDATE], [TODATE], [TRANSCODE], [FROMAMOUNT], [TOAMOUNT], [PAYEENAME], [CATEGID], [SUBCATEGID], [ARCHIVED], [DATEFILTER]) VALUES (@TRANSFILTERNAME, @FROMDATE, @TODATE, @TRANSCODE, @FROMAMOUNT, @TOAMOUNT, @PAYEENAME, @CATEGID, @SUBCATEGID, @ARCHIVED, @DATEFILTER)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TRANSFILTERNAME";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "TRANSFILTERNAME";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@FROMDATE";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "FROMDATE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TODATE";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "TODATE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TRANSCODE";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "TRANSCODE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@FROMAMOUNT";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "FROMAMOUNT";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TOAMOUNT";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "TOAMOUNT";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PAYEENAME";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "PAYEENAME";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@CATEGID";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "CATEGID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SUBCATEGID";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "SUBCATEGID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ARCHIVED";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "ARCHIVED";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DATEFILTER";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "DATEFILTER";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [main].[sqlite_default_schema].[TRANS_FILTERS] SET [TRANSFILTERNAME] = @TRANSFILTERNAME, [FROMDATE] = @FROMDATE, [TODATE] = @TODATE, [TRANSCODE] = @TRANSCODE, [FROMAMOUNT] = @FROMAMOUNT, [TOAMOUNT] = @TOAMOUNT, [PAYEENAME] = @PAYEENAME, [CATEGID] = @CATEGID, [SUBCATEGID] = @SUBCATEGID, [ARCHIVED] = @ARCHIVED, [DATEFILTER] = @DATEFILTER WHERE (([TRANSFILTERID] = @Original_TRANSFILTERID) AND ([TRANSFILTERNAME] = @Original_TRANSFILTERNAME) AND ((@IsNull_FROMDATE = 1 AND [FROMDATE] IS NULL) OR ([FROMDATE] = @Original_FROMDATE)) AND ((@IsNull_TODATE = 1 AND [TODATE] IS NULL) OR ([TODATE] = @Original_TODATE)) AND ((@IsNull_TRANSCODE = 1 AND [TRANSCODE] IS NULL) OR ([TRANSCODE] = @Original_TRANSCODE)) AND ((@IsNull_FROMAMOUNT = 1 AND [FROMAMOUNT] IS NULL) OR ([FROMAMOUNT] = @Original_FROMAMOUNT)) AND ((@IsNull_TOAMOUNT = 1 AND [TOAMOUNT] IS NULL) OR ([TOAMOUNT] = @Original_TOAMOUNT)) AND ((@IsNull_PAYEENAME = 1 AND [PAYEENAME] IS NULL) OR ([PAYEENAME] = @Original_PAYEENAME)) AND ((@IsNull_CATEGID = 1 AND [CATEGID] IS NULL) OR ([CATEGID] = @Original_CATEGID)) AND ((@IsNull_SUBCATEGID = 1 AND [SUBCATEGID] IS NULL) OR ([SUBCATEGID] = @Original_SUBCATEGID)) AND ((@IsNull_ARCHIVED = 1 AND [ARCHIVED] IS NULL) OR ([ARCHIVED] = @Original_ARCHIVED)) AND ((@IsNull_DATEFILTER = 1 AND [DATEFILTER] IS NULL) OR ([DATEFILTER] = @Original_DATEFILTER)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TRANSFILTERNAME";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "TRANSFILTERNAME";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@FROMDATE";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "FROMDATE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TODATE";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "TODATE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TRANSCODE";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "TRANSCODE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@FROMAMOUNT";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "FROMAMOUNT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TOAMOUNT";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "TOAMOUNT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PAYEENAME";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "PAYEENAME";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@CATEGID";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "CATEGID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SUBCATEGID";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "SUBCATEGID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ARCHIVED";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "ARCHIVED";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DATEFILTER";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "DATEFILTER";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TRANSFILTERID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "TRANSFILTERID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TRANSFILTERNAME";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "TRANSFILTERNAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_FROMDATE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "FROMDATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_FROMDATE";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "FROMDATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TODATE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TODATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TODATE";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "TODATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TRANSCODE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TRANSCODE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TRANSCODE";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "TRANSCODE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_FROMAMOUNT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "FROMAMOUNT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_FROMAMOUNT";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "FROMAMOUNT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TOAMOUNT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TOAMOUNT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TOAMOUNT";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "TOAMOUNT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_PAYEENAME";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "PAYEENAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PAYEENAME";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "PAYEENAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_CATEGID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "CATEGID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_CATEGID";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "CATEGID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SUBCATEGID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SUBCATEGID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SUBCATEGID";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "SUBCATEGID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ARCHIVED";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ARCHIVED";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ARCHIVED";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "ARCHIVED";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DATEFILTER";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DATEFILTER";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DATEFILTER";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "DATEFILTER";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = global::MoneyManager.Properties.Settings.Default.creddataCS;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::System.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [TRANSFILTERID], [TRANSFILTERNAME], [FROMDATE], [TODATE], [TRANSCODE], [FR" +
                "OMAMOUNT], [TOAMOUNT], [PAYEENAME], [CATEGID], [SUBCATEGID], [ARCHIVED], [DATEFI" +
                "LTER] FROM [TRANS_FILTERS]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(creddataDataSet.TRANS_FILTERSDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual creddataDataSet.TRANS_FILTERSDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            creddataDataSet.TRANS_FILTERSDataTable dataTable = new creddataDataSet.TRANS_FILTERSDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(creddataDataSet.TRANS_FILTERSDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(creddataDataSet dataSet) {
            return this.Adapter.Update(dataSet, "TRANS_FILTERS");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_TRANSFILTERID, string Original_TRANSFILTERNAME, string Original_FROMDATE, string Original_TODATE, string Original_TRANSCODE, global::System.Nullable<decimal> Original_FROMAMOUNT, global::System.Nullable<decimal> Original_TOAMOUNT, string Original_PAYEENAME, global::System.Nullable<decimal> Original_CATEGID, global::System.Nullable<decimal> Original_SUBCATEGID, string Original_ARCHIVED, global::System.Nullable<decimal> Original_DATEFILTER) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_TRANSFILTERID));
            if ((Original_TRANSFILTERNAME == null)) {
                throw new global::System.ArgumentNullException("Original_TRANSFILTERNAME");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_TRANSFILTERNAME));
            }
            if ((Original_FROMDATE == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_FROMDATE));
            }
            if ((Original_TODATE == null)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_TODATE));
            }
            if ((Original_TRANSCODE == null)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_TRANSCODE));
            }
            if ((Original_FROMAMOUNT.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[9].Value = ((decimal)(Original_FROMAMOUNT.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((Original_TOAMOUNT.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[11].Value = ((decimal)(Original_TOAMOUNT.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((Original_PAYEENAME == null)) {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[13].Value = ((string)(Original_PAYEENAME));
            }
            if ((Original_CATEGID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[15].Value = ((decimal)(Original_CATEGID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((Original_SUBCATEGID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[17].Value = ((decimal)(Original_SUBCATEGID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((Original_ARCHIVED == null)) {
                this.Adapter.DeleteCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[19].Value = ((string)(Original_ARCHIVED));
            }
            if ((Original_DATEFILTER.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[20].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[21].Value = ((decimal)(Original_DATEFILTER.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[20].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string TRANSFILTERNAME, string FROMDATE, string TODATE, string TRANSCODE, global::System.Nullable<decimal> FROMAMOUNT, global::System.Nullable<decimal> TOAMOUNT, string PAYEENAME, global::System.Nullable<decimal> CATEGID, global::System.Nullable<decimal> SUBCATEGID, string ARCHIVED, global::System.Nullable<decimal> DATEFILTER) {
            if ((TRANSFILTERNAME == null)) {
                throw new global::System.ArgumentNullException("TRANSFILTERNAME");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(TRANSFILTERNAME));
            }
            if ((FROMDATE == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(FROMDATE));
            }
            if ((TODATE == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(TODATE));
            }
            if ((TRANSCODE == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(TRANSCODE));
            }
            if ((FROMAMOUNT.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((decimal)(FROMAMOUNT.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((TOAMOUNT.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((decimal)(TOAMOUNT.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((PAYEENAME == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(PAYEENAME));
            }
            if ((CATEGID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((decimal)(CATEGID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((SUBCATEGID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((decimal)(SUBCATEGID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((ARCHIVED == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(ARCHIVED));
            }
            if ((DATEFILTER.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((decimal)(DATEFILTER.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string TRANSFILTERNAME, 
                    string FROMDATE, 
                    string TODATE, 
                    string TRANSCODE, 
                    global::System.Nullable<decimal> FROMAMOUNT, 
                    global::System.Nullable<decimal> TOAMOUNT, 
                    string PAYEENAME, 
                    global::System.Nullable<decimal> CATEGID, 
                    global::System.Nullable<decimal> SUBCATEGID, 
                    string ARCHIVED, 
                    global::System.Nullable<decimal> DATEFILTER, 
                    long Original_TRANSFILTERID, 
                    string Original_TRANSFILTERNAME, 
                    string Original_FROMDATE, 
                    string Original_TODATE, 
                    string Original_TRANSCODE, 
                    global::System.Nullable<decimal> Original_FROMAMOUNT, 
                    global::System.Nullable<decimal> Original_TOAMOUNT, 
                    string Original_PAYEENAME, 
                    global::System.Nullable<decimal> Original_CATEGID, 
                    global::System.Nullable<decimal> Original_SUBCATEGID, 
                    string Original_ARCHIVED, 
                    global::System.Nullable<decimal> Original_DATEFILTER) {
            if ((TRANSFILTERNAME == null)) {
                throw new global::System.ArgumentNullException("TRANSFILTERNAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(TRANSFILTERNAME));
            }
            if ((FROMDATE == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(FROMDATE));
            }
            if ((TODATE == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(TODATE));
            }
            if ((TRANSCODE == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(TRANSCODE));
            }
            if ((FROMAMOUNT.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((decimal)(FROMAMOUNT.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((TOAMOUNT.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((decimal)(TOAMOUNT.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((PAYEENAME == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(PAYEENAME));
            }
            if ((CATEGID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((decimal)(CATEGID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((SUBCATEGID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((decimal)(SUBCATEGID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((ARCHIVED == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(ARCHIVED));
            }
            if ((DATEFILTER.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((decimal)(DATEFILTER.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[11].Value = ((long)(Original_TRANSFILTERID));
            if ((Original_TRANSFILTERNAME == null)) {
                throw new global::System.ArgumentNullException("Original_TRANSFILTERNAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_TRANSFILTERNAME));
            }
            if ((Original_FROMDATE == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_FROMDATE));
            }
            if ((Original_TODATE == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_TODATE));
            }
            if ((Original_TRANSCODE == null)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(Original_TRANSCODE));
            }
            if ((Original_FROMAMOUNT.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[20].Value = ((decimal)(Original_FROMAMOUNT.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((Original_TOAMOUNT.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[22].Value = ((decimal)(Original_TOAMOUNT.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((Original_PAYEENAME == null)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(Original_PAYEENAME));
            }
            if ((Original_CATEGID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[26].Value = ((decimal)(Original_CATEGID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((Original_SUBCATEGID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[28].Value = ((decimal)(Original_SUBCATEGID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((Original_ARCHIVED == null)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[30].Value = ((string)(Original_ARCHIVED));
            }
            if ((Original_DATEFILTER.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[32].Value = ((decimal)(Original_DATEFILTER.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TRANSACTIONSTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::System.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.SQLite.SQLiteTransaction _transaction;
        
        private global::System.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public TRANSACTIONSTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TRANSACTIONS";
            tableMapping.ColumnMappings.Add("TRANSID", "TRANSID");
            tableMapping.ColumnMappings.Add("ACCOUNTID", "ACCOUNTID");
            tableMapping.ColumnMappings.Add("TOACCOUNTID", "TOACCOUNTID");
            tableMapping.ColumnMappings.Add("PAYEEID", "PAYEEID");
            tableMapping.ColumnMappings.Add("TRANSCODE", "TRANSCODE");
            tableMapping.ColumnMappings.Add("TRANSAMOUNT", "TRANSAMOUNT");
            tableMapping.ColumnMappings.Add("STATUS", "STATUS");
            tableMapping.ColumnMappings.Add("TRANSACTIONNUMBER", "TRANSACTIONNUMBER");
            tableMapping.ColumnMappings.Add("NOTES", "NOTES");
            tableMapping.ColumnMappings.Add("CATEGID", "CATEGID");
            tableMapping.ColumnMappings.Add("SUBCATEGID", "SUBCATEGID");
            tableMapping.ColumnMappings.Add("TRANSDATE", "TRANSDATE");
            tableMapping.ColumnMappings.Add("FOLLOWUPID", "FOLLOWUPID");
            tableMapping.ColumnMappings.Add("TOTRANSAMOUNT", "TOTRANSAMOUNT");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [main].[sqlite_default_schema].[TRANSACTIONS] WHERE (([TRANSID] = @Original_TRANSID) AND ([ACCOUNTID] = @Original_ACCOUNTID) AND ((@IsNull_TOACCOUNTID = 1 AND [TOACCOUNTID] IS NULL) OR ([TOACCOUNTID] = @Original_TOACCOUNTID)) AND ([PAYEEID] = @Original_PAYEEID) AND ([TRANSCODE] = @Original_TRANSCODE) AND ([TRANSAMOUNT] = @Original_TRANSAMOUNT) AND ((@IsNull_STATUS = 1 AND [STATUS] IS NULL) OR ([STATUS] = @Original_STATUS)) AND ((@IsNull_TRANSACTIONNUMBER = 1 AND [TRANSACTIONNUMBER] IS NULL) OR ([TRANSACTIONNUMBER] = @Original_TRANSACTIONNUMBER)) AND ((@IsNull_NOTES = 1 AND [NOTES] IS NULL) OR ([NOTES] = @Original_NOTES)) AND ((@IsNull_CATEGID = 1 AND [CATEGID] IS NULL) OR ([CATEGID] = @Original_CATEGID)) AND ((@IsNull_SUBCATEGID = 1 AND [SUBCATEGID] IS NULL) OR ([SUBCATEGID] = @Original_SUBCATEGID)) AND ((@IsNull_TRANSDATE = 1 AND [TRANSDATE] IS NULL) OR ([TRANSDATE] = @Original_TRANSDATE)) AND ((@IsNull_FOLLOWUPID = 1 AND [FOLLOWUPID] IS NULL) OR ([FOLLOWUPID] = @Original_FOLLOWUPID)) AND ((@IsNull_TOTRANSAMOUNT = 1 AND [TOTRANSAMOUNT] IS NULL) OR ([TOTRANSAMOUNT] = @Original_TOTRANSAMOUNT)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SQLite.SQLiteParameter param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TRANSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "TRANSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ACCOUNTID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ACCOUNTID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TOACCOUNTID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TOACCOUNTID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TOACCOUNTID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "TOACCOUNTID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PAYEEID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "PAYEEID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TRANSCODE";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "TRANSCODE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TRANSAMOUNT";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "TRANSAMOUNT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_STATUS";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "STATUS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_STATUS";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "STATUS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TRANSACTIONNUMBER";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TRANSACTIONNUMBER";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TRANSACTIONNUMBER";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "TRANSACTIONNUMBER";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_NOTES";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "NOTES";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_NOTES";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "NOTES";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_CATEGID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "CATEGID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_CATEGID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "CATEGID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SUBCATEGID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SUBCATEGID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SUBCATEGID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SUBCATEGID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TRANSDATE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TRANSDATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TRANSDATE";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "TRANSDATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_FOLLOWUPID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "FOLLOWUPID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_FOLLOWUPID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "FOLLOWUPID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TOTRANSAMOUNT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TOTRANSAMOUNT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TOTRANSAMOUNT";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "TOTRANSAMOUNT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [main].[sqlite_default_schema].[TRANSACTIONS] ([ACCOUNTID], [TOACCOUNTID], [PAYEEID], [TRANSCODE], [TRANSAMOUNT], [STATUS], [TRANSACTIONNUMBER], [NOTES], [CATEGID], [SUBCATEGID], [TRANSDATE], [FOLLOWUPID], [TOTRANSAMOUNT]) VALUES (@ACCOUNTID, @TOACCOUNTID, @PAYEEID, @TRANSCODE, @TRANSAMOUNT, @STATUS, @TRANSACTIONNUMBER, @NOTES, @CATEGID, @SUBCATEGID, @TRANSDATE, @FOLLOWUPID, @TOTRANSAMOUNT)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ACCOUNTID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ACCOUNTID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TOACCOUNTID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "TOACCOUNTID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PAYEEID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "PAYEEID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TRANSCODE";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "TRANSCODE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TRANSAMOUNT";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "TRANSAMOUNT";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@STATUS";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "STATUS";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TRANSACTIONNUMBER";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "TRANSACTIONNUMBER";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@NOTES";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "NOTES";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@CATEGID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "CATEGID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SUBCATEGID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SUBCATEGID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TRANSDATE";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "TRANSDATE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@FOLLOWUPID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "FOLLOWUPID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TOTRANSAMOUNT";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "TOTRANSAMOUNT";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [main].[sqlite_default_schema].[TRANSACTIONS] SET [ACCOUNTID] = @ACCOUNTID, [TOACCOUNTID] = @TOACCOUNTID, [PAYEEID] = @PAYEEID, [TRANSCODE] = @TRANSCODE, [TRANSAMOUNT] = @TRANSAMOUNT, [STATUS] = @STATUS, [TRANSACTIONNUMBER] = @TRANSACTIONNUMBER, [NOTES] = @NOTES, [CATEGID] = @CATEGID, [SUBCATEGID] = @SUBCATEGID, [TRANSDATE] = @TRANSDATE, [FOLLOWUPID] = @FOLLOWUPID, [TOTRANSAMOUNT] = @TOTRANSAMOUNT WHERE (([TRANSID] = @Original_TRANSID) AND ([ACCOUNTID] = @Original_ACCOUNTID) AND ((@IsNull_TOACCOUNTID = 1 AND [TOACCOUNTID] IS NULL) OR ([TOACCOUNTID] = @Original_TOACCOUNTID)) AND ([PAYEEID] = @Original_PAYEEID) AND ([TRANSCODE] = @Original_TRANSCODE) AND ([TRANSAMOUNT] = @Original_TRANSAMOUNT) AND ((@IsNull_STATUS = 1 AND [STATUS] IS NULL) OR ([STATUS] = @Original_STATUS)) AND ((@IsNull_TRANSACTIONNUMBER = 1 AND [TRANSACTIONNUMBER] IS NULL) OR ([TRANSACTIONNUMBER] = @Original_TRANSACTIONNUMBER)) AND ((@IsNull_NOTES = 1 AND [NOTES] IS NULL) OR ([NOTES] = @Original_NOTES)) AND ((@IsNull_CATEGID = 1 AND [CATEGID] IS NULL) OR ([CATEGID] = @Original_CATEGID)) AND ((@IsNull_SUBCATEGID = 1 AND [SUBCATEGID] IS NULL) OR ([SUBCATEGID] = @Original_SUBCATEGID)) AND ((@IsNull_TRANSDATE = 1 AND [TRANSDATE] IS NULL) OR ([TRANSDATE] = @Original_TRANSDATE)) AND ((@IsNull_FOLLOWUPID = 1 AND [FOLLOWUPID] IS NULL) OR ([FOLLOWUPID] = @Original_FOLLOWUPID)) AND ((@IsNull_TOTRANSAMOUNT = 1 AND [TOTRANSAMOUNT] IS NULL) OR ([TOTRANSAMOUNT] = @Original_TOTRANSAMOUNT)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ACCOUNTID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ACCOUNTID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TOACCOUNTID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "TOACCOUNTID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PAYEEID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "PAYEEID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TRANSCODE";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "TRANSCODE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TRANSAMOUNT";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "TRANSAMOUNT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@STATUS";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "STATUS";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TRANSACTIONNUMBER";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "TRANSACTIONNUMBER";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@NOTES";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "NOTES";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@CATEGID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "CATEGID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SUBCATEGID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SUBCATEGID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TRANSDATE";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "TRANSDATE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@FOLLOWUPID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "FOLLOWUPID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TOTRANSAMOUNT";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "TOTRANSAMOUNT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TRANSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "TRANSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ACCOUNTID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ACCOUNTID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TOACCOUNTID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TOACCOUNTID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TOACCOUNTID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "TOACCOUNTID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PAYEEID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "PAYEEID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TRANSCODE";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "TRANSCODE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TRANSAMOUNT";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "TRANSAMOUNT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_STATUS";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "STATUS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_STATUS";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "STATUS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TRANSACTIONNUMBER";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TRANSACTIONNUMBER";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TRANSACTIONNUMBER";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "TRANSACTIONNUMBER";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_NOTES";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "NOTES";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_NOTES";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "NOTES";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_CATEGID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "CATEGID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_CATEGID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "CATEGID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SUBCATEGID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SUBCATEGID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SUBCATEGID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SUBCATEGID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TRANSDATE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TRANSDATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TRANSDATE";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "TRANSDATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_FOLLOWUPID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "FOLLOWUPID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_FOLLOWUPID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "FOLLOWUPID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TOTRANSAMOUNT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TOTRANSAMOUNT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TOTRANSAMOUNT";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "TOTRANSAMOUNT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = global::MoneyManager.Properties.Settings.Default.creddataCS;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::System.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [TRANSID], [ACCOUNTID], [TOACCOUNTID], [PAYEEID], [TRANSCODE], [TRANSAMOUN" +
                "T], [STATUS], [TRANSACTIONNUMBER], [NOTES], [CATEGID], [SUBCATEGID], [TRANSDATE]" +
                ", [FOLLOWUPID], [TOTRANSAMOUNT] FROM [TRANSACTIONS]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(creddataDataSet.TRANSACTIONSDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual creddataDataSet.TRANSACTIONSDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            creddataDataSet.TRANSACTIONSDataTable dataTable = new creddataDataSet.TRANSACTIONSDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(creddataDataSet.TRANSACTIONSDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(creddataDataSet dataSet) {
            return this.Adapter.Update(dataSet, "TRANSACTIONS");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_TRANSID, long Original_ACCOUNTID, global::System.Nullable<long> Original_TOACCOUNTID, long Original_PAYEEID, string Original_TRANSCODE, decimal Original_TRANSAMOUNT, string Original_STATUS, string Original_TRANSACTIONNUMBER, string Original_NOTES, global::System.Nullable<long> Original_CATEGID, global::System.Nullable<long> Original_SUBCATEGID, string Original_TRANSDATE, global::System.Nullable<long> Original_FOLLOWUPID, global::System.Nullable<decimal> Original_TOTRANSAMOUNT) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_TRANSID));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((long)(Original_ACCOUNTID));
            if ((Original_TOACCOUNTID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((long)(Original_TOACCOUNTID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[4].Value = ((long)(Original_PAYEEID));
            if ((Original_TRANSCODE == null)) {
                throw new global::System.ArgumentNullException("Original_TRANSCODE");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_TRANSCODE));
            }
            this.Adapter.DeleteCommand.Parameters[6].Value = ((decimal)(Original_TRANSAMOUNT));
            if ((Original_STATUS == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_STATUS));
            }
            if ((Original_TRANSACTIONNUMBER == null)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_TRANSACTIONNUMBER));
            }
            if ((Original_NOTES == null)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_NOTES));
            }
            if ((Original_CATEGID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((long)(Original_CATEGID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((Original_SUBCATEGID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((long)(Original_SUBCATEGID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((Original_TRANSDATE == null)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((string)(Original_TRANSDATE));
            }
            if ((Original_FOLLOWUPID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((long)(Original_FOLLOWUPID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((Original_TOTRANSAMOUNT.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((decimal)(Original_TOTRANSAMOUNT.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(long ACCOUNTID, global::System.Nullable<long> TOACCOUNTID, long PAYEEID, string TRANSCODE, decimal TRANSAMOUNT, string STATUS, string TRANSACTIONNUMBER, string NOTES, global::System.Nullable<long> CATEGID, global::System.Nullable<long> SUBCATEGID, string TRANSDATE, global::System.Nullable<long> FOLLOWUPID, global::System.Nullable<decimal> TOTRANSAMOUNT) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((long)(ACCOUNTID));
            if ((TOACCOUNTID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((long)(TOACCOUNTID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((long)(PAYEEID));
            if ((TRANSCODE == null)) {
                throw new global::System.ArgumentNullException("TRANSCODE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(TRANSCODE));
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((decimal)(TRANSAMOUNT));
            if ((STATUS == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(STATUS));
            }
            if ((TRANSACTIONNUMBER == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(TRANSACTIONNUMBER));
            }
            if ((NOTES == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(NOTES));
            }
            if ((CATEGID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((long)(CATEGID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((SUBCATEGID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((long)(SUBCATEGID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((TRANSDATE == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(TRANSDATE));
            }
            if ((FOLLOWUPID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((long)(FOLLOWUPID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((TOTRANSAMOUNT.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((decimal)(TOTRANSAMOUNT.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    long ACCOUNTID, 
                    global::System.Nullable<long> TOACCOUNTID, 
                    long PAYEEID, 
                    string TRANSCODE, 
                    decimal TRANSAMOUNT, 
                    string STATUS, 
                    string TRANSACTIONNUMBER, 
                    string NOTES, 
                    global::System.Nullable<long> CATEGID, 
                    global::System.Nullable<long> SUBCATEGID, 
                    string TRANSDATE, 
                    global::System.Nullable<long> FOLLOWUPID, 
                    global::System.Nullable<decimal> TOTRANSAMOUNT, 
                    long Original_TRANSID, 
                    long Original_ACCOUNTID, 
                    global::System.Nullable<long> Original_TOACCOUNTID, 
                    long Original_PAYEEID, 
                    string Original_TRANSCODE, 
                    decimal Original_TRANSAMOUNT, 
                    string Original_STATUS, 
                    string Original_TRANSACTIONNUMBER, 
                    string Original_NOTES, 
                    global::System.Nullable<long> Original_CATEGID, 
                    global::System.Nullable<long> Original_SUBCATEGID, 
                    string Original_TRANSDATE, 
                    global::System.Nullable<long> Original_FOLLOWUPID, 
                    global::System.Nullable<decimal> Original_TOTRANSAMOUNT) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(ACCOUNTID));
            if ((TOACCOUNTID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((long)(TOACCOUNTID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((long)(PAYEEID));
            if ((TRANSCODE == null)) {
                throw new global::System.ArgumentNullException("TRANSCODE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(TRANSCODE));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((decimal)(TRANSAMOUNT));
            if ((STATUS == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(STATUS));
            }
            if ((TRANSACTIONNUMBER == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(TRANSACTIONNUMBER));
            }
            if ((NOTES == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(NOTES));
            }
            if ((CATEGID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((long)(CATEGID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((SUBCATEGID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((long)(SUBCATEGID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((TRANSDATE == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(TRANSDATE));
            }
            if ((FOLLOWUPID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((long)(FOLLOWUPID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((TOTRANSAMOUNT.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((decimal)(TOTRANSAMOUNT.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[13].Value = ((long)(Original_TRANSID));
            this.Adapter.UpdateCommand.Parameters[14].Value = ((long)(Original_ACCOUNTID));
            if ((Original_TOACCOUNTID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((long)(Original_TOACCOUNTID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[17].Value = ((long)(Original_PAYEEID));
            if ((Original_TRANSCODE == null)) {
                throw new global::System.ArgumentNullException("Original_TRANSCODE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(Original_TRANSCODE));
            }
            this.Adapter.UpdateCommand.Parameters[19].Value = ((decimal)(Original_TRANSAMOUNT));
            if ((Original_STATUS == null)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Original_STATUS));
            }
            if ((Original_TRANSACTIONNUMBER == null)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(Original_TRANSACTIONNUMBER));
            }
            if ((Original_NOTES == null)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[25].Value = ((string)(Original_NOTES));
            }
            if ((Original_CATEGID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[27].Value = ((long)(Original_CATEGID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            if ((Original_SUBCATEGID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[29].Value = ((long)(Original_SUBCATEGID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            if ((Original_TRANSDATE == null)) {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[31].Value = ((string)(Original_TRANSDATE));
            }
            if ((Original_FOLLOWUPID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[33].Value = ((long)(Original_FOLLOWUPID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            if ((Original_TOTRANSAMOUNT.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[35].Value = ((decimal)(Original_TOTRANSAMOUNT.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[35].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class USER_SETTINGSTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::System.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.SQLite.SQLiteTransaction _transaction;
        
        private global::System.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public USER_SETTINGSTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "USER_SETTINGS";
            tableMapping.ColumnMappings.Add("INFOID", "INFOID");
            tableMapping.ColumnMappings.Add("INFONAME", "INFONAME");
            tableMapping.ColumnMappings.Add("INFOVALUE", "INFOVALUE");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [main].[sqlite_default_schema].[USER_SETTINGS] WHERE (([INFOID] = @Or" +
                "iginal_INFOID) AND ([INFONAME] = @Original_INFONAME) AND ((@IsNull_INFOVALUE = 1" +
                " AND [INFOVALUE] IS NULL) OR ([INFOVALUE] = @Original_INFOVALUE)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SQLite.SQLiteParameter param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_INFOID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "INFOID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_INFONAME";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "INFONAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_INFOVALUE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "INFOVALUE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_INFOVALUE";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "INFOVALUE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [main].[sqlite_default_schema].[USER_SETTINGS] ([INFOID], [INFONAME]," +
                " [INFOVALUE]) VALUES (@INFOID, @INFONAME, @INFOVALUE)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@INFOID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "INFOID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@INFONAME";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "INFONAME";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@INFOVALUE";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "INFOVALUE";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [main].[sqlite_default_schema].[USER_SETTINGS] SET [INFOID] = @INFOID, [INFONAME] = @INFONAME, [INFOVALUE] = @INFOVALUE WHERE (([INFOID] = @Original_INFOID) AND ([INFONAME] = @Original_INFONAME) AND ((@IsNull_INFOVALUE = 1 AND [INFOVALUE] IS NULL) OR ([INFOVALUE] = @Original_INFOVALUE)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@INFOID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "INFOID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@INFONAME";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "INFONAME";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@INFOVALUE";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "INFOVALUE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_INFOID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "INFOID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_INFONAME";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "INFONAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_INFOVALUE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "INFOVALUE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_INFOVALUE";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "INFOVALUE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = global::MoneyManager.Properties.Settings.Default.creddataCS;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::System.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [INFOID], [INFONAME], [INFOVALUE] FROM [USER_SETTINGS]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(creddataDataSet.USER_SETTINGSDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual creddataDataSet.USER_SETTINGSDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            creddataDataSet.USER_SETTINGSDataTable dataTable = new creddataDataSet.USER_SETTINGSDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(creddataDataSet.USER_SETTINGSDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(creddataDataSet dataSet) {
            return this.Adapter.Update(dataSet, "USER_SETTINGS");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_INFOID, string Original_INFONAME, string Original_INFOVALUE) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_INFOID));
            if ((Original_INFONAME == null)) {
                throw new global::System.ArgumentNullException("Original_INFONAME");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_INFONAME));
            }
            if ((Original_INFOVALUE == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_INFOVALUE));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(long INFOID, string INFONAME, string INFOVALUE) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((long)(INFOID));
            if ((INFONAME == null)) {
                throw new global::System.ArgumentNullException("INFONAME");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(INFONAME));
            }
            if ((INFOVALUE == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(INFOVALUE));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(long INFOID, string INFONAME, string INFOVALUE, long Original_INFOID, string Original_INFONAME, string Original_INFOVALUE) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(INFOID));
            if ((INFONAME == null)) {
                throw new global::System.ArgumentNullException("INFONAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(INFONAME));
            }
            if ((INFOVALUE == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(INFOVALUE));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((long)(Original_INFOID));
            if ((Original_INFONAME == null)) {
                throw new global::System.ArgumentNullException("Original_INFONAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_INFONAME));
            }
            if ((Original_INFOVALUE == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_INFOVALUE));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string INFONAME, string INFOVALUE, long Original_INFOID, string Original_INFONAME, string Original_INFOVALUE) {
            return this.Update(Original_INFOID, INFONAME, INFOVALUE, Original_INFOID, Original_INFONAME, Original_INFOVALUE);
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private ACCOUNTSTableAdapter _aCCOUNTSTableAdapter;
        
        private ASSETSTableAdapter _aSSETSTableAdapter;
        
        private BUDGET_DETAILTableAdapter _bUDGET_DETAILTableAdapter;
        
        private BUDGET_HEADERTableAdapter _bUDGET_HEADERTableAdapter;
        
        private CATEGORIESTableAdapter _cATEGORIESTableAdapter;
        
        private GRID_SETTINGSTableAdapter _gRID_SETTINGSTableAdapter;
        
        private PAYEE_IMPORTTableAdapter _pAYEE_IMPORTTableAdapter;
        
        private PAYEESTableAdapter _pAYEESTableAdapter;
        
        private REP_FILTERSTableAdapter _rEP_FILTERSTableAdapter;
        
        private REPEAT_SPLIT_TRANSACTIONSTableAdapter _rEPEAT_SPLIT_TRANSACTIONSTableAdapter;
        
        private REPEAT_TRANSACTIONSTableAdapter _rEPEAT_TRANSACTIONSTableAdapter;
        
        private SPLIT_TRANSACTIONSTableAdapter _sPLIT_TRANSACTIONSTableAdapter;
        
        private SUB_CATEGORIESTableAdapter _sUB_CATEGORIESTableAdapter;
        
        private TRANS_FILTERSTableAdapter _tRANS_FILTERSTableAdapter;
        
        private TRANSACTIONSTableAdapter _tRANSACTIONSTableAdapter;
        
        private USER_SETTINGSTableAdapter _uSER_SETTINGSTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public ACCOUNTSTableAdapter ACCOUNTSTableAdapter {
            get {
                return this._aCCOUNTSTableAdapter;
            }
            set {
                this._aCCOUNTSTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public ASSETSTableAdapter ASSETSTableAdapter {
            get {
                return this._aSSETSTableAdapter;
            }
            set {
                this._aSSETSTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public BUDGET_DETAILTableAdapter BUDGET_DETAILTableAdapter {
            get {
                return this._bUDGET_DETAILTableAdapter;
            }
            set {
                this._bUDGET_DETAILTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public BUDGET_HEADERTableAdapter BUDGET_HEADERTableAdapter {
            get {
                return this._bUDGET_HEADERTableAdapter;
            }
            set {
                this._bUDGET_HEADERTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public CATEGORIESTableAdapter CATEGORIESTableAdapter {
            get {
                return this._cATEGORIESTableAdapter;
            }
            set {
                this._cATEGORIESTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public GRID_SETTINGSTableAdapter GRID_SETTINGSTableAdapter {
            get {
                return this._gRID_SETTINGSTableAdapter;
            }
            set {
                this._gRID_SETTINGSTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public PAYEE_IMPORTTableAdapter PAYEE_IMPORTTableAdapter {
            get {
                return this._pAYEE_IMPORTTableAdapter;
            }
            set {
                this._pAYEE_IMPORTTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public PAYEESTableAdapter PAYEESTableAdapter {
            get {
                return this._pAYEESTableAdapter;
            }
            set {
                this._pAYEESTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public REP_FILTERSTableAdapter REP_FILTERSTableAdapter {
            get {
                return this._rEP_FILTERSTableAdapter;
            }
            set {
                this._rEP_FILTERSTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public REPEAT_SPLIT_TRANSACTIONSTableAdapter REPEAT_SPLIT_TRANSACTIONSTableAdapter {
            get {
                return this._rEPEAT_SPLIT_TRANSACTIONSTableAdapter;
            }
            set {
                this._rEPEAT_SPLIT_TRANSACTIONSTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public REPEAT_TRANSACTIONSTableAdapter REPEAT_TRANSACTIONSTableAdapter {
            get {
                return this._rEPEAT_TRANSACTIONSTableAdapter;
            }
            set {
                this._rEPEAT_TRANSACTIONSTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public SPLIT_TRANSACTIONSTableAdapter SPLIT_TRANSACTIONSTableAdapter {
            get {
                return this._sPLIT_TRANSACTIONSTableAdapter;
            }
            set {
                this._sPLIT_TRANSACTIONSTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public SUB_CATEGORIESTableAdapter SUB_CATEGORIESTableAdapter {
            get {
                return this._sUB_CATEGORIESTableAdapter;
            }
            set {
                this._sUB_CATEGORIESTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public TRANS_FILTERSTableAdapter TRANS_FILTERSTableAdapter {
            get {
                return this._tRANS_FILTERSTableAdapter;
            }
            set {
                this._tRANS_FILTERSTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public TRANSACTIONSTableAdapter TRANSACTIONSTableAdapter {
            get {
                return this._tRANSACTIONSTableAdapter;
            }
            set {
                this._tRANSACTIONSTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public USER_SETTINGSTableAdapter USER_SETTINGSTableAdapter {
            get {
                return this._uSER_SETTINGSTableAdapter;
            }
            set {
                this._uSER_SETTINGSTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._aCCOUNTSTableAdapter != null) 
                            && (this._aCCOUNTSTableAdapter.Connection != null))) {
                    return this._aCCOUNTSTableAdapter.Connection;
                }
                if (((this._aSSETSTableAdapter != null) 
                            && (this._aSSETSTableAdapter.Connection != null))) {
                    return this._aSSETSTableAdapter.Connection;
                }
                if (((this._bUDGET_DETAILTableAdapter != null) 
                            && (this._bUDGET_DETAILTableAdapter.Connection != null))) {
                    return this._bUDGET_DETAILTableAdapter.Connection;
                }
                if (((this._bUDGET_HEADERTableAdapter != null) 
                            && (this._bUDGET_HEADERTableAdapter.Connection != null))) {
                    return this._bUDGET_HEADERTableAdapter.Connection;
                }
                if (((this._cATEGORIESTableAdapter != null) 
                            && (this._cATEGORIESTableAdapter.Connection != null))) {
                    return this._cATEGORIESTableAdapter.Connection;
                }
                if (((this._gRID_SETTINGSTableAdapter != null) 
                            && (this._gRID_SETTINGSTableAdapter.Connection != null))) {
                    return this._gRID_SETTINGSTableAdapter.Connection;
                }
                if (((this._pAYEE_IMPORTTableAdapter != null) 
                            && (this._pAYEE_IMPORTTableAdapter.Connection != null))) {
                    return this._pAYEE_IMPORTTableAdapter.Connection;
                }
                if (((this._pAYEESTableAdapter != null) 
                            && (this._pAYEESTableAdapter.Connection != null))) {
                    return this._pAYEESTableAdapter.Connection;
                }
                if (((this._rEP_FILTERSTableAdapter != null) 
                            && (this._rEP_FILTERSTableAdapter.Connection != null))) {
                    return this._rEP_FILTERSTableAdapter.Connection;
                }
                if (((this._rEPEAT_SPLIT_TRANSACTIONSTableAdapter != null) 
                            && (this._rEPEAT_SPLIT_TRANSACTIONSTableAdapter.Connection != null))) {
                    return this._rEPEAT_SPLIT_TRANSACTIONSTableAdapter.Connection;
                }
                if (((this._rEPEAT_TRANSACTIONSTableAdapter != null) 
                            && (this._rEPEAT_TRANSACTIONSTableAdapter.Connection != null))) {
                    return this._rEPEAT_TRANSACTIONSTableAdapter.Connection;
                }
                if (((this._sPLIT_TRANSACTIONSTableAdapter != null) 
                            && (this._sPLIT_TRANSACTIONSTableAdapter.Connection != null))) {
                    return this._sPLIT_TRANSACTIONSTableAdapter.Connection;
                }
                if (((this._sUB_CATEGORIESTableAdapter != null) 
                            && (this._sUB_CATEGORIESTableAdapter.Connection != null))) {
                    return this._sUB_CATEGORIESTableAdapter.Connection;
                }
                if (((this._tRANS_FILTERSTableAdapter != null) 
                            && (this._tRANS_FILTERSTableAdapter.Connection != null))) {
                    return this._tRANS_FILTERSTableAdapter.Connection;
                }
                if (((this._tRANSACTIONSTableAdapter != null) 
                            && (this._tRANSACTIONSTableAdapter.Connection != null))) {
                    return this._tRANSACTIONSTableAdapter.Connection;
                }
                if (((this._uSER_SETTINGSTableAdapter != null) 
                            && (this._uSER_SETTINGSTableAdapter.Connection != null))) {
                    return this._uSER_SETTINGSTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._aCCOUNTSTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._aSSETSTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._bUDGET_DETAILTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._bUDGET_HEADERTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._cATEGORIESTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._gRID_SETTINGSTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._pAYEE_IMPORTTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._pAYEESTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._rEP_FILTERSTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._rEPEAT_SPLIT_TRANSACTIONSTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._rEPEAT_TRANSACTIONSTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._sPLIT_TRANSACTIONSTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._sUB_CATEGORIESTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._tRANS_FILTERSTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._tRANSACTIONSTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._uSER_SETTINGSTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateUpdatedRows(creddataDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._aCCOUNTSTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.ACCOUNTS.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._aCCOUNTSTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._aSSETSTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.ASSETS.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._aSSETSTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._bUDGET_DETAILTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.BUDGET_DETAIL.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._bUDGET_DETAILTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._bUDGET_HEADERTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.BUDGET_HEADER.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._bUDGET_HEADERTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._cATEGORIESTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.CATEGORIES.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._cATEGORIESTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._gRID_SETTINGSTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.GRID_SETTINGS.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._gRID_SETTINGSTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._pAYEE_IMPORTTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.PAYEE_IMPORT.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._pAYEE_IMPORTTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._pAYEESTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.PAYEES.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._pAYEESTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._rEP_FILTERSTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.REP_FILTERS.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._rEP_FILTERSTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._rEPEAT_SPLIT_TRANSACTIONSTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.REPEAT_SPLIT_TRANSACTIONS.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._rEPEAT_SPLIT_TRANSACTIONSTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._rEPEAT_TRANSACTIONSTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.REPEAT_TRANSACTIONS.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._rEPEAT_TRANSACTIONSTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._sPLIT_TRANSACTIONSTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.SPLIT_TRANSACTIONS.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._sPLIT_TRANSACTIONSTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._sUB_CATEGORIESTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.SUB_CATEGORIES.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._sUB_CATEGORIESTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._tRANS_FILTERSTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.TRANS_FILTERS.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._tRANS_FILTERSTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._tRANSACTIONSTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.TRANSACTIONS.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._tRANSACTIONSTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._uSER_SETTINGSTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.USER_SETTINGS.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._uSER_SETTINGSTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateInsertedRows(creddataDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._aCCOUNTSTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.ACCOUNTS.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._aCCOUNTSTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._aSSETSTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.ASSETS.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._aSSETSTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._bUDGET_DETAILTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.BUDGET_DETAIL.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._bUDGET_DETAILTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._bUDGET_HEADERTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.BUDGET_HEADER.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._bUDGET_HEADERTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._cATEGORIESTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.CATEGORIES.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._cATEGORIESTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._gRID_SETTINGSTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.GRID_SETTINGS.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._gRID_SETTINGSTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._pAYEE_IMPORTTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.PAYEE_IMPORT.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._pAYEE_IMPORTTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._pAYEESTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.PAYEES.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._pAYEESTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._rEP_FILTERSTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.REP_FILTERS.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._rEP_FILTERSTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._rEPEAT_SPLIT_TRANSACTIONSTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.REPEAT_SPLIT_TRANSACTIONS.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._rEPEAT_SPLIT_TRANSACTIONSTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._rEPEAT_TRANSACTIONSTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.REPEAT_TRANSACTIONS.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._rEPEAT_TRANSACTIONSTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._sPLIT_TRANSACTIONSTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.SPLIT_TRANSACTIONS.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._sPLIT_TRANSACTIONSTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._sUB_CATEGORIESTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.SUB_CATEGORIES.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._sUB_CATEGORIESTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._tRANS_FILTERSTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.TRANS_FILTERS.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._tRANS_FILTERSTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._tRANSACTIONSTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.TRANSACTIONS.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._tRANSACTIONSTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._uSER_SETTINGSTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.USER_SETTINGS.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._uSER_SETTINGSTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateDeletedRows(creddataDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._uSER_SETTINGSTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.USER_SETTINGS.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._uSER_SETTINGSTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._tRANSACTIONSTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.TRANSACTIONS.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._tRANSACTIONSTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._tRANS_FILTERSTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.TRANS_FILTERS.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._tRANS_FILTERSTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._sUB_CATEGORIESTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.SUB_CATEGORIES.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._sUB_CATEGORIESTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._sPLIT_TRANSACTIONSTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.SPLIT_TRANSACTIONS.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._sPLIT_TRANSACTIONSTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._rEPEAT_TRANSACTIONSTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.REPEAT_TRANSACTIONS.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._rEPEAT_TRANSACTIONSTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._rEPEAT_SPLIT_TRANSACTIONSTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.REPEAT_SPLIT_TRANSACTIONS.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._rEPEAT_SPLIT_TRANSACTIONSTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._rEP_FILTERSTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.REP_FILTERS.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._rEP_FILTERSTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._pAYEESTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.PAYEES.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._pAYEESTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._pAYEE_IMPORTTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.PAYEE_IMPORT.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._pAYEE_IMPORTTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._gRID_SETTINGSTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.GRID_SETTINGS.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._gRID_SETTINGSTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._cATEGORIESTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.CATEGORIES.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._cATEGORIESTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._bUDGET_HEADERTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.BUDGET_HEADER.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._bUDGET_HEADERTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._bUDGET_DETAILTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.BUDGET_DETAIL.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._bUDGET_DETAILTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._aSSETSTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.ASSETS.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._aSSETSTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._aCCOUNTSTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.ACCOUNTS.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._aCCOUNTSTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual int UpdateAll(creddataDataSet dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._aCCOUNTSTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._aCCOUNTSTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._aSSETSTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._aSSETSTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._bUDGET_DETAILTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._bUDGET_DETAILTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._bUDGET_HEADERTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._bUDGET_HEADERTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._cATEGORIESTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._cATEGORIESTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._gRID_SETTINGSTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._gRID_SETTINGSTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._pAYEE_IMPORTTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._pAYEE_IMPORTTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._pAYEESTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._pAYEESTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._rEP_FILTERSTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._rEP_FILTERSTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._rEPEAT_SPLIT_TRANSACTIONSTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._rEPEAT_SPLIT_TRANSACTIONSTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._rEPEAT_TRANSACTIONSTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._rEPEAT_TRANSACTIONSTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._sPLIT_TRANSACTIONSTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._sPLIT_TRANSACTIONSTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._sUB_CATEGORIESTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._sUB_CATEGORIESTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._tRANS_FILTERSTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._tRANS_FILTERSTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._tRANSACTIONSTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._tRANSACTIONSTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._uSER_SETTINGSTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._uSER_SETTINGSTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._aCCOUNTSTableAdapter != null)) {
                    revertConnections.Add(this._aCCOUNTSTableAdapter, this._aCCOUNTSTableAdapter.Connection);
                    this._aCCOUNTSTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(workConnection));
                    this._aCCOUNTSTableAdapter.Transaction = ((global::System.Data.SQLite.SQLiteTransaction)(workTransaction));
                    if (this._aCCOUNTSTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._aCCOUNTSTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._aCCOUNTSTableAdapter.Adapter);
                    }
                }
                if ((this._aSSETSTableAdapter != null)) {
                    revertConnections.Add(this._aSSETSTableAdapter, this._aSSETSTableAdapter.Connection);
                    this._aSSETSTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(workConnection));
                    this._aSSETSTableAdapter.Transaction = ((global::System.Data.SQLite.SQLiteTransaction)(workTransaction));
                    if (this._aSSETSTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._aSSETSTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._aSSETSTableAdapter.Adapter);
                    }
                }
                if ((this._bUDGET_DETAILTableAdapter != null)) {
                    revertConnections.Add(this._bUDGET_DETAILTableAdapter, this._bUDGET_DETAILTableAdapter.Connection);
                    this._bUDGET_DETAILTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(workConnection));
                    this._bUDGET_DETAILTableAdapter.Transaction = ((global::System.Data.SQLite.SQLiteTransaction)(workTransaction));
                    if (this._bUDGET_DETAILTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._bUDGET_DETAILTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._bUDGET_DETAILTableAdapter.Adapter);
                    }
                }
                if ((this._bUDGET_HEADERTableAdapter != null)) {
                    revertConnections.Add(this._bUDGET_HEADERTableAdapter, this._bUDGET_HEADERTableAdapter.Connection);
                    this._bUDGET_HEADERTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(workConnection));
                    this._bUDGET_HEADERTableAdapter.Transaction = ((global::System.Data.SQLite.SQLiteTransaction)(workTransaction));
                    if (this._bUDGET_HEADERTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._bUDGET_HEADERTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._bUDGET_HEADERTableAdapter.Adapter);
                    }
                }
                if ((this._cATEGORIESTableAdapter != null)) {
                    revertConnections.Add(this._cATEGORIESTableAdapter, this._cATEGORIESTableAdapter.Connection);
                    this._cATEGORIESTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(workConnection));
                    this._cATEGORIESTableAdapter.Transaction = ((global::System.Data.SQLite.SQLiteTransaction)(workTransaction));
                    if (this._cATEGORIESTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._cATEGORIESTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._cATEGORIESTableAdapter.Adapter);
                    }
                }
                if ((this._gRID_SETTINGSTableAdapter != null)) {
                    revertConnections.Add(this._gRID_SETTINGSTableAdapter, this._gRID_SETTINGSTableAdapter.Connection);
                    this._gRID_SETTINGSTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(workConnection));
                    this._gRID_SETTINGSTableAdapter.Transaction = ((global::System.Data.SQLite.SQLiteTransaction)(workTransaction));
                    if (this._gRID_SETTINGSTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._gRID_SETTINGSTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._gRID_SETTINGSTableAdapter.Adapter);
                    }
                }
                if ((this._pAYEE_IMPORTTableAdapter != null)) {
                    revertConnections.Add(this._pAYEE_IMPORTTableAdapter, this._pAYEE_IMPORTTableAdapter.Connection);
                    this._pAYEE_IMPORTTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(workConnection));
                    this._pAYEE_IMPORTTableAdapter.Transaction = ((global::System.Data.SQLite.SQLiteTransaction)(workTransaction));
                    if (this._pAYEE_IMPORTTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._pAYEE_IMPORTTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._pAYEE_IMPORTTableAdapter.Adapter);
                    }
                }
                if ((this._pAYEESTableAdapter != null)) {
                    revertConnections.Add(this._pAYEESTableAdapter, this._pAYEESTableAdapter.Connection);
                    this._pAYEESTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(workConnection));
                    this._pAYEESTableAdapter.Transaction = ((global::System.Data.SQLite.SQLiteTransaction)(workTransaction));
                    if (this._pAYEESTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._pAYEESTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._pAYEESTableAdapter.Adapter);
                    }
                }
                if ((this._rEP_FILTERSTableAdapter != null)) {
                    revertConnections.Add(this._rEP_FILTERSTableAdapter, this._rEP_FILTERSTableAdapter.Connection);
                    this._rEP_FILTERSTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(workConnection));
                    this._rEP_FILTERSTableAdapter.Transaction = ((global::System.Data.SQLite.SQLiteTransaction)(workTransaction));
                    if (this._rEP_FILTERSTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._rEP_FILTERSTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._rEP_FILTERSTableAdapter.Adapter);
                    }
                }
                if ((this._rEPEAT_SPLIT_TRANSACTIONSTableAdapter != null)) {
                    revertConnections.Add(this._rEPEAT_SPLIT_TRANSACTIONSTableAdapter, this._rEPEAT_SPLIT_TRANSACTIONSTableAdapter.Connection);
                    this._rEPEAT_SPLIT_TRANSACTIONSTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(workConnection));
                    this._rEPEAT_SPLIT_TRANSACTIONSTableAdapter.Transaction = ((global::System.Data.SQLite.SQLiteTransaction)(workTransaction));
                    if (this._rEPEAT_SPLIT_TRANSACTIONSTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._rEPEAT_SPLIT_TRANSACTIONSTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._rEPEAT_SPLIT_TRANSACTIONSTableAdapter.Adapter);
                    }
                }
                if ((this._rEPEAT_TRANSACTIONSTableAdapter != null)) {
                    revertConnections.Add(this._rEPEAT_TRANSACTIONSTableAdapter, this._rEPEAT_TRANSACTIONSTableAdapter.Connection);
                    this._rEPEAT_TRANSACTIONSTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(workConnection));
                    this._rEPEAT_TRANSACTIONSTableAdapter.Transaction = ((global::System.Data.SQLite.SQLiteTransaction)(workTransaction));
                    if (this._rEPEAT_TRANSACTIONSTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._rEPEAT_TRANSACTIONSTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._rEPEAT_TRANSACTIONSTableAdapter.Adapter);
                    }
                }
                if ((this._sPLIT_TRANSACTIONSTableAdapter != null)) {
                    revertConnections.Add(this._sPLIT_TRANSACTIONSTableAdapter, this._sPLIT_TRANSACTIONSTableAdapter.Connection);
                    this._sPLIT_TRANSACTIONSTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(workConnection));
                    this._sPLIT_TRANSACTIONSTableAdapter.Transaction = ((global::System.Data.SQLite.SQLiteTransaction)(workTransaction));
                    if (this._sPLIT_TRANSACTIONSTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._sPLIT_TRANSACTIONSTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._sPLIT_TRANSACTIONSTableAdapter.Adapter);
                    }
                }
                if ((this._sUB_CATEGORIESTableAdapter != null)) {
                    revertConnections.Add(this._sUB_CATEGORIESTableAdapter, this._sUB_CATEGORIESTableAdapter.Connection);
                    this._sUB_CATEGORIESTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(workConnection));
                    this._sUB_CATEGORIESTableAdapter.Transaction = ((global::System.Data.SQLite.SQLiteTransaction)(workTransaction));
                    if (this._sUB_CATEGORIESTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._sUB_CATEGORIESTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._sUB_CATEGORIESTableAdapter.Adapter);
                    }
                }
                if ((this._tRANS_FILTERSTableAdapter != null)) {
                    revertConnections.Add(this._tRANS_FILTERSTableAdapter, this._tRANS_FILTERSTableAdapter.Connection);
                    this._tRANS_FILTERSTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(workConnection));
                    this._tRANS_FILTERSTableAdapter.Transaction = ((global::System.Data.SQLite.SQLiteTransaction)(workTransaction));
                    if (this._tRANS_FILTERSTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._tRANS_FILTERSTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._tRANS_FILTERSTableAdapter.Adapter);
                    }
                }
                if ((this._tRANSACTIONSTableAdapter != null)) {
                    revertConnections.Add(this._tRANSACTIONSTableAdapter, this._tRANSACTIONSTableAdapter.Connection);
                    this._tRANSACTIONSTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(workConnection));
                    this._tRANSACTIONSTableAdapter.Transaction = ((global::System.Data.SQLite.SQLiteTransaction)(workTransaction));
                    if (this._tRANSACTIONSTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._tRANSACTIONSTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._tRANSACTIONSTableAdapter.Adapter);
                    }
                }
                if ((this._uSER_SETTINGSTableAdapter != null)) {
                    revertConnections.Add(this._uSER_SETTINGSTableAdapter, this._uSER_SETTINGSTableAdapter.Connection);
                    this._uSER_SETTINGSTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(workConnection));
                    this._uSER_SETTINGSTableAdapter.Transaction = ((global::System.Data.SQLite.SQLiteTransaction)(workTransaction));
                    if (this._uSER_SETTINGSTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._uSER_SETTINGSTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._uSER_SETTINGSTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._aCCOUNTSTableAdapter != null)) {
                    this._aCCOUNTSTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(revertConnections[this._aCCOUNTSTableAdapter]));
                    this._aCCOUNTSTableAdapter.Transaction = null;
                }
                if ((this._aSSETSTableAdapter != null)) {
                    this._aSSETSTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(revertConnections[this._aSSETSTableAdapter]));
                    this._aSSETSTableAdapter.Transaction = null;
                }
                if ((this._bUDGET_DETAILTableAdapter != null)) {
                    this._bUDGET_DETAILTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(revertConnections[this._bUDGET_DETAILTableAdapter]));
                    this._bUDGET_DETAILTableAdapter.Transaction = null;
                }
                if ((this._bUDGET_HEADERTableAdapter != null)) {
                    this._bUDGET_HEADERTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(revertConnections[this._bUDGET_HEADERTableAdapter]));
                    this._bUDGET_HEADERTableAdapter.Transaction = null;
                }
                if ((this._cATEGORIESTableAdapter != null)) {
                    this._cATEGORIESTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(revertConnections[this._cATEGORIESTableAdapter]));
                    this._cATEGORIESTableAdapter.Transaction = null;
                }
                if ((this._gRID_SETTINGSTableAdapter != null)) {
                    this._gRID_SETTINGSTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(revertConnections[this._gRID_SETTINGSTableAdapter]));
                    this._gRID_SETTINGSTableAdapter.Transaction = null;
                }
                if ((this._pAYEE_IMPORTTableAdapter != null)) {
                    this._pAYEE_IMPORTTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(revertConnections[this._pAYEE_IMPORTTableAdapter]));
                    this._pAYEE_IMPORTTableAdapter.Transaction = null;
                }
                if ((this._pAYEESTableAdapter != null)) {
                    this._pAYEESTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(revertConnections[this._pAYEESTableAdapter]));
                    this._pAYEESTableAdapter.Transaction = null;
                }
                if ((this._rEP_FILTERSTableAdapter != null)) {
                    this._rEP_FILTERSTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(revertConnections[this._rEP_FILTERSTableAdapter]));
                    this._rEP_FILTERSTableAdapter.Transaction = null;
                }
                if ((this._rEPEAT_SPLIT_TRANSACTIONSTableAdapter != null)) {
                    this._rEPEAT_SPLIT_TRANSACTIONSTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(revertConnections[this._rEPEAT_SPLIT_TRANSACTIONSTableAdapter]));
                    this._rEPEAT_SPLIT_TRANSACTIONSTableAdapter.Transaction = null;
                }
                if ((this._rEPEAT_TRANSACTIONSTableAdapter != null)) {
                    this._rEPEAT_TRANSACTIONSTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(revertConnections[this._rEPEAT_TRANSACTIONSTableAdapter]));
                    this._rEPEAT_TRANSACTIONSTableAdapter.Transaction = null;
                }
                if ((this._sPLIT_TRANSACTIONSTableAdapter != null)) {
                    this._sPLIT_TRANSACTIONSTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(revertConnections[this._sPLIT_TRANSACTIONSTableAdapter]));
                    this._sPLIT_TRANSACTIONSTableAdapter.Transaction = null;
                }
                if ((this._sUB_CATEGORIESTableAdapter != null)) {
                    this._sUB_CATEGORIESTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(revertConnections[this._sUB_CATEGORIESTableAdapter]));
                    this._sUB_CATEGORIESTableAdapter.Transaction = null;
                }
                if ((this._tRANS_FILTERSTableAdapter != null)) {
                    this._tRANS_FILTERSTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(revertConnections[this._tRANS_FILTERSTableAdapter]));
                    this._tRANS_FILTERSTableAdapter.Transaction = null;
                }
                if ((this._tRANSACTIONSTableAdapter != null)) {
                    this._tRANSACTIONSTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(revertConnections[this._tRANSACTIONSTableAdapter]));
                    this._tRANSACTIONSTableAdapter.Transaction = null;
                }
                if ((this._uSER_SETTINGSTableAdapter != null)) {
                    this._uSER_SETTINGSTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(revertConnections[this._uSER_SETTINGSTableAdapter]));
                    this._uSER_SETTINGSTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private global::System.Data.DataRow GetRoot(global::System.Data.DataRow row, out int distance) {
                global::System.Diagnostics.Debug.Assert((row != null));
                global::System.Data.DataRow root = row;
                distance = 0;

                global::System.Collections.Generic.IDictionary<global::System.Data.DataRow, global::System.Data.DataRow> traversedRows = new global::System.Collections.Generic.Dictionary<global::System.Data.DataRow, global::System.Data.DataRow>();
                traversedRows[row] = row;

                global::System.Data.DataRow parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((parent != null) 
                            && (traversedRows.ContainsKey(parent) == false)); 
                ) {
                    distance = (distance + 1);
                    root = parent;
                    traversedRows[parent] = parent;
                    parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }

                if ((distance == 0)) {
                    traversedRows.Clear();
                    traversedRows[row] = row;
                    parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    for (
                    ; ((parent != null) 
                                && (traversedRows.ContainsKey(parent) == false)); 
                    ) {
                        distance = (distance + 1);
                        root = parent;
                        traversedRows[parent] = parent;
                        parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }

                return root;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                int distance1 = 0;
                global::System.Data.DataRow root1 = this.GetRoot(row1, out distance1);

                int distance2 = 0;
                global::System.Data.DataRow root2 = this.GetRoot(row2, out distance2);

                if (object.ReferenceEquals(root1, root2)) {
                    return (this._childFirst * distance1.CompareTo(distance2));
                }
                else {
                    global::System.Diagnostics.Debug.Assert(((root1.Table != null) 
                                    && (root2.Table != null)));
                    if ((root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2))) {
                        return -1;
                    }
                    else {
                        return 1;
                    }
                }
            }
        }
    }
}

#pragma warning restore 1591